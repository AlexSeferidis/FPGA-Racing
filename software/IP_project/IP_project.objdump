
IP_project.elf:     file format elf32-littlenios2
IP_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000ea4 memsz 0x00000ea4 flags r-x
    LOAD off    0x00001ec4 vaddr 0x00010ec4 paddr 0x00011054 align 2**12
         filesz 0x00000190 memsz 0x00000190 flags rw-
    LOAD off    0x000021e4 vaddr 0x000111e4 paddr 0x000111e4 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000cc8  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  00010e48  00010e48  00001e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000190  00010ec4  00011054  00001ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  000111e4  000111e4  000021e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011308  00011308  00002054  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000408  00000000  00000000  00002078  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004a0e  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b79  00000000  00000000  00006e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001d6c  00000000  00000000  00008a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000056c  00000000  00000000  0000a774  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001754  00000000  00000000  0000ace0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d59  00000000  00000000  0000c434  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d190  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000228  00000000  00000000  0000d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000e986  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000e989  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000e98c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000e98d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000e98e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000e997  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000e9a0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000e9a9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  0000e9bb  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0000e9f6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  000139ff  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00010e48 l    d  .rodata	00000000 .rodata
00010ec4 l    d  .rwdata	00000000 .rwdata
000111e4 l    d  .bss	00000000 .bss
00011308 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../IP_project_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00010ec4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010fa4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010cb0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00011204 g     O .bss	00000004 alt_instruction_exception_handler
000108a4 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00010570 g     F .text	00000080 _puts_r
00011208 g     O .bss	00000100 alt_irq
00011054 g       *ABS*	00000000 __flash_rwdata_start
000101bc g     F .text	00000080 sys_timer_isr
00011038 g     O .rwdata	00000004 jtag_uart
00010d9c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010ba4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000111f0 g     O .bss	00000004 errno
000102f0 g     F .text	000000a4 applyFilter
000111fc g     O .bss	00000004 alt_argv
00019028 g       *ABS*	00000000 _gp
00010fd0 g     O .rwdata	00000030 alt_fd_list
00010d24 g     F .text	00000074 alt_find_dev
000105f0 g     F .text	00000014 puts
00010da4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001103c g     O .rwdata	00000004 alt_max_fd
00010730 g     F .text	00000094 alt_irq_register
0001102c g     O .rwdata	00000004 _global_impure_ptr
00011308 g       *ABS*	00000000 __bss_end
000111f4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011000 g     O .rwdata	00000028 alt_dev_null
00010cac g     F .text	00000004 alt_dcache_flush_all
00011054 g       *ABS*	00000000 __ram_rwdata_end
00010280 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011040 g     O .rwdata	00000008 alt_dev_list
00010a88 g     F .text	00000060 write
00010ec4 g       *ABS*	00000000 __ram_rodata_end
000111e8 g     O .bss	00000001 led
00011308 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010b18 g     F .text	00000034 altera_avalon_jtag_uart_write
000108d0 g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
000111ec g     O .bss	00000004 level
00010b08 g     F .text	00000010 alt_sys_init
00010b54 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010548 g     F .text	00000028 .hidden __mulsi3
00010ec4 g       *ABS*	00000000 __ram_rwdata_start
00010e48 g       *ABS*	00000000 __ram_rodata_start
00010bfc g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00010e18 g     F .text	00000030 memcmp
00011308 g       *ABS*	00000000 __alt_stack_base
00011028 g     O .rwdata	00000004 TAPS
00010cb8 g     F .text	0000006c alt_dev_llist_insert
00010620 g     F .text	000000b8 __sfvwrite_small_dev
000111e4 g       *ABS*	00000000 __bss_start
00010394 g     F .text	000001b4 main
000111f8 g     O .bss	00000004 alt_envp
00011050 g     O .rwdata	00000004 alt_errno
00010e48 g       *ABS*	00000000 __flash_rodata_start
00010ae8 g     F .text	00000020 alt_irq_init
000106d8 g     F .text	00000058 _write_r
00011030 g     O .rwdata	00000004 _impure_ptr
00011200 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000111e4 g     O .bss	00000001 pwm
00011048 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010b4c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011054 g       *ABS*	00000000 _edata
00011308 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010c54 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000030 convert_read
0001000c g       .entry	00000000 _exit
00010b68 g     F .text	00000020 alt_up_accelerometer_spi_read
00010b88 g     F .text	0000001c alt_up_accelerometer_spi_write
00010604 g     F .text	0000001c strlen
00010a40 g     F .text	00000048 alt_putchar
00010d98 g     F .text	00000004 alt_icache_flush_all
00011034 g     O .rwdata	00000004 alt_priority_mask
000107c4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84048204 	addi	r16,r16,4616

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07717 	ldw	r2,-32292(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a40a14 	ori	gp,gp,36904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10847914 	ori	r2,r2,4580

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c4c214 	ori	r3,r3,4872

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00107c40 	call	107c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00108a40 	call	108a4 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07117 	ldw	r2,-32316(gp)
   101cc:	d1606f07 	ldb	r5,-32324(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_u8 led;
int level;
int TAPS = 64;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07003 	ldbu	r2,-32320(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07003 	ldbu	r2,-32320(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07003 	ldbu	r2,-32320(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a06f03 	ldbu	r2,-32324(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0206f05 	stb	zero,-32324(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a06f05 	stb	r2,-32324(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_u8 led;
int level;
int TAPS = 64;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10840804 	addi	r2,r2,4128
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
//    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10250:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10254:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
//    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10258:	10c001cc 	andi	r3,r2,7
   1025c:	00800204 	movi	r2,8
   10260:	10cfc83a 	sub	r7,r2,r3
   10264:	11ce983a 	sll	r7,r2,r7
   10268:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   1026c:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
//    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10270:	3884b03a 	or	r2,r7,r2
   10274:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   10278:	29000015 	stw	r4,0(r5)
   1027c:	f800283a 	ret

00010280 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10280:	defffe04 	addi	sp,sp,-8
   10284:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10288:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   1028c:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10290:	84040104 	addi	r16,r16,4100
   10294:	008000c4 	movi	r2,3
   10298:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1029c:	00c000b4 	movhi	r3,2
   102a0:	0005883a 	mov	r2,zero
   102a4:	18c40004 	addi	r3,r3,4096
   102a8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102ac:	00c000b4 	movhi	r3,2
   102b0:	18c40204 	addi	r3,r3,4104
   102b4:	01424004 	movi	r5,2304
   102b8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102bc:	00c000b4 	movhi	r3,2
   102c0:	18c40304 	addi	r3,r3,4108
   102c4:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102c8:	200d883a 	mov	r6,r4
   102cc:	000b883a 	mov	r5,zero
   102d0:	01000044 	movi	r4,1
   102d4:	00107300 	call	10730 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102d8:	008001c4 	movi	r2,7
   102dc:	80800035 	stwio	r2,0(r16)

}
   102e0:	dfc00117 	ldw	ra,4(sp)
   102e4:	dc000017 	ldw	r16,0(sp)
   102e8:	dec00204 	addi	sp,sp,8
   102ec:	f800283a 	ret

000102f0 <applyFilter>:

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
   102f0:	defffa04 	addi	sp,sp,-24
   102f4:	dc800215 	stw	r18,8(sp)
	alt_32 filtered_reading = 0;

	for(int i = TAPS - 1; i > 0; i--){
   102f8:	d4a00017 	ldw	r18,-32768(gp)
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
   102fc:	dfc00515 	stw	ra,20(sp)
   10300:	dd000415 	stw	r20,16(sp)
   10304:	9485883a 	add	r2,r18,r18
   10308:	1085883a 	add	r2,r2,r2
   1030c:	dcc00315 	stw	r19,12(sp)
   10310:	dc400115 	stw	r17,4(sp)
   10314:	dc000015 	stw	r16,0(sp)
	alt_32 filtered_reading = 0;

	for(int i = TAPS - 1; i > 0; i--){
   10318:	90ffffc4 	addi	r3,r18,-1
   1031c:	2885883a 	add	r2,r5,r2
   10320:	10bfff04 	addi	r2,r2,-4
   10324:	00c0040e 	bge	zero,r3,10338 <applyFilter+0x48>
		filter[i] =  filter[i-1];
   10328:	11ffff17 	ldw	r7,-4(r2)
}

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
	alt_32 filtered_reading = 0;

	for(int i = TAPS - 1; i > 0; i--){
   1032c:	18ffffc4 	addi	r3,r3,-1
		filter[i] =  filter[i-1];
   10330:	11c00015 	stw	r7,0(r2)
   10334:	003ffa06 	br	10320 <__alt_data_end+0xffff0320>
	}

	filter[0] = new_reading;
   10338:	29000015 	stw	r4,0(r5)
   1033c:	2821883a 	mov	r16,r5
   10340:	3023883a 	mov	r17,r6

	for(int i = 0; i < TAPS; i++){
   10344:	0029883a 	mov	r20,zero
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
	alt_32 filtered_reading = 0;
   10348:	0027883a 	mov	r19,zero
		filter[i] =  filter[i-1];
	}

	filter[0] = new_reading;

	for(int i = 0; i < TAPS; i++){
   1034c:	a480080e 	bge	r20,r18,10370 <applyFilter+0x80>
		filtered_reading += filter[i] * coeff[i];
   10350:	89400017 	ldw	r5,0(r17)
   10354:	81000017 	ldw	r4,0(r16)
		filter[i] =  filter[i-1];
	}

	filter[0] = new_reading;

	for(int i = 0; i < TAPS; i++){
   10358:	a5000044 	addi	r20,r20,1
   1035c:	84000104 	addi	r16,r16,4
		filtered_reading += filter[i] * coeff[i];
   10360:	00105480 	call	10548 <__mulsi3>
   10364:	98a7883a 	add	r19,r19,r2
   10368:	8c400104 	addi	r17,r17,4
   1036c:	003ff706 	br	1034c <__alt_data_end+0xffff034c>
	}
	return filtered_reading >> 6;
}
   10370:	9805d1ba 	srai	r2,r19,6
   10374:	dfc00517 	ldw	ra,20(sp)
   10378:	dd000417 	ldw	r20,16(sp)
   1037c:	dcc00317 	ldw	r19,12(sp)
   10380:	dc800217 	ldw	r18,8(sp)
   10384:	dc400117 	ldw	r17,4(sp)
   10388:	dc000017 	ldw	r16,0(sp)
   1038c:	dec00604 	addi	sp,sp,24
   10390:	f800283a 	ret

00010394 <main>:

int main() {
   10394:	defff604 	addi	sp,sp,-40
	printf("hello world \n");
   10398:	01000074 	movhi	r4,1
		filtered_reading += filter[i] * coeff[i];
	}
	return filtered_reading >> 6;
}

int main() {
   1039c:	df000815 	stw	fp,32(sp)
	printf("hello world \n");
   103a0:	21039204 	addi	r4,r4,3656
		filtered_reading += filter[i] * coeff[i];
	}
	return filtered_reading >> 6;
}

int main() {
   103a4:	df000804 	addi	fp,sp,32
   103a8:	dd400615 	stw	r21,24(sp)
   103ac:	dd000515 	stw	r20,20(sp)
   103b0:	dcc00415 	stw	r19,16(sp)
   103b4:	dfc00915 	stw	ra,36(sp)
   103b8:	dd800715 	stw	r22,28(sp)
   103bc:	dc800315 	stw	r18,12(sp)
   103c0:	dc400215 	stw	r17,8(sp)
   103c4:	dc000115 	stw	r16,4(sp)
	printf("hello world \n");
   103c8:	00105f00 	call	105f0 <puts>
	int i = 0;
    alt_32 x_read [TAPS];
   103cc:	d0e00017 	ldw	r3,-32768(gp)
    alt_32 drive=0;

    for(int i = 0; i < TAPS; i++){
    	x_read[i] = 0;
    	y_read[i] = 0;
    	coeff[i] = 1;
   103d0:	01c00044 	movi	r7,1
}

int main() {
	printf("hello world \n");
	int i = 0;
    alt_32 x_read [TAPS];
   103d4:	18c5883a 	add	r2,r3,r3
   103d8:	1085883a 	add	r2,r2,r2
   103dc:	10800184 	addi	r2,r2,6
   103e0:	1004d0ba 	srli	r2,r2,2
   103e4:	1085883a 	add	r2,r2,r2
   103e8:	1085883a 	add	r2,r2,r2
   103ec:	d8b7c83a 	sub	sp,sp,r2
   103f0:	d829883a 	mov	r20,sp
    alt_32 y_read [TAPS];
   103f4:	d8b7c83a 	sub	sp,sp,r2
   103f8:	d82b883a 	mov	r21,sp
    alt_32 coeff[TAPS];
   103fc:	d8b7c83a 	sub	sp,sp,r2
   10400:	d827883a 	mov	r19,sp
   10404:	a00b883a 	mov	r5,r20
   10408:	a809883a 	mov	r4,r21
   1040c:	d80d883a 	mov	r6,sp
    alt_32 val;
    alt_32 direction=0;
    alt_32 drive=0;

    for(int i = 0; i < TAPS; i++){
   10410:	0005883a 	mov	r2,zero
   10414:	10c0080e 	bge	r2,r3,10438 <main+0xa4>
    	x_read[i] = 0;
   10418:	28000015 	stw	zero,0(r5)
    	y_read[i] = 0;
   1041c:	20000015 	stw	zero,0(r4)
    	coeff[i] = 1;
   10420:	31c00015 	stw	r7,0(r6)
    alt_32 coeff[TAPS];
    alt_32 val;
    alt_32 direction=0;
    alt_32 drive=0;

    for(int i = 0; i < TAPS; i++){
   10424:	10800044 	addi	r2,r2,1
   10428:	29400104 	addi	r5,r5,4
   1042c:	21000104 	addi	r4,r4,4
   10430:	31800104 	addi	r6,r6,4
   10434:	003ff706 	br	10414 <__alt_data_end+0xffff0414>
    	coeff[i] = 1;
    }


    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10438:	01000074 	movhi	r4,1
   1043c:	21039604 	addi	r4,r4,3672
   10440:	0010b4c0 	call	10b4c <alt_up_accelerometer_spi_open_dev>
   10444:	102d883a 	mov	r22,r2
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10448:	10003226 	beq	r2,zero,10514 <main+0x180>
        return 1;
    }

    timer_init(sys_timer_isr);
   1044c:	01000074 	movhi	r4,1
   10450:	21006f04 	addi	r4,r4,444
   10454:	00102800 	call	10280 <timer_init>
    while (1) {

    	if (i == TAPS){
    		i = 0;
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & val);
   10458:	e17ff804 	addi	r5,fp,-32
   1045c:	b009883a 	mov	r4,r22
   10460:	0010ba40 	call	10ba4 <alt_up_accelerometer_spi_read_x_axis>
        alt_32 avg_x = applyFilter(val, x_read, coeff);
   10464:	e13ff817 	ldw	r4,-32(fp)
   10468:	980d883a 	mov	r6,r19
   1046c:	a00b883a 	mov	r5,r20
   10470:	00102f00 	call	102f0 <applyFilter>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & val);
   10474:	e17ff804 	addi	r5,fp,-32
   10478:	b009883a 	mov	r4,r22

    	if (i == TAPS){
    		i = 0;
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & val);
        alt_32 avg_x = applyFilter(val, x_read, coeff);
   1047c:	1021883a 	mov	r16,r2
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & val);
   10480:	0010bfc0 	call	10bfc <alt_up_accelerometer_spi_read_y_axis>
        alt_32 avg_y = applyFilter(val, y_read, coeff);
   10484:	e13ff817 	ldw	r4,-32(fp)
   10488:	980d883a 	mov	r6,r19
   1048c:	a80b883a 	mov	r5,r21
   10490:	00102f00 	call	102f0 <applyFilter>
   10494:	1025883a 	mov	r18,r2

        if(avg_x < -41){
   10498:	00bff5c4 	movi	r2,-41
   1049c:	80800216 	blt	r16,r2,104a8 <main+0x114>
        	direction = -1;
   104a0:	81400a88 	cmpgei	r5,r16,42
   104a4:	00000106 	br	104ac <main+0x118>
   104a8:	017fffc4 	movi	r5,-1
        }
        else{
        	direction = 0;
        }

        if(avg_y < -60){
   104ac:	00bff104 	movi	r2,-60
   104b0:	90800316 	blt	r18,r2,104c0 <main+0x12c>
        	drive = 1;
        }
        else if(avg_y > 60){
   104b4:	94400f48 	cmpgei	r17,r18,61
   104b8:	0463c83a 	sub	r17,zero,r17
   104bc:	00000106 	br	104c4 <main+0x130>
        else{
        	direction = 0;
        }

        if(avg_y < -60){
        	drive = 1;
   104c0:	04400044 	movi	r17,1
        }
        else{
        	drive = 0;
        }

        alt_printf("direction: %x ", direction);
   104c4:	01000074 	movhi	r4,1
   104c8:	21039c04 	addi	r4,r4,3696
   104cc:	00108d00 	call	108d0 <alt_printf>
        alt_printf("drive: %x" , drive);
   104d0:	01000074 	movhi	r4,1
   104d4:	880b883a 	mov	r5,r17
   104d8:	2103a004 	addi	r4,r4,3712
   104dc:	00108d00 	call	108d0 <alt_printf>
        alt_printf("x-axis reading: %x ", avg_x);
   104e0:	01000074 	movhi	r4,1
   104e4:	800b883a 	mov	r5,r16
   104e8:	2103a304 	addi	r4,r4,3724
   104ec:	00108d00 	call	108d0 <alt_printf>
        alt_printf("y-axis reading: %x\n", avg_y);
   104f0:	01000074 	movhi	r4,1
   104f4:	900b883a 	mov	r5,r18
   104f8:	2103a804 	addi	r4,r4,3744
   104fc:	00108d00 	call	108d0 <alt_printf>
        convert_read(avg_x, & level, & led);
   10500:	d1a07004 	addi	r6,gp,-32320
   10504:	d1607104 	addi	r5,gp,-32316
   10508:	8009883a 	mov	r4,r16
   1050c:	00102500 	call	10250 <convert_read>
        i++;
    }
   10510:	003fd106 	br	10458 <__alt_data_end+0xffff0458>

    return 0;
}
   10514:	00800044 	movi	r2,1
   10518:	e6fff904 	addi	sp,fp,-28
   1051c:	dfc00817 	ldw	ra,32(sp)
   10520:	df000717 	ldw	fp,28(sp)
   10524:	dd800617 	ldw	r22,24(sp)
   10528:	dd400517 	ldw	r21,20(sp)
   1052c:	dd000417 	ldw	r20,16(sp)
   10530:	dcc00317 	ldw	r19,12(sp)
   10534:	dc800217 	ldw	r18,8(sp)
   10538:	dc400117 	ldw	r17,4(sp)
   1053c:	dc000017 	ldw	r16,0(sp)
   10540:	dec00904 	addi	sp,sp,36
   10544:	f800283a 	ret

00010548 <__mulsi3>:
   10548:	0005883a 	mov	r2,zero
   1054c:	20000726 	beq	r4,zero,1056c <__mulsi3+0x24>
   10550:	20c0004c 	andi	r3,r4,1
   10554:	2008d07a 	srli	r4,r4,1
   10558:	18000126 	beq	r3,zero,10560 <__mulsi3+0x18>
   1055c:	1145883a 	add	r2,r2,r5
   10560:	294b883a 	add	r5,r5,r5
   10564:	203ffa1e 	bne	r4,zero,10550 <__alt_data_end+0xffff0550>
   10568:	f800283a 	ret
   1056c:	f800283a 	ret

00010570 <_puts_r>:
   10570:	defffd04 	addi	sp,sp,-12
   10574:	dc000015 	stw	r16,0(sp)
   10578:	2021883a 	mov	r16,r4
   1057c:	2809883a 	mov	r4,r5
   10580:	dfc00215 	stw	ra,8(sp)
   10584:	dc400115 	stw	r17,4(sp)
   10588:	2823883a 	mov	r17,r5
   1058c:	00106040 	call	10604 <strlen>
   10590:	81400217 	ldw	r5,8(r16)
   10594:	01000074 	movhi	r4,1
   10598:	21018804 	addi	r4,r4,1568
   1059c:	29000115 	stw	r4,4(r5)
   105a0:	100f883a 	mov	r7,r2
   105a4:	880d883a 	mov	r6,r17
   105a8:	8009883a 	mov	r4,r16
   105ac:	00106200 	call	10620 <__sfvwrite_small_dev>
   105b0:	00ffffc4 	movi	r3,-1
   105b4:	10c00926 	beq	r2,r3,105dc <_puts_r+0x6c>
   105b8:	81400217 	ldw	r5,8(r16)
   105bc:	01800074 	movhi	r6,1
   105c0:	01c00044 	movi	r7,1
   105c4:	28800117 	ldw	r2,4(r5)
   105c8:	3183ad04 	addi	r6,r6,3764
   105cc:	8009883a 	mov	r4,r16
   105d0:	103ee83a 	callr	r2
   105d4:	10bfffe0 	cmpeqi	r2,r2,-1
   105d8:	0085c83a 	sub	r2,zero,r2
   105dc:	dfc00217 	ldw	ra,8(sp)
   105e0:	dc400117 	ldw	r17,4(sp)
   105e4:	dc000017 	ldw	r16,0(sp)
   105e8:	dec00304 	addi	sp,sp,12
   105ec:	f800283a 	ret

000105f0 <puts>:
   105f0:	00800074 	movhi	r2,1
   105f4:	10840c04 	addi	r2,r2,4144
   105f8:	200b883a 	mov	r5,r4
   105fc:	11000017 	ldw	r4,0(r2)
   10600:	00105701 	jmpi	10570 <_puts_r>

00010604 <strlen>:
   10604:	2005883a 	mov	r2,r4
   10608:	10c00007 	ldb	r3,0(r2)
   1060c:	18000226 	beq	r3,zero,10618 <strlen+0x14>
   10610:	10800044 	addi	r2,r2,1
   10614:	003ffc06 	br	10608 <__alt_data_end+0xffff0608>
   10618:	1105c83a 	sub	r2,r2,r4
   1061c:	f800283a 	ret

00010620 <__sfvwrite_small_dev>:
   10620:	2880000b 	ldhu	r2,0(r5)
   10624:	1080020c 	andi	r2,r2,8
   10628:	10002126 	beq	r2,zero,106b0 <__sfvwrite_small_dev+0x90>
   1062c:	2880008f 	ldh	r2,2(r5)
   10630:	defffa04 	addi	sp,sp,-24
   10634:	dc000015 	stw	r16,0(sp)
   10638:	dfc00515 	stw	ra,20(sp)
   1063c:	dd000415 	stw	r20,16(sp)
   10640:	dcc00315 	stw	r19,12(sp)
   10644:	dc800215 	stw	r18,8(sp)
   10648:	dc400115 	stw	r17,4(sp)
   1064c:	2821883a 	mov	r16,r5
   10650:	10001216 	blt	r2,zero,1069c <__sfvwrite_small_dev+0x7c>
   10654:	2027883a 	mov	r19,r4
   10658:	3025883a 	mov	r18,r6
   1065c:	3823883a 	mov	r17,r7
   10660:	05010004 	movi	r20,1024
   10664:	04400b0e 	bge	zero,r17,10694 <__sfvwrite_small_dev+0x74>
   10668:	880f883a 	mov	r7,r17
   1066c:	a440010e 	bge	r20,r17,10674 <__sfvwrite_small_dev+0x54>
   10670:	01c10004 	movi	r7,1024
   10674:	8140008f 	ldh	r5,2(r16)
   10678:	900d883a 	mov	r6,r18
   1067c:	9809883a 	mov	r4,r19
   10680:	00106d80 	call	106d8 <_write_r>
   10684:	0080050e 	bge	zero,r2,1069c <__sfvwrite_small_dev+0x7c>
   10688:	88a3c83a 	sub	r17,r17,r2
   1068c:	90a5883a 	add	r18,r18,r2
   10690:	003ff406 	br	10664 <__alt_data_end+0xffff0664>
   10694:	0005883a 	mov	r2,zero
   10698:	00000706 	br	106b8 <__sfvwrite_small_dev+0x98>
   1069c:	8080000b 	ldhu	r2,0(r16)
   106a0:	10801014 	ori	r2,r2,64
   106a4:	8080000d 	sth	r2,0(r16)
   106a8:	00bfffc4 	movi	r2,-1
   106ac:	00000206 	br	106b8 <__sfvwrite_small_dev+0x98>
   106b0:	00bfffc4 	movi	r2,-1
   106b4:	f800283a 	ret
   106b8:	dfc00517 	ldw	ra,20(sp)
   106bc:	dd000417 	ldw	r20,16(sp)
   106c0:	dcc00317 	ldw	r19,12(sp)
   106c4:	dc800217 	ldw	r18,8(sp)
   106c8:	dc400117 	ldw	r17,4(sp)
   106cc:	dc000017 	ldw	r16,0(sp)
   106d0:	dec00604 	addi	sp,sp,24
   106d4:	f800283a 	ret

000106d8 <_write_r>:
   106d8:	defffd04 	addi	sp,sp,-12
   106dc:	dc000015 	stw	r16,0(sp)
   106e0:	04000074 	movhi	r16,1
   106e4:	dc400115 	stw	r17,4(sp)
   106e8:	84047c04 	addi	r16,r16,4592
   106ec:	2023883a 	mov	r17,r4
   106f0:	2809883a 	mov	r4,r5
   106f4:	300b883a 	mov	r5,r6
   106f8:	380d883a 	mov	r6,r7
   106fc:	dfc00215 	stw	ra,8(sp)
   10700:	80000015 	stw	zero,0(r16)
   10704:	0010a880 	call	10a88 <write>
   10708:	00ffffc4 	movi	r3,-1
   1070c:	10c0031e 	bne	r2,r3,1071c <_write_r+0x44>
   10710:	80c00017 	ldw	r3,0(r16)
   10714:	18000126 	beq	r3,zero,1071c <_write_r+0x44>
   10718:	88c00015 	stw	r3,0(r17)
   1071c:	dfc00217 	ldw	ra,8(sp)
   10720:	dc400117 	ldw	r17,4(sp)
   10724:	dc000017 	ldw	r16,0(sp)
   10728:	dec00304 	addi	sp,sp,12
   1072c:	f800283a 	ret

00010730 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10730:	008007c4 	movi	r2,31
   10734:	11002136 	bltu	r2,r4,107bc <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10738:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1073c:	00ffff84 	movi	r3,-2
   10740:	38c4703a 	and	r2,r7,r3
   10744:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10748:	200490fa 	slli	r2,r4,3
   1074c:	02000074 	movhi	r8,1
   10750:	42048204 	addi	r8,r8,4616
   10754:	4085883a 	add	r2,r8,r2
   10758:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   1075c:	11400115 	stw	r5,4(r2)
   10760:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10764:	30000726 	beq	r6,zero,10784 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10768:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1076c:	28c6703a 	and	r3,r5,r3
   10770:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10774:	d0e07317 	ldw	r3,-32308(gp)
   10778:	1104983a 	sll	r2,r2,r4
   1077c:	10c4b03a 	or	r2,r2,r3
   10780:	00000706 	br	107a0 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10784:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10788:	28c6703a 	and	r3,r5,r3
   1078c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10790:	1104983a 	sll	r2,r2,r4
   10794:	d0e07317 	ldw	r3,-32308(gp)
   10798:	0084303a 	nor	r2,zero,r2
   1079c:	10c4703a 	and	r2,r2,r3
   107a0:	d0a07315 	stw	r2,-32308(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   107a4:	d0a07317 	ldw	r2,-32308(gp)
   107a8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107ac:	2801703a 	wrctl	status,r5
   107b0:	3801703a 	wrctl	status,r7
   107b4:	0005883a 	mov	r2,zero
   107b8:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   107bc:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   107c0:	f800283a 	ret

000107c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   107c4:	deffff04 	addi	sp,sp,-4
   107c8:	01000074 	movhi	r4,1
   107cc:	01400074 	movhi	r5,1
   107d0:	dfc00015 	stw	ra,0(sp)
   107d4:	2103b104 	addi	r4,r4,3780
   107d8:	29441504 	addi	r5,r5,4180

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   107dc:	2140061e 	bne	r4,r5,107f8 <alt_load+0x34>
   107e0:	01000074 	movhi	r4,1
   107e4:	01400074 	movhi	r5,1
   107e8:	21000804 	addi	r4,r4,32
   107ec:	29400804 	addi	r5,r5,32
   107f0:	2140121e 	bne	r4,r5,1083c <alt_load+0x78>
   107f4:	00000b06 	br	10824 <alt_load+0x60>
   107f8:	00c00074 	movhi	r3,1
   107fc:	18c41504 	addi	r3,r3,4180
   10800:	1907c83a 	sub	r3,r3,r4
   10804:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10808:	10fff526 	beq	r2,r3,107e0 <__alt_data_end+0xffff07e0>
    {
      *to++ = *from++;
   1080c:	114f883a 	add	r7,r2,r5
   10810:	39c00017 	ldw	r7,0(r7)
   10814:	110d883a 	add	r6,r2,r4
   10818:	10800104 	addi	r2,r2,4
   1081c:	31c00015 	stw	r7,0(r6)
   10820:	003ff906 	br	10808 <__alt_data_end+0xffff0808>
   10824:	01000074 	movhi	r4,1
   10828:	01400074 	movhi	r5,1
   1082c:	21039204 	addi	r4,r4,3656
   10830:	29439204 	addi	r5,r5,3656

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10834:	2140101e 	bne	r4,r5,10878 <alt_load+0xb4>
   10838:	00000b06 	br	10868 <alt_load+0xa4>
   1083c:	00c00074 	movhi	r3,1
   10840:	18c06004 	addi	r3,r3,384
   10844:	1907c83a 	sub	r3,r3,r4
   10848:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1084c:	10fff526 	beq	r2,r3,10824 <__alt_data_end+0xffff0824>
    {
      *to++ = *from++;
   10850:	114f883a 	add	r7,r2,r5
   10854:	39c00017 	ldw	r7,0(r7)
   10858:	110d883a 	add	r6,r2,r4
   1085c:	10800104 	addi	r2,r2,4
   10860:	31c00015 	stw	r7,0(r6)
   10864:	003ff906 	br	1084c <__alt_data_end+0xffff084c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10868:	0010cac0 	call	10cac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1086c:	dfc00017 	ldw	ra,0(sp)
   10870:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10874:	0010d981 	jmpi	10d98 <alt_icache_flush_all>
   10878:	00c00074 	movhi	r3,1
   1087c:	18c3b104 	addi	r3,r3,3780
   10880:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10884:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10888:	18bff726 	beq	r3,r2,10868 <__alt_data_end+0xffff0868>
    {
      *to++ = *from++;
   1088c:	114f883a 	add	r7,r2,r5
   10890:	39c00017 	ldw	r7,0(r7)
   10894:	110d883a 	add	r6,r2,r4
   10898:	10800104 	addi	r2,r2,4
   1089c:	31c00015 	stw	r7,0(r6)
   108a0:	003ff906 	br	10888 <__alt_data_end+0xffff0888>

000108a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   108a4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   108a8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   108ac:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   108b0:	0010ae80 	call	10ae8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   108b4:	0010b080 	call	10b08 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   108b8:	d1a07417 	ldw	r6,-32304(gp)
   108bc:	d1607517 	ldw	r5,-32300(gp)
   108c0:	d1207617 	ldw	r4,-32296(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   108c4:	dfc00017 	ldw	ra,0(sp)
   108c8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   108cc:	00103941 	jmpi	10394 <main>

000108d0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   108d0:	defff204 	addi	sp,sp,-56
   108d4:	2005883a 	mov	r2,r4
   108d8:	dfc00a15 	stw	ra,40(sp)
   108dc:	df000915 	stw	fp,36(sp)
   108e0:	ddc00815 	stw	r23,32(sp)
   108e4:	dd800715 	stw	r22,28(sp)
   108e8:	dd400615 	stw	r21,24(sp)
   108ec:	dd000515 	stw	r20,20(sp)
   108f0:	dcc00415 	stw	r19,16(sp)
   108f4:	dc800315 	stw	r18,12(sp)
   108f8:	dc400215 	stw	r17,8(sp)
   108fc:	dc000115 	stw	r16,4(sp)
   10900:	d9400b15 	stw	r5,44(sp)
   10904:	d9800c15 	stw	r6,48(sp)
   10908:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1090c:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   10910:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   10914:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   10918:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   1091c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   10920:	11000007 	ldb	r4,0(r2)
   10924:	20003a26 	beq	r4,zero,10a10 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   10928:	24000226 	beq	r4,r16,10934 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1092c:	14400044 	addi	r17,r2,1
   10930:	00001406 	br	10984 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   10934:	14400084 	addi	r17,r2,2
   10938:	10800047 	ldb	r2,1(r2)
   1093c:	10003426 	beq	r2,zero,10a10 <alt_printf+0x140>
            {
                if (c == '%')
   10940:	1400021e 	bne	r2,r16,1094c <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   10944:	8009883a 	mov	r4,r16
   10948:	00000e06 	br	10984 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   1094c:	1480051e 	bne	r2,r18,10964 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   10950:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10954:	ad800104 	addi	r22,r21,4
   10958:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   1095c:	0010a400 	call	10a40 <alt_putchar>
   10960:	00002906 	br	10a08 <alt_printf+0x138>
                }
                else if (c == 'x')
   10964:	14c0201e 	bne	r2,r19,109e8 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   10968:	adc00017 	ldw	r23,0(r21)
   1096c:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   10970:	b8000326 	beq	r23,zero,10980 <alt_printf+0xb0>
   10974:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   10978:	00c003c4 	movi	r3,15
   1097c:	00000306 	br	1098c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   10980:	01000c04 	movi	r4,48
   10984:	0010a400 	call	10a40 <alt_putchar>
                        continue;
   10988:	00001f06 	br	10a08 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1098c:	1d84983a 	sll	r2,r3,r22
   10990:	15c4703a 	and	r2,r2,r23
   10994:	1000021e 	bne	r2,zero,109a0 <alt_printf+0xd0>
                        digit_shift -= 4;
   10998:	b5bfff04 	addi	r22,r22,-4
   1099c:	003ffb06 	br	1098c <__alt_data_end+0xffff098c>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   109a0:	070003c4 	movi	fp,15
                        if (digit <= 9)
   109a4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   109a8:	b0001716 	blt	r22,zero,10a08 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   109ac:	e588983a 	sll	r4,fp,r22
   109b0:	25c8703a 	and	r4,r4,r23
   109b4:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   109b8:	19000236 	bltu	r3,r4,109c4 <alt_printf+0xf4>
                            c = '0' + digit;
   109bc:	21000c04 	addi	r4,r4,48
   109c0:	00000106 	br	109c8 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   109c4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   109c8:	21003fcc 	andi	r4,r4,255
   109cc:	2100201c 	xori	r4,r4,128
   109d0:	213fe004 	addi	r4,r4,-128
   109d4:	d8c00015 	stw	r3,0(sp)
   109d8:	0010a400 	call	10a40 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   109dc:	b5bfff04 	addi	r22,r22,-4
   109e0:	d8c00017 	ldw	r3,0(sp)
   109e4:	003ff006 	br	109a8 <__alt_data_end+0xffff09a8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   109e8:	1500071e 	bne	r2,r20,10a08 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   109ec:	ad800017 	ldw	r22,0(r21)
   109f0:	ad400104 	addi	r21,r21,4

                    while(*s)
   109f4:	b1000007 	ldb	r4,0(r22)
   109f8:	20000326 	beq	r4,zero,10a08 <alt_printf+0x138>
                      alt_putchar(*s++);
   109fc:	b5800044 	addi	r22,r22,1
   10a00:	0010a400 	call	10a40 <alt_putchar>
   10a04:	003ffb06 	br	109f4 <__alt_data_end+0xffff09f4>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   10a08:	8805883a 	mov	r2,r17
   10a0c:	003fc406 	br	10920 <__alt_data_end+0xffff0920>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   10a10:	dfc00a17 	ldw	ra,40(sp)
   10a14:	df000917 	ldw	fp,36(sp)
   10a18:	ddc00817 	ldw	r23,32(sp)
   10a1c:	dd800717 	ldw	r22,28(sp)
   10a20:	dd400617 	ldw	r21,24(sp)
   10a24:	dd000517 	ldw	r20,20(sp)
   10a28:	dcc00417 	ldw	r19,16(sp)
   10a2c:	dc800317 	ldw	r18,12(sp)
   10a30:	dc400217 	ldw	r17,8(sp)
   10a34:	dc000117 	ldw	r16,4(sp)
   10a38:	dec00e04 	addi	sp,sp,56
   10a3c:	f800283a 	ret

00010a40 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10a40:	defffd04 	addi	sp,sp,-12
   10a44:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   10a48:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10a4c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   10a50:	01000074 	movhi	r4,1
   10a54:	000f883a 	mov	r7,zero
   10a58:	01800044 	movi	r6,1
   10a5c:	d80b883a 	mov	r5,sp
   10a60:	21040e04 	addi	r4,r4,4152
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   10a64:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   10a68:	0010b180 	call	10b18 <altera_avalon_jtag_uart_write>
   10a6c:	00ffffc4 	movi	r3,-1
   10a70:	10c00126 	beq	r2,r3,10a78 <alt_putchar+0x38>
        return -1;
    }
    return c;
   10a74:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   10a78:	dfc00217 	ldw	ra,8(sp)
   10a7c:	dc000117 	ldw	r16,4(sp)
   10a80:	dec00304 	addi	sp,sp,12
   10a84:	f800283a 	ret

00010a88 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10a88:	00800044 	movi	r2,1
   10a8c:	20800226 	beq	r4,r2,10a98 <write+0x10>
   10a90:	00800084 	movi	r2,2
   10a94:	2080041e 	bne	r4,r2,10aa8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10a98:	01000074 	movhi	r4,1
   10a9c:	000f883a 	mov	r7,zero
   10aa0:	21040e04 	addi	r4,r4,4152
   10aa4:	0010b181 	jmpi	10b18 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10aa8:	d0a00a17 	ldw	r2,-32728(gp)
   10aac:	10000926 	beq	r2,zero,10ad4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10ab0:	deffff04 	addi	sp,sp,-4
   10ab4:	dfc00015 	stw	ra,0(sp)
   10ab8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10abc:	00c01444 	movi	r3,81
   10ac0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10ac4:	00bfffc4 	movi	r2,-1
   10ac8:	dfc00017 	ldw	ra,0(sp)
   10acc:	dec00104 	addi	sp,sp,4
   10ad0:	f800283a 	ret
   10ad4:	d0a07204 	addi	r2,gp,-32312
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10ad8:	00c01444 	movi	r3,81
   10adc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10ae0:	00bfffc4 	movi	r2,-1
   10ae4:	f800283a 	ret

00010ae8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ae8:	deffff04 	addi	sp,sp,-4
   10aec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10af0:	0010d9c0 	call	10d9c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10af4:	00800044 	movi	r2,1
   10af8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10afc:	dfc00017 	ldw	ra,0(sp)
   10b00:	dec00104 	addi	sp,sp,4
   10b04:	f800283a 	ret

00010b08 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10b08:	01000074 	movhi	r4,1
   10b0c:	d1600604 	addi	r5,gp,-32744
   10b10:	2103e904 	addi	r4,r4,4004
   10b14:	0010cb81 	jmpi	10cb8 <alt_dev_llist_insert>

00010b18 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10b18:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10b1c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10b20:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10b24:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10b28:	2980072e 	bgeu	r5,r6,10b48 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10b2c:	38c00037 	ldwio	r3,0(r7)
   10b30:	18ffffec 	andhi	r3,r3,65535
   10b34:	183ffc26 	beq	r3,zero,10b28 <__alt_data_end+0xffff0b28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10b38:	28c00007 	ldb	r3,0(r5)
   10b3c:	20c00035 	stwio	r3,0(r4)
   10b40:	29400044 	addi	r5,r5,1
   10b44:	003ff806 	br	10b28 <__alt_data_end+0xffff0b28>

  return count;
}
   10b48:	f800283a 	ret

00010b4c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10b4c:	d1600604 	addi	r5,gp,-32744
   10b50:	0010d241 	jmpi	10d24 <alt_find_dev>

00010b54 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10b54:	20800a17 	ldw	r2,40(r4)
   10b58:	10800023 	ldbuio	r2,0(r2)
   10b5c:	28800005 	stb	r2,0(r5)

	return 0;
}
   10b60:	0005883a 	mov	r2,zero
   10b64:	f800283a 	ret

00010b68 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10b68:	20800a17 	ldw	r2,40(r4)
   10b6c:	29400fcc 	andi	r5,r5,63
   10b70:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10b74:	20800a17 	ldw	r2,40(r4)
   10b78:	10800063 	ldbuio	r2,1(r2)
   10b7c:	30800005 	stb	r2,0(r6)

	return 0;
}
   10b80:	0005883a 	mov	r2,zero
   10b84:	f800283a 	ret

00010b88 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10b88:	20800a17 	ldw	r2,40(r4)
   10b8c:	29400fcc 	andi	r5,r5,63
   10b90:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10b94:	20800a17 	ldw	r2,40(r4)
   10b98:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10b9c:	0005883a 	mov	r2,zero
   10ba0:	f800283a 	ret

00010ba4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ba4:	20800a17 	ldw	r2,40(r4)
   10ba8:	00c00c84 	movi	r3,50
   10bac:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10bb0:	20800a17 	ldw	r2,40(r4)
   10bb4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10bb8:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10bbc:	10803fcc 	andi	r2,r2,255
   10bc0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10bc4:	20800a17 	ldw	r2,40(r4)
   10bc8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10bcc:	20800a17 	ldw	r2,40(r4)
   10bd0:	10800063 	ldbuio	r2,1(r2)
   10bd4:	10803fcc 	andi	r2,r2,255
   10bd8:	1006923a 	slli	r3,r2,8
   10bdc:	28800017 	ldw	r2,0(r5)
   10be0:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   10be4:	10e0000c 	andi	r3,r2,32768
   10be8:	18000126 	beq	r3,zero,10bf0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   10bec:	10bffff4 	orhi	r2,r2,65535
   10bf0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10bf4:	0005883a 	mov	r2,zero
   10bf8:	f800283a 	ret

00010bfc <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10bfc:	20800a17 	ldw	r2,40(r4)
   10c00:	00c00d04 	movi	r3,52
   10c04:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c08:	20800a17 	ldw	r2,40(r4)
   10c0c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c10:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c14:	10803fcc 	andi	r2,r2,255
   10c18:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c1c:	20800a17 	ldw	r2,40(r4)
   10c20:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10c24:	20800a17 	ldw	r2,40(r4)
   10c28:	10800063 	ldbuio	r2,1(r2)
   10c2c:	10803fcc 	andi	r2,r2,255
   10c30:	1006923a 	slli	r3,r2,8
   10c34:	28800017 	ldw	r2,0(r5)
   10c38:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   10c3c:	10e0000c 	andi	r3,r2,32768
   10c40:	18000126 	beq	r3,zero,10c48 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   10c44:	10bffff4 	orhi	r2,r2,65535
   10c48:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10c4c:	0005883a 	mov	r2,zero
   10c50:	f800283a 	ret

00010c54 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c54:	20800a17 	ldw	r2,40(r4)
   10c58:	00c00d84 	movi	r3,54
   10c5c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c60:	20800a17 	ldw	r2,40(r4)
   10c64:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c68:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10c6c:	10803fcc 	andi	r2,r2,255
   10c70:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10c74:	20800a17 	ldw	r2,40(r4)
   10c78:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10c7c:	20800a17 	ldw	r2,40(r4)
   10c80:	10800063 	ldbuio	r2,1(r2)
   10c84:	10803fcc 	andi	r2,r2,255
   10c88:	1006923a 	slli	r3,r2,8
   10c8c:	28800017 	ldw	r2,0(r5)
   10c90:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   10c94:	10e0000c 	andi	r3,r2,32768
   10c98:	18000126 	beq	r3,zero,10ca0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   10c9c:	10bffff4 	orhi	r2,r2,65535
   10ca0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10ca4:	0005883a 	mov	r2,zero
   10ca8:	f800283a 	ret

00010cac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10cac:	f800283a 	ret

00010cb0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10cb0:	3005883a 	mov	r2,r6
   10cb4:	f800283a 	ret

00010cb8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10cb8:	20000226 	beq	r4,zero,10cc4 <alt_dev_llist_insert+0xc>
   10cbc:	20800217 	ldw	r2,8(r4)
   10cc0:	1000101e 	bne	r2,zero,10d04 <alt_dev_llist_insert+0x4c>
   10cc4:	d0a00a17 	ldw	r2,-32728(gp)
   10cc8:	10000926 	beq	r2,zero,10cf0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10ccc:	deffff04 	addi	sp,sp,-4
   10cd0:	dfc00015 	stw	ra,0(sp)
   10cd4:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10cd8:	00c00584 	movi	r3,22
   10cdc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10ce0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10ce4:	dfc00017 	ldw	ra,0(sp)
   10ce8:	dec00104 	addi	sp,sp,4
   10cec:	f800283a 	ret
   10cf0:	d0a07204 	addi	r2,gp,-32312
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10cf4:	00c00584 	movi	r3,22
   10cf8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10cfc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10d00:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10d04:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10d08:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10d0c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10d10:	28800017 	ldw	r2,0(r5)
   10d14:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10d18:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10d1c:	0005883a 	mov	r2,zero
   10d20:	f800283a 	ret

00010d24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10d24:	defffb04 	addi	sp,sp,-20
   10d28:	dcc00315 	stw	r19,12(sp)
   10d2c:	dc800215 	stw	r18,8(sp)
   10d30:	dc400115 	stw	r17,4(sp)
   10d34:	dc000015 	stw	r16,0(sp)
   10d38:	dfc00415 	stw	ra,16(sp)
   10d3c:	2027883a 	mov	r19,r4
   10d40:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   10d44:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10d48:	00106040 	call	10604 <strlen>
   10d4c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d50:	84400726 	beq	r16,r17,10d70 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10d54:	81000217 	ldw	r4,8(r16)
   10d58:	900d883a 	mov	r6,r18
   10d5c:	980b883a 	mov	r5,r19
   10d60:	0010e180 	call	10e18 <memcmp>
   10d64:	10000426 	beq	r2,zero,10d78 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   10d68:	84000017 	ldw	r16,0(r16)
   10d6c:	003ff806 	br	10d50 <__alt_data_end+0xffff0d50>
  }
  
  /* No match found */
  
  return NULL;
   10d70:	0005883a 	mov	r2,zero
   10d74:	00000106 	br	10d7c <alt_find_dev+0x58>
   10d78:	8005883a 	mov	r2,r16
}
   10d7c:	dfc00417 	ldw	ra,16(sp)
   10d80:	dcc00317 	ldw	r19,12(sp)
   10d84:	dc800217 	ldw	r18,8(sp)
   10d88:	dc400117 	ldw	r17,4(sp)
   10d8c:	dc000017 	ldw	r16,0(sp)
   10d90:	dec00504 	addi	sp,sp,20
   10d94:	f800283a 	ret

00010d98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d98:	f800283a 	ret

00010d9c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10d9c:	000170fa 	wrctl	ienable,zero
   10da0:	f800283a 	ret

00010da4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10da4:	213ffe84 	addi	r4,r4,-6
   10da8:	008003c4 	movi	r2,15
   10dac:	11001636 	bltu	r2,r4,10e08 <alt_exception_cause_generated_bad_addr+0x64>
   10db0:	200890ba 	slli	r4,r4,2
   10db4:	00800074 	movhi	r2,1
   10db8:	10837204 	addi	r2,r2,3528
   10dbc:	2089883a 	add	r4,r4,r2
   10dc0:	20800017 	ldw	r2,0(r4)
   10dc4:	1000683a 	jmp	r2
   10dc8:	00010e10 	cmplti	zero,zero,1080
   10dcc:	00010e10 	cmplti	zero,zero,1080
   10dd0:	00010e08 	cmpgei	zero,zero,1080
   10dd4:	00010e08 	cmpgei	zero,zero,1080
   10dd8:	00010e08 	cmpgei	zero,zero,1080
   10ddc:	00010e10 	cmplti	zero,zero,1080
   10de0:	00010e08 	cmpgei	zero,zero,1080
   10de4:	00010e08 	cmpgei	zero,zero,1080
   10de8:	00010e10 	cmplti	zero,zero,1080
   10dec:	00010e10 	cmplti	zero,zero,1080
   10df0:	00010e08 	cmpgei	zero,zero,1080
   10df4:	00010e10 	cmplti	zero,zero,1080
   10df8:	00010e08 	cmpgei	zero,zero,1080
   10dfc:	00010e08 	cmpgei	zero,zero,1080
   10e00:	00010e08 	cmpgei	zero,zero,1080
   10e04:	00010e10 	cmplti	zero,zero,1080
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10e08:	0005883a 	mov	r2,zero
   10e0c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10e10:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   10e14:	f800283a 	ret

00010e18 <memcmp>:
   10e18:	218d883a 	add	r6,r4,r6
   10e1c:	21800826 	beq	r4,r6,10e40 <memcmp+0x28>
   10e20:	20800003 	ldbu	r2,0(r4)
   10e24:	28c00003 	ldbu	r3,0(r5)
   10e28:	10c00226 	beq	r2,r3,10e34 <memcmp+0x1c>
   10e2c:	10c5c83a 	sub	r2,r2,r3
   10e30:	f800283a 	ret
   10e34:	21000044 	addi	r4,r4,1
   10e38:	29400044 	addi	r5,r5,1
   10e3c:	003ff706 	br	10e1c <__alt_data_end+0xffff0e1c>
   10e40:	0005883a 	mov	r2,zero
   10e44:	f800283a 	ret
