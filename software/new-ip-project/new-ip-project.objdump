
new-ip-project.elf:     file format elf32-littlenios2
new-ip-project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000688c memsz 0x0000688c flags r-x
    LOAD off    0x000078ac vaddr 0x000168ac paddr 0x00018348 align 2**12
         filesz 0x00001a9c memsz 0x00001a9c flags rw-
    LOAD off    0x00009de4 vaddr 0x00019de4 paddr 0x00019de4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006590  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  000167c4  000167c4  000077c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a9c  000168ac  00018348  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00019de4  00019de4  00009de4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00019f44  00019f44  00009348  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009348  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ac0  00000000  00000000  00009370  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018b2c  00000000  00000000  00009e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000068c3  00000000  00000000  0002295c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000747b  00000000  00000000  0002921f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000181c  00000000  00000000  0003069c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002ac5  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004eb0  00000000  00000000  0003497d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00039830  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006f8  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c70a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003c70d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c710  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003c711  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003c712  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003c71b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003c724  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0003c72d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000040  00000000  00000000  0003c73f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0003c77f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043e99  00000000  00000000  00041788  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
000167c4 l    d  .rodata	00000000 .rodata
000168ac l    d  .rwdata	00000000 .rwdata
00019de4 l    d  .bss	00000000 .bss
00019f44 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../new-ip-project_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010bf4 l     F .text	00000008 __fp_unlock
00010c08 l     F .text	0000019c __sinit.part.1
00010da4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000168ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0001386c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013980 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000139ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00013c20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013d08 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013df4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00014238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001833c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000144ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000145e8 l     F .text	00000034 alt_dev_reg
00017280 l     O .rwdata	00001060 jtag_uart
000182e0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000148d8 l     F .text	00000210 altera_avalon_jtag_uart_irq
00014ae8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015120 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001570c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001595c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00015abc l     F .text	0000003c alt_get_errno
00015af8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019e18 g     O .bss	00000004 alt_instruction_exception_handler
00013664 g     F .text	00000054 _isatty_r
00013f0c g     F .text	0000007c alt_main
00010270 g     F .text	00000038 led_write
00010a88 g     F .text	000000c0 _puts_r
00019e44 g     O .bss	00000100 alt_irq
0001338c g     F .text	00000060 _lseek_r
00018348 g       *ABS*	00000000 __flash_rwdata_start
00019f44 g       *ABS*	00000000 __alt_heap_start
00012940 g     F .text	0000005c __sseek
00010f54 g     F .text	00000010 __sinit
000163a0 g     F .text	00000140 __swbuf_r
00010dac g     F .text	00000078 __sfmoreglue
00013fac g     F .text	00000024 __malloc_unlock
0001202c g     F .text	0000015c memmove
00010f3c g     F .text	00000018 _cleanup
0001032c g     F .text	000000d0 sys_timer_isr
00015ee4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
0001535c g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013608 g     F .text	0000005c _fstat_r
00019dfc g     O .bss	00000004 errno
000128bc g     F .text	00000008 __seofread
0001048c g     F .text	00000124 applyFilter
00019e08 g     O .bss	00000004 alt_argv
0002030c g       *ABS*	00000000 _gp
00017100 g     O .rwdata	00000180 alt_fd_list
000158ac g     F .text	00000090 alt_find_dev
00011ee4 g     F .text	00000148 memcpy
00010bfc g     F .text	0000000c _cleanup_r
00015a40 g     F .text	0000007c alt_io_redirect
000167c4 g       *ABS*	00000000 __DTOR_END__
00010b48 g     F .text	00000014 puts
000160d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014ce0 g     F .text	0000021c altera_avalon_jtag_uart_read
000137b0 g     F .text	00000064 .hidden __udivsi3
00013c5c g     F .text	000000ac isatty
00019df8 g     O .bss	00000004 __malloc_top_pad
00010fa4 g     F .text	000004c8 __sfvwrite_r
00012814 g     F .text	00000054 _sbrk_r
000135a8 g     F .text	00000060 _read_r
00018330 g     O .rwdata	00000004 alt_max_fd
00012bac g     F .text	000000f0 _fclose_r
00012f28 g     F .text	00000030 fflush
00019df4 g     O .bss	00000004 __malloc_max_sbrked_mem
00013aa0 g     F .text	00000180 alt_irq_register
00013e30 g     F .text	000000dc lseek
00018310 g     O .rwdata	00000004 _global_impure_ptr
000122b0 g     F .text	00000564 _realloc_r
00019f44 g       *ABS*	00000000 __bss_end
00015ddc g     F .text	00000108 alt_tick
00010f74 g     F .text	00000018 __fp_lock_all
00015d40 g     F .text	0000009c alt_alarm_stop
00019e00 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
000170d8 g     O .rwdata	00000028 alt_dev_null
000156ec g     F .text	00000020 alt_dcache_flush_all
00018348 g       *ABS*	00000000 __ram_rwdata_end
000103fc g     F .text	00000090 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00018328 g     O .rwdata	00000008 alt_dev_list
000144e8 g     F .text	00000100 write
00016238 g     F .text	000000a0 _putc_r
000168ac g       *ABS*	00000000 __ram_rodata_end
000139e8 g     F .text	000000b8 fstat
00019de8 g     O .bss	00000001 led
00013814 g     F .text	00000058 .hidden __umodsi3
00019f44 g       *ABS*	00000000 end
00014824 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
000167c4 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001519c g     F .text	00000074 alt_avalon_timer_sc_init
00014efc g     F .text	00000224 altera_avalon_jtag_uart_write
00010f64 g     F .text	00000004 __sfp_lock_acquire
00011e00 g     F .text	000000e4 memchr
0001307c g     F .text	00000310 _free_r
00013fd0 g     F .text	0000022c alt_printf
00016610 g     F .text	00000180 __call_exitprocs
00018318 g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
00019dec g     O .bss	00000004 level
00019e10 g     O .bss	00000004 _alt_tick_rate
00019e14 g     O .bss	00000004 _alt_nticks
00014274 g     F .text	00000104 read
00014654 g     F .text	0000006c alt_sys_init
0001524c g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000164f8 g     F .text	00000118 __register_exitproc
00014b88 g     F .text	00000068 altera_avalon_jtag_uart_close
00010a60 g     F .text	00000028 .hidden __mulsi3
000168ac g       *ABS*	00000000 __ram_rwdata_start
000167c4 g       *ABS*	00000000 __ram_rodata_start
00019e1c g     O .bss	00000028 __malloc_current_mallinfo
000146c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016010 g     F .text	000000c4 alt_get_fd
00015428 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00012b58 g     F .text	00000054 _close_r
000161bc g     F .text	0000007c memcmp
00014780 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019f44 g       *ABS*	00000000 __alt_stack_base
000147d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012a04 g     F .text	00000154 __swsetup_r
00010e24 g     F .text	00000118 __sfp
0001830c g     O .rwdata	00000004 TAPS
00016cd0 g     O .rwdata	00000408 __malloc_av_
00010f70 g     F .text	00000004 __sinit_lock_release
00012868 g     F .text	00000054 __sread
00015f08 g     F .text	00000108 alt_find_file
00015748 g     F .text	000000a4 alt_dev_llist_insert
00013f88 g     F .text	00000024 __malloc_lock
000143fc g     F .text	000000b0 sbrk
00012ecc g     F .text	0000005c _fflush_r
00019de4 g       *ABS*	00000000 __bss_start
00012188 g     F .text	00000128 memset
000105b0 g     F .text	000004b0 main
00019e0c g     O .bss	00000004 alt_envp
00019df0 g     O .bss	00000004 __malloc_max_total_mem
00014720 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000164e0 g     F .text	00000018 __swbuf
0001299c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012c9c g     F .text	00000014 fclose
000115f4 g     F .text	0000080c _malloc_r
00018334 g     O .rwdata	00000004 alt_errno
0001146c g     F .text	000000c4 _fwalk
000162d8 g     F .text	000000c8 putc
000136b8 g     F .text	00000084 .hidden __divsi3
00012f58 g     F .text	00000124 _malloc_trim_r
000167c4 g       *ABS*	00000000 __CTOR_END__
000167c4 g       *ABS*	00000000 __flash_rodata_start
000167c4 g       *ABS*	00000000 __DTOR_LIST__
0001461c g     F .text	00000038 alt_irq_init
00014378 g     F .text	00000084 alt_release_fd
00016170 g     F .text	00000014 atexit
000129a4 g     F .text	00000060 _write_r
00018314 g     O .rwdata	00000004 _impure_ptr
00019e04 g     O .bss	00000004 alt_argc
00012cb0 g     F .text	0000021c __sflush_r
0001584c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010f8c g     F .text	00000018 __fp_unlock_all
00019de4 g     O .bss	00000001 pwm
00018320 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015210 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00018348 g       *ABS*	00000000 _edata
00019f44 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00014bf0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000128c4 g     F .text	0000007c __swrite
0001831c g     O .rwdata	00000004 __malloc_trim_threshold
00016184 g     F .text	00000038 exit
00011530 g     F .text	000000c4 _fwalk_reent
0001373c g     F .text	00000074 .hidden __modsi3
000154f4 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010f68 g     F .text	00000004 __sfp_lock_release
000102a8 g     F .text	00000084 convert_read
00016790 g     F .text	00000034 _exit
000155c0 g     F .text	0000012c alt_alarm_start
00015290 g     F .text	00000068 alt_up_accelerometer_spi_read
000152f8 g     F .text	00000064 alt_up_accelerometer_spi_write
000133ec g     F .text	000001bc __smakebuf_r
00010b5c g     F .text	00000098 strlen
00015be4 g     F .text	0000015c open
000141fc g     F .text	0000003c alt_putchar
0001593c g     F .text	00000020 alt_icache_flush_all
00018338 g     O .rwdata	00000004 alt_priority_mask
00018340 g     O .rwdata	00000008 alt_alarm_list
000157ec g     F .text	00000060 _do_ctors
000138a8 g     F .text	000000d8 close
00013d70 g     F .text	00000084 alt_load
00010f6c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a79104 	addi	r2,r2,-25020
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a79104 	addi	r2,r2,-25020
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xfffefe20>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xfffefe14>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6c317 	ldw	r2,-25844(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6c317 	ldw	r2,-25844(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10240:	d680c314 	ori	gp,gp,780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a77914 	ori	r2,r2,40420

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e7d114 	ori	r3,r3,40772

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xfffeff4c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	0013d700 	call	13d70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	0013f0c0 	call	13f0c <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xfffeff60>

00010270 <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;
int TAPS = 64;

void led_write(alt_u8 led_pattern) {
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	2005883a 	mov	r2,r4
   10280:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   10284:	e0ffff03 	ldbu	r3,-4(fp)
   10288:	008000b4 	movhi	r2,2
   1028c:	10840c04 	addi	r2,r2,4144
   10290:	10c00035 	stwio	r3,0(r2)
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
   102a8:	defffb04 	addi	sp,sp,-20
   102ac:	df000415 	stw	fp,16(sp)
   102b0:	df000404 	addi	fp,sp,16
   102b4:	e13ffd15 	stw	r4,-12(fp)
   102b8:	e17ffe15 	stw	r5,-8(fp)
   102bc:	e1bfff15 	stw	r6,-4(fp)
//    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	1005d1ba 	srai	r2,r2,6
   102c8:	108001cc 	andi	r2,r2,7
   102cc:	e0bffc05 	stb	r2,-16(fp)
    * led = (8 >> val) | (8 << (8 - val));
   102d0:	e0bffc03 	ldbu	r2,-16(fp)
   102d4:	00c00204 	movi	r3,8
   102d8:	1885d83a 	sra	r2,r3,r2
   102dc:	1009883a 	mov	r4,r2
   102e0:	e0bffc03 	ldbu	r2,-16(fp)
   102e4:	00c00204 	movi	r3,8
   102e8:	1885c83a 	sub	r2,r3,r2
   102ec:	00c00204 	movi	r3,8
   102f0:	1884983a 	sll	r2,r3,r2
   102f4:	2084b03a 	or	r2,r4,r2
   102f8:	1007883a 	mov	r3,r2
   102fc:	e0bfff17 	ldw	r2,-4(fp)
   10300:	10c00005 	stb	r3,0(r2)
    * level = (acc_read >> 1) & 0x1f;
   10304:	e0bffd17 	ldw	r2,-12(fp)
   10308:	1005d07a 	srai	r2,r2,1
   1030c:	10c007cc 	andi	r3,r2,31
   10310:	e0bffe17 	ldw	r2,-8(fp)
   10314:	10c00015 	stw	r3,0(r2)
}
   10318:	0001883a 	nop
   1031c:	e037883a 	mov	sp,fp
   10320:	df000017 	ldw	fp,0(sp)
   10324:	dec00104 	addi	sp,sp,4
   10328:	f800283a 	ret

0001032c <sys_timer_isr>:

void sys_timer_isr() {
   1032c:	defffe04 	addi	sp,sp,-8
   10330:	dfc00115 	stw	ra,4(sp)
   10334:	df000015 	stw	fp,0(sp)
   10338:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1033c:	0007883a 	mov	r3,zero
   10340:	008000b4 	movhi	r2,2
   10344:	10840004 	addi	r2,r2,4096
   10348:	10c00035 	stwio	r3,0(r2)

    if (pwm < abs(level)) {
   1034c:	d0a6b603 	ldbu	r2,-25896(gp)
   10350:	10c03fcc 	andi	r3,r2,255
   10354:	18c0201c 	xori	r3,r3,128
   10358:	18ffe004 	addi	r3,r3,-128
   1035c:	d0a6b817 	ldw	r2,-25888(gp)
   10360:	1000010e 	bge	r2,zero,10368 <sys_timer_isr+0x3c>
   10364:	0085c83a 	sub	r2,zero,r2
   10368:	18800f0e 	bge	r3,r2,103a8 <sys_timer_isr+0x7c>

        if (level < 0) {
   1036c:	d0a6b817 	ldw	r2,-25888(gp)
   10370:	1000060e 	bge	r2,zero,1038c <sys_timer_isr+0x60>
            led_write(led << 1);
   10374:	d0a6b703 	ldbu	r2,-25892(gp)
   10378:	1085883a 	add	r2,r2,r2
   1037c:	10803fcc 	andi	r2,r2,255
   10380:	1009883a 	mov	r4,r2
   10384:	00102700 	call	10270 <led_write>
   10388:	00000b06 	br	103b8 <sys_timer_isr+0x8c>
        } else {
            led_write(led >> 1);
   1038c:	d0a6b703 	ldbu	r2,-25892(gp)
   10390:	10803fcc 	andi	r2,r2,255
   10394:	1004d07a 	srli	r2,r2,1
   10398:	10803fcc 	andi	r2,r2,255
   1039c:	1009883a 	mov	r4,r2
   103a0:	00102700 	call	10270 <led_write>
   103a4:	00000406 	br	103b8 <sys_timer_isr+0x8c>
        }

    } else {
        led_write(led);
   103a8:	d0a6b703 	ldbu	r2,-25892(gp)
   103ac:	10803fcc 	andi	r2,r2,255
   103b0:	1009883a 	mov	r4,r2
   103b4:	00102700 	call	10270 <led_write>
    }

    if (pwm > PWM_PERIOD) {
   103b8:	d0a6b603 	ldbu	r2,-25896(gp)
   103bc:	10803fcc 	andi	r2,r2,255
   103c0:	1080201c 	xori	r2,r2,128
   103c4:	10bfe004 	addi	r2,r2,-128
   103c8:	10800450 	cmplti	r2,r2,17
   103cc:	1000021e 	bne	r2,zero,103d8 <sys_timer_isr+0xac>
        pwm = 0;
   103d0:	d026b605 	stb	zero,-25896(gp)
    } else {
        pwm++;
    }

}
   103d4:	00000306 	br	103e4 <sys_timer_isr+0xb8>
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
   103d8:	d0a6b603 	ldbu	r2,-25896(gp)
   103dc:	10800044 	addi	r2,r2,1
   103e0:	d0a6b605 	stb	r2,-25896(gp)
    }

}
   103e4:	0001883a 	nop
   103e8:	e037883a 	mov	sp,fp
   103ec:	dfc00117 	ldw	ra,4(sp)
   103f0:	df000017 	ldw	fp,0(sp)
   103f4:	dec00204 	addi	sp,sp,8
   103f8:	f800283a 	ret

000103fc <timer_init>:

void timer_init(void * isr) {
   103fc:	defffd04 	addi	sp,sp,-12
   10400:	dfc00215 	stw	ra,8(sp)
   10404:	df000115 	stw	fp,4(sp)
   10408:	df000104 	addi	fp,sp,4
   1040c:	e13fff15 	stw	r4,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10410:	00c000c4 	movi	r3,3
   10414:	008000b4 	movhi	r2,2
   10418:	10840104 	addi	r2,r2,4100
   1041c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10420:	0007883a 	mov	r3,zero
   10424:	008000b4 	movhi	r2,2
   10428:	10840004 	addi	r2,r2,4096
   1042c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10430:	00c24004 	movi	r3,2304
   10434:	008000b4 	movhi	r2,2
   10438:	10840204 	addi	r2,r2,4104
   1043c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10440:	0007883a 	mov	r3,zero
   10444:	008000b4 	movhi	r2,2
   10448:	10840304 	addi	r2,r2,4108
   1044c:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10450:	e0bfff17 	ldw	r2,-4(fp)
   10454:	100d883a 	mov	r6,r2
   10458:	000b883a 	mov	r5,zero
   1045c:	01000044 	movi	r4,1
   10460:	0013aa00 	call	13aa0 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10464:	00c001c4 	movi	r3,7
   10468:	008000b4 	movhi	r2,2
   1046c:	10840104 	addi	r2,r2,4100
   10470:	10c00035 	stwio	r3,0(r2)

}
   10474:	0001883a 	nop
   10478:	e037883a 	mov	sp,fp
   1047c:	dfc00117 	ldw	ra,4(sp)
   10480:	df000017 	ldw	fp,0(sp)
   10484:	dec00204 	addi	sp,sp,8
   10488:	f800283a 	ret

0001048c <applyFilter>:

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
   1048c:	defff804 	addi	sp,sp,-32
   10490:	dfc00715 	stw	ra,28(sp)
   10494:	df000615 	stw	fp,24(sp)
   10498:	df000604 	addi	fp,sp,24
   1049c:	e13ffd15 	stw	r4,-12(fp)
   104a0:	e17ffe15 	stw	r5,-8(fp)
   104a4:	e1bfff15 	stw	r6,-4(fp)
	alt_32 filtered_reading = 0;
   104a8:	e03ffa15 	stw	zero,-24(fp)

	for(int i = TAPS - 1; i > 0; i--){
   104ac:	d0a00017 	ldw	r2,-32768(gp)
   104b0:	10bfffc4 	addi	r2,r2,-1
   104b4:	e0bffb15 	stw	r2,-20(fp)
   104b8:	00001406 	br	1050c <applyFilter+0x80>
		filter[i] =  filter[i-1];
   104bc:	e0bffb17 	ldw	r2,-20(fp)
   104c0:	1085883a 	add	r2,r2,r2
   104c4:	1085883a 	add	r2,r2,r2
   104c8:	1007883a 	mov	r3,r2
   104cc:	e0bffe17 	ldw	r2,-8(fp)
   104d0:	10c7883a 	add	r3,r2,r3
   104d4:	e13ffb17 	ldw	r4,-20(fp)
   104d8:	00900034 	movhi	r2,16384
   104dc:	10bfffc4 	addi	r2,r2,-1
   104e0:	2085883a 	add	r2,r4,r2
   104e4:	1085883a 	add	r2,r2,r2
   104e8:	1085883a 	add	r2,r2,r2
   104ec:	1009883a 	mov	r4,r2
   104f0:	e0bffe17 	ldw	r2,-8(fp)
   104f4:	1105883a 	add	r2,r2,r4
   104f8:	10800017 	ldw	r2,0(r2)
   104fc:	18800015 	stw	r2,0(r3)
}

alt_32 applyFilter(alt_32 new_reading, alt_32 filter[TAPS], alt_32 coeff[TAPS]){
	alt_32 filtered_reading = 0;

	for(int i = TAPS - 1; i > 0; i--){
   10500:	e0bffb17 	ldw	r2,-20(fp)
   10504:	10bfffc4 	addi	r2,r2,-1
   10508:	e0bffb15 	stw	r2,-20(fp)
   1050c:	e0bffb17 	ldw	r2,-20(fp)
   10510:	00bfea16 	blt	zero,r2,104bc <_gp+0xffff01b0>
		filter[i] =  filter[i-1];
	}

	filter[0] = new_reading;
   10514:	e0bffe17 	ldw	r2,-8(fp)
   10518:	e0fffd17 	ldw	r3,-12(fp)
   1051c:	10c00015 	stw	r3,0(r2)

	for(int i = 0; i < TAPS; i++){
   10520:	e03ffc15 	stw	zero,-16(fp)
   10524:	00001806 	br	10588 <applyFilter+0xfc>
		filtered_reading += filter[i] * coeff[i];
   10528:	e0bffc17 	ldw	r2,-16(fp)
   1052c:	1085883a 	add	r2,r2,r2
   10530:	1085883a 	add	r2,r2,r2
   10534:	1007883a 	mov	r3,r2
   10538:	e0bffe17 	ldw	r2,-8(fp)
   1053c:	10c5883a 	add	r2,r2,r3
   10540:	10c00017 	ldw	r3,0(r2)
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	1085883a 	add	r2,r2,r2
   1054c:	1085883a 	add	r2,r2,r2
   10550:	1009883a 	mov	r4,r2
   10554:	e0bfff17 	ldw	r2,-4(fp)
   10558:	1105883a 	add	r2,r2,r4
   1055c:	10800017 	ldw	r2,0(r2)
   10560:	100b883a 	mov	r5,r2
   10564:	1809883a 	mov	r4,r3
   10568:	0010a600 	call	10a60 <__mulsi3>
   1056c:	1007883a 	mov	r3,r2
   10570:	e0bffa17 	ldw	r2,-24(fp)
   10574:	10c5883a 	add	r2,r2,r3
   10578:	e0bffa15 	stw	r2,-24(fp)
		filter[i] =  filter[i-1];
	}

	filter[0] = new_reading;

	for(int i = 0; i < TAPS; i++){
   1057c:	e0bffc17 	ldw	r2,-16(fp)
   10580:	10800044 	addi	r2,r2,1
   10584:	e0bffc15 	stw	r2,-16(fp)
   10588:	d0a00017 	ldw	r2,-32768(gp)
   1058c:	e0fffc17 	ldw	r3,-16(fp)
   10590:	18bfe516 	blt	r3,r2,10528 <_gp+0xffff021c>
		filtered_reading += filter[i] * coeff[i];
	}
	return filtered_reading >> 6;
   10594:	e0bffa17 	ldw	r2,-24(fp)
   10598:	1005d1ba 	srai	r2,r2,6
}
   1059c:	e037883a 	mov	sp,fp
   105a0:	dfc00117 	ldw	ra,4(sp)
   105a4:	df000017 	ldw	fp,0(sp)
   105a8:	dec00204 	addi	sp,sp,8
   105ac:	f800283a 	ret

000105b0 <main>:

int main() {
   105b0:	deffd604 	addi	sp,sp,-168
   105b4:	dfc02915 	stw	ra,164(sp)
   105b8:	df002815 	stw	fp,160(sp)
   105bc:	ddc02715 	stw	r23,156(sp)
   105c0:	dd802615 	stw	r22,152(sp)
   105c4:	dd402515 	stw	r21,148(sp)
   105c8:	dd002415 	stw	r20,144(sp)
   105cc:	dcc02315 	stw	r19,140(sp)
   105d0:	dc802215 	stw	r18,136(sp)
   105d4:	dc402115 	stw	r17,132(sp)
   105d8:	dc002015 	stw	r16,128(sp)
   105dc:	df002804 	addi	fp,sp,160
   105e0:	d805883a 	mov	r2,sp
   105e4:	e0bfe715 	stw	r2,-100(fp)
	printf("Hello, Sam!\n");
   105e8:	01000074 	movhi	r4,1
   105ec:	2119f104 	addi	r4,r4,26564
   105f0:	0010b480 	call	10b48 <puts>
	int i = 0;
   105f4:	e03fd815 	stw	zero,-160(fp)
    alt_32 x_read [TAPS];
   105f8:	d0e00017 	ldw	r3,-32768(gp)
   105fc:	18bfffc4 	addi	r2,r3,-1
   10600:	e0bfdc15 	stw	r2,-144(fp)
   10604:	1805883a 	mov	r2,r3
   10608:	e0bfe815 	stw	r2,-96(fp)
   1060c:	e03fe915 	stw	zero,-92(fp)
   10610:	e13fe817 	ldw	r4,-96(fp)
   10614:	2004d6fa 	srli	r2,r4,27
   10618:	e13fe917 	ldw	r4,-92(fp)
   1061c:	2008917a 	slli	r4,r4,5
   10620:	e13feb15 	stw	r4,-84(fp)
   10624:	e13feb17 	ldw	r4,-84(fp)
   10628:	1104b03a 	or	r2,r2,r4
   1062c:	e0bfeb15 	stw	r2,-84(fp)
   10630:	e0bfe817 	ldw	r2,-96(fp)
   10634:	1004917a 	slli	r2,r2,5
   10638:	1805883a 	mov	r2,r3
   1063c:	e0bfec15 	stw	r2,-80(fp)
   10640:	e03fed15 	stw	zero,-76(fp)
   10644:	e13fec17 	ldw	r4,-80(fp)
   10648:	2004d6fa 	srli	r2,r4,27
   1064c:	e13fed17 	ldw	r4,-76(fp)
   10650:	2008917a 	slli	r4,r4,5
   10654:	e13fef15 	stw	r4,-68(fp)
   10658:	e13fef17 	ldw	r4,-68(fp)
   1065c:	1104b03a 	or	r2,r2,r4
   10660:	e0bfef15 	stw	r2,-68(fp)
   10664:	e0bfec17 	ldw	r2,-80(fp)
   10668:	1004917a 	slli	r2,r2,5
   1066c:	1805883a 	mov	r2,r3
   10670:	1085883a 	add	r2,r2,r2
   10674:	1085883a 	add	r2,r2,r2
   10678:	108000c4 	addi	r2,r2,3
   1067c:	108000c4 	addi	r2,r2,3
   10680:	1004d0ba 	srli	r2,r2,2
   10684:	1085883a 	add	r2,r2,r2
   10688:	1085883a 	add	r2,r2,r2
   1068c:	d8b7c83a 	sub	sp,sp,r2
   10690:	d805883a 	mov	r2,sp
   10694:	108000c4 	addi	r2,r2,3
   10698:	1004d0ba 	srli	r2,r2,2
   1069c:	1085883a 	add	r2,r2,r2
   106a0:	1085883a 	add	r2,r2,r2
   106a4:	e0bfdd15 	stw	r2,-140(fp)
    alt_32 y_read [TAPS];
   106a8:	d0a00017 	ldw	r2,-32768(gp)
   106ac:	10ffffc4 	addi	r3,r2,-1
   106b0:	e0ffde15 	stw	r3,-136(fp)
   106b4:	1007883a 	mov	r3,r2
   106b8:	e0fff015 	stw	r3,-64(fp)
   106bc:	e03ff115 	stw	zero,-60(fp)
   106c0:	e13ff017 	ldw	r4,-64(fp)
   106c4:	2006d6fa 	srli	r3,r4,27
   106c8:	e13ff117 	ldw	r4,-60(fp)
   106cc:	202e917a 	slli	r23,r4,5
   106d0:	1deeb03a 	or	r23,r3,r23
   106d4:	e0fff017 	ldw	r3,-64(fp)
   106d8:	182c917a 	slli	r22,r3,5
   106dc:	1007883a 	mov	r3,r2
   106e0:	e0fff215 	stw	r3,-56(fp)
   106e4:	e03ff315 	stw	zero,-52(fp)
   106e8:	e13ff217 	ldw	r4,-56(fp)
   106ec:	2006d6fa 	srli	r3,r4,27
   106f0:	e13ff317 	ldw	r4,-52(fp)
   106f4:	202a917a 	slli	r21,r4,5
   106f8:	1d6ab03a 	or	r21,r3,r21
   106fc:	e0fff217 	ldw	r3,-56(fp)
   10700:	1828917a 	slli	r20,r3,5
   10704:	1085883a 	add	r2,r2,r2
   10708:	1085883a 	add	r2,r2,r2
   1070c:	108000c4 	addi	r2,r2,3
   10710:	108000c4 	addi	r2,r2,3
   10714:	1004d0ba 	srli	r2,r2,2
   10718:	1085883a 	add	r2,r2,r2
   1071c:	1085883a 	add	r2,r2,r2
   10720:	d8b7c83a 	sub	sp,sp,r2
   10724:	d805883a 	mov	r2,sp
   10728:	108000c4 	addi	r2,r2,3
   1072c:	1004d0ba 	srli	r2,r2,2
   10730:	1085883a 	add	r2,r2,r2
   10734:	1085883a 	add	r2,r2,r2
   10738:	e0bfdf15 	stw	r2,-132(fp)
    alt_32 coeff[TAPS];
   1073c:	d0a00017 	ldw	r2,-32768(gp)
   10740:	10ffffc4 	addi	r3,r2,-1
   10744:	e0ffe015 	stw	r3,-128(fp)
   10748:	1007883a 	mov	r3,r2
   1074c:	e0fff415 	stw	r3,-48(fp)
   10750:	e03ff515 	stw	zero,-44(fp)
   10754:	e13ff417 	ldw	r4,-48(fp)
   10758:	2006d6fa 	srli	r3,r4,27
   1075c:	e13ff517 	ldw	r4,-44(fp)
   10760:	2026917a 	slli	r19,r4,5
   10764:	1ce6b03a 	or	r19,r3,r19
   10768:	e0fff417 	ldw	r3,-48(fp)
   1076c:	1824917a 	slli	r18,r3,5
   10770:	1007883a 	mov	r3,r2
   10774:	e0fff615 	stw	r3,-40(fp)
   10778:	e03ff715 	stw	zero,-36(fp)
   1077c:	e13ff617 	ldw	r4,-40(fp)
   10780:	2006d6fa 	srli	r3,r4,27
   10784:	e13ff717 	ldw	r4,-36(fp)
   10788:	2022917a 	slli	r17,r4,5
   1078c:	1c62b03a 	or	r17,r3,r17
   10790:	e0fff617 	ldw	r3,-40(fp)
   10794:	1820917a 	slli	r16,r3,5
   10798:	1085883a 	add	r2,r2,r2
   1079c:	1085883a 	add	r2,r2,r2
   107a0:	108000c4 	addi	r2,r2,3
   107a4:	108000c4 	addi	r2,r2,3
   107a8:	1004d0ba 	srli	r2,r2,2
   107ac:	1085883a 	add	r2,r2,r2
   107b0:	1085883a 	add	r2,r2,r2
   107b4:	d8b7c83a 	sub	sp,sp,r2
   107b8:	d805883a 	mov	r2,sp
   107bc:	108000c4 	addi	r2,r2,3
   107c0:	1004d0ba 	srli	r2,r2,2
   107c4:	1085883a 	add	r2,r2,r2
   107c8:	1085883a 	add	r2,r2,r2
   107cc:	e0bfe115 	stw	r2,-124(fp)
    alt_32 val;
    alt_32 direction=0;
   107d0:	e03fd915 	stw	zero,-156(fp)
    alt_32 drive=0;
   107d4:	e03fda15 	stw	zero,-152(fp)
    int switch_datain;

    for(int i = 0; i < TAPS; i++){
   107d8:	e03fdb15 	stw	zero,-148(fp)
   107dc:	00001606 	br	10838 <main+0x288>
    	x_read[i] = 0;
   107e0:	e0ffdd17 	ldw	r3,-140(fp)
   107e4:	e0bfdb17 	ldw	r2,-148(fp)
   107e8:	1085883a 	add	r2,r2,r2
   107ec:	1085883a 	add	r2,r2,r2
   107f0:	1885883a 	add	r2,r3,r2
   107f4:	10000015 	stw	zero,0(r2)
    	y_read[i] = 0;
   107f8:	e0ffdf17 	ldw	r3,-132(fp)
   107fc:	e0bfdb17 	ldw	r2,-148(fp)
   10800:	1085883a 	add	r2,r2,r2
   10804:	1085883a 	add	r2,r2,r2
   10808:	1885883a 	add	r2,r3,r2
   1080c:	10000015 	stw	zero,0(r2)
    	coeff[i] = 1;
   10810:	e0ffe117 	ldw	r3,-124(fp)
   10814:	e0bfdb17 	ldw	r2,-148(fp)
   10818:	1085883a 	add	r2,r2,r2
   1081c:	1085883a 	add	r2,r2,r2
   10820:	1885883a 	add	r2,r3,r2
   10824:	00c00044 	movi	r3,1
   10828:	10c00015 	stw	r3,0(r2)
    alt_32 val;
    alt_32 direction=0;
    alt_32 drive=0;
    int switch_datain;

    for(int i = 0; i < TAPS; i++){
   1082c:	e0bfdb17 	ldw	r2,-148(fp)
   10830:	10800044 	addi	r2,r2,1
   10834:	e0bfdb15 	stw	r2,-148(fp)
   10838:	d0a00017 	ldw	r2,-32768(gp)
   1083c:	e0ffdb17 	ldw	r3,-148(fp)
   10840:	18bfe716 	blt	r3,r2,107e0 <_gp+0xffff04d4>
    	coeff[i] = 1;
    }


    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10844:	01000074 	movhi	r4,1
   10848:	2119f404 	addi	r4,r4,26576
   1084c:	00152100 	call	15210 <alt_up_accelerometer_spi_open_dev>
   10850:	e0bfe215 	stw	r2,-120(fp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10854:	e0bfe217 	ldw	r2,-120(fp)
   10858:	1000031e 	bne	r2,zero,10868 <main+0x2b8>
        return 1;
   1085c:	00800044 	movi	r2,1
   10860:	e6ffe717 	ldw	sp,-100(fp)
   10864:	00007106 	br	10a2c <main+0x47c>
    }

    timer_init(sys_timer_isr);
   10868:	01000074 	movhi	r4,1
   1086c:	2100cb04 	addi	r4,r4,812
   10870:	00103fc0 	call	103fc <timer_init>
    while (1) {

    	//Gets the data from the pb, recall that a 0 means the button is pressed
    	switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10874:	008000b4 	movhi	r2,2
   10878:	10840804 	addi	r2,r2,4128
   1087c:	10800037 	ldwio	r2,0(r2)
   10880:	0084303a 	nor	r2,zero,r2
   10884:	e0bfe315 	stw	r2,-116(fp)
    	//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
    	switch_datain &= (0b0000000011);
   10888:	e0bfe317 	ldw	r2,-116(fp)
   1088c:	108000cc 	andi	r2,r2,3
   10890:	e0bfe315 	stw	r2,-116(fp)

    	if (i == TAPS){
   10894:	d0a00017 	ldw	r2,-32768(gp)
   10898:	e0ffd817 	ldw	r3,-160(fp)
   1089c:	1880011e 	bne	r3,r2,108a4 <main+0x2f4>
    		i = 0;
   108a0:	e03fd815 	stw	zero,-160(fp)
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & val);
   108a4:	e0bfe604 	addi	r2,fp,-104
   108a8:	100b883a 	mov	r5,r2
   108ac:	e13fe217 	ldw	r4,-120(fp)
   108b0:	001535c0 	call	1535c <alt_up_accelerometer_spi_read_x_axis>
        alt_32 avg_x = applyFilter(val, x_read, coeff);
   108b4:	e0bfe617 	ldw	r2,-104(fp)
   108b8:	e0ffdd17 	ldw	r3,-140(fp)
   108bc:	e13fe117 	ldw	r4,-124(fp)
   108c0:	200d883a 	mov	r6,r4
   108c4:	180b883a 	mov	r5,r3
   108c8:	1009883a 	mov	r4,r2
   108cc:	001048c0 	call	1048c <applyFilter>
   108d0:	e0bfe415 	stw	r2,-112(fp)
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & val);
   108d4:	e0bfe604 	addi	r2,fp,-104
   108d8:	100b883a 	mov	r5,r2
   108dc:	e13fe217 	ldw	r4,-120(fp)
   108e0:	00154280 	call	15428 <alt_up_accelerometer_spi_read_y_axis>
        alt_32 avg_y = applyFilter(val, y_read, coeff);
   108e4:	e0bfe617 	ldw	r2,-104(fp)
   108e8:	e0ffdf17 	ldw	r3,-132(fp)
   108ec:	e13fe117 	ldw	r4,-124(fp)
   108f0:	200d883a 	mov	r6,r4
   108f4:	180b883a 	mov	r5,r3
   108f8:	1009883a 	mov	r4,r2
   108fc:	001048c0 	call	1048c <applyFilter>
   10900:	e0bfe515 	stw	r2,-108(fp)

        if(avg_x < -41){
   10904:	e0bfe417 	ldw	r2,-112(fp)
   10908:	10bff5c8 	cmpgei	r2,r2,-41
   1090c:	1000031e 	bne	r2,zero,1091c <main+0x36c>
        	direction = -1;
   10910:	00bfffc4 	movi	r2,-1
   10914:	e0bfd915 	stw	r2,-156(fp)
   10918:	00000706 	br	10938 <main+0x388>
        }
        else if(avg_x > 41){
   1091c:	e0bfe417 	ldw	r2,-112(fp)
   10920:	10800a90 	cmplti	r2,r2,42
   10924:	1000031e 	bne	r2,zero,10934 <main+0x384>
        	direction = 1;
   10928:	00800044 	movi	r2,1
   1092c:	e0bfd915 	stw	r2,-156(fp)
   10930:	00000106 	br	10938 <main+0x388>
        }
        else{
        	direction = 0;
   10934:	e03fd915 	stw	zero,-156(fp)
        }

        if(avg_y < -60){
   10938:	e0bfe517 	ldw	r2,-108(fp)
   1093c:	10bff108 	cmpgei	r2,r2,-60
   10940:	1000031e 	bne	r2,zero,10950 <main+0x3a0>
        	drive = 1;
   10944:	00800044 	movi	r2,1
   10948:	e0bfda15 	stw	r2,-152(fp)
   1094c:	00000706 	br	1096c <main+0x3bc>
        }
        else if(avg_y > 60){
   10950:	e0bfe517 	ldw	r2,-108(fp)
   10954:	10800f50 	cmplti	r2,r2,61
   10958:	1000031e 	bne	r2,zero,10968 <main+0x3b8>
        	drive = -1;
   1095c:	00bfffc4 	movi	r2,-1
   10960:	e0bfda15 	stw	r2,-152(fp)
   10964:	00000106 	br	1096c <main+0x3bc>
        }
        else{
        	drive = 0;
   10968:	e03fda15 	stw	zero,-152(fp)
        }

        if(switch_datain == 0b01){
   1096c:	e0bfe317 	ldw	r2,-116(fp)
   10970:	10800058 	cmpnei	r2,r2,1
   10974:	1000041e 	bne	r2,zero,10988 <main+0x3d8>
        	alt_printf("Button 0");
   10978:	01000074 	movhi	r4,1
   1097c:	2119fa04 	addi	r4,r4,26600
   10980:	0013fd00 	call	13fd0 <alt_printf>
   10984:	00001106 	br	109cc <main+0x41c>
        }
        else if(switch_datain == 0b10){
   10988:	e0bfe317 	ldw	r2,-116(fp)
   1098c:	10800098 	cmpnei	r2,r2,2
   10990:	1000041e 	bne	r2,zero,109a4 <main+0x3f4>
        	alt_printf("Button 1");
   10994:	01000074 	movhi	r4,1
   10998:	2119fd04 	addi	r4,r4,26612
   1099c:	0013fd00 	call	13fd0 <alt_printf>
   109a0:	00000a06 	br	109cc <main+0x41c>
        }
        else if(switch_datain == 0b11){
   109a4:	e0bfe317 	ldw	r2,-116(fp)
   109a8:	108000d8 	cmpnei	r2,r2,3
   109ac:	1000041e 	bne	r2,zero,109c0 <main+0x410>
        	alt_printf("Button 0 & 1");
   109b0:	01000074 	movhi	r4,1
   109b4:	211a0004 	addi	r4,r4,26624
   109b8:	0013fd00 	call	13fd0 <alt_printf>
   109bc:	00000306 	br	109cc <main+0x41c>
        }
        else{
        	alt_printf("No Button");
   109c0:	01000074 	movhi	r4,1
   109c4:	211a0404 	addi	r4,r4,26640
   109c8:	0013fd00 	call	13fd0 <alt_printf>
        }

        alt_printf("direction: %x ", direction);
   109cc:	e17fd917 	ldw	r5,-156(fp)
   109d0:	01000074 	movhi	r4,1
   109d4:	211a0704 	addi	r4,r4,26652
   109d8:	0013fd00 	call	13fd0 <alt_printf>
        alt_printf("drive: %x" , drive);
   109dc:	e17fda17 	ldw	r5,-152(fp)
   109e0:	01000074 	movhi	r4,1
   109e4:	211a0b04 	addi	r4,r4,26668
   109e8:	0013fd00 	call	13fd0 <alt_printf>
        alt_printf("x-axis reading: %x ", avg_x);
   109ec:	e17fe417 	ldw	r5,-112(fp)
   109f0:	01000074 	movhi	r4,1
   109f4:	211a0e04 	addi	r4,r4,26680
   109f8:	0013fd00 	call	13fd0 <alt_printf>
        alt_printf("y-axis reading: %x\n", avg_y);
   109fc:	e17fe517 	ldw	r5,-108(fp)
   10a00:	01000074 	movhi	r4,1
   10a04:	211a1304 	addi	r4,r4,26700
   10a08:	0013fd00 	call	13fd0 <alt_printf>
        convert_read(avg_x, & level, & led);
   10a0c:	d1a6b704 	addi	r6,gp,-25892
   10a10:	d166b804 	addi	r5,gp,-25888
   10a14:	e13fe417 	ldw	r4,-112(fp)
   10a18:	00102a80 	call	102a8 <convert_read>
        i++;
   10a1c:	e0bfd817 	ldw	r2,-160(fp)
   10a20:	10800044 	addi	r2,r2,1
   10a24:	e0bfd815 	stw	r2,-160(fp)
    }
   10a28:	003f9206 	br	10874 <_gp+0xffff0568>

    return 0;
}
   10a2c:	e6fff804 	addi	sp,fp,-32
   10a30:	dfc00917 	ldw	ra,36(sp)
   10a34:	df000817 	ldw	fp,32(sp)
   10a38:	ddc00717 	ldw	r23,28(sp)
   10a3c:	dd800617 	ldw	r22,24(sp)
   10a40:	dd400517 	ldw	r21,20(sp)
   10a44:	dd000417 	ldw	r20,16(sp)
   10a48:	dcc00317 	ldw	r19,12(sp)
   10a4c:	dc800217 	ldw	r18,8(sp)
   10a50:	dc400117 	ldw	r17,4(sp)
   10a54:	dc000017 	ldw	r16,0(sp)
   10a58:	dec00a04 	addi	sp,sp,40
   10a5c:	f800283a 	ret

00010a60 <__mulsi3>:
   10a60:	0005883a 	mov	r2,zero
   10a64:	20000726 	beq	r4,zero,10a84 <__mulsi3+0x24>
   10a68:	20c0004c 	andi	r3,r4,1
   10a6c:	2008d07a 	srli	r4,r4,1
   10a70:	18000126 	beq	r3,zero,10a78 <__mulsi3+0x18>
   10a74:	1145883a 	add	r2,r2,r5
   10a78:	294b883a 	add	r5,r5,r5
   10a7c:	203ffa1e 	bne	r4,zero,10a68 <_gp+0xffff075c>
   10a80:	f800283a 	ret
   10a84:	f800283a 	ret

00010a88 <_puts_r>:
   10a88:	defff604 	addi	sp,sp,-40
   10a8c:	dc000715 	stw	r16,28(sp)
   10a90:	2021883a 	mov	r16,r4
   10a94:	2809883a 	mov	r4,r5
   10a98:	dc400815 	stw	r17,32(sp)
   10a9c:	dfc00915 	stw	ra,36(sp)
   10aa0:	2823883a 	mov	r17,r5
   10aa4:	0010b5c0 	call	10b5c <strlen>
   10aa8:	10c00044 	addi	r3,r2,1
   10aac:	d8800115 	stw	r2,4(sp)
   10ab0:	00800074 	movhi	r2,1
   10ab4:	109a1804 	addi	r2,r2,26720
   10ab8:	d8800215 	stw	r2,8(sp)
   10abc:	00800044 	movi	r2,1
   10ac0:	d8800315 	stw	r2,12(sp)
   10ac4:	00800084 	movi	r2,2
   10ac8:	dc400015 	stw	r17,0(sp)
   10acc:	d8c00615 	stw	r3,24(sp)
   10ad0:	dec00415 	stw	sp,16(sp)
   10ad4:	d8800515 	stw	r2,20(sp)
   10ad8:	80000226 	beq	r16,zero,10ae4 <_puts_r+0x5c>
   10adc:	80800e17 	ldw	r2,56(r16)
   10ae0:	10001426 	beq	r2,zero,10b34 <_puts_r+0xac>
   10ae4:	81400217 	ldw	r5,8(r16)
   10ae8:	2880030b 	ldhu	r2,12(r5)
   10aec:	10c8000c 	andi	r3,r2,8192
   10af0:	1800061e 	bne	r3,zero,10b0c <_puts_r+0x84>
   10af4:	29001917 	ldw	r4,100(r5)
   10af8:	00f7ffc4 	movi	r3,-8193
   10afc:	10880014 	ori	r2,r2,8192
   10b00:	20c6703a 	and	r3,r4,r3
   10b04:	2880030d 	sth	r2,12(r5)
   10b08:	28c01915 	stw	r3,100(r5)
   10b0c:	d9800404 	addi	r6,sp,16
   10b10:	8009883a 	mov	r4,r16
   10b14:	0010fa40 	call	10fa4 <__sfvwrite_r>
   10b18:	1000091e 	bne	r2,zero,10b40 <_puts_r+0xb8>
   10b1c:	00800284 	movi	r2,10
   10b20:	dfc00917 	ldw	ra,36(sp)
   10b24:	dc400817 	ldw	r17,32(sp)
   10b28:	dc000717 	ldw	r16,28(sp)
   10b2c:	dec00a04 	addi	sp,sp,40
   10b30:	f800283a 	ret
   10b34:	8009883a 	mov	r4,r16
   10b38:	0010f540 	call	10f54 <__sinit>
   10b3c:	003fe906 	br	10ae4 <_gp+0xffff07d8>
   10b40:	00bfffc4 	movi	r2,-1
   10b44:	003ff606 	br	10b20 <_gp+0xffff0814>

00010b48 <puts>:
   10b48:	008000b4 	movhi	r2,2
   10b4c:	10a0c504 	addi	r2,r2,-31980
   10b50:	200b883a 	mov	r5,r4
   10b54:	11000017 	ldw	r4,0(r2)
   10b58:	0010a881 	jmpi	10a88 <_puts_r>

00010b5c <strlen>:
   10b5c:	208000cc 	andi	r2,r4,3
   10b60:	10002026 	beq	r2,zero,10be4 <strlen+0x88>
   10b64:	20800007 	ldb	r2,0(r4)
   10b68:	10002026 	beq	r2,zero,10bec <strlen+0x90>
   10b6c:	2005883a 	mov	r2,r4
   10b70:	00000206 	br	10b7c <strlen+0x20>
   10b74:	10c00007 	ldb	r3,0(r2)
   10b78:	18001826 	beq	r3,zero,10bdc <strlen+0x80>
   10b7c:	10800044 	addi	r2,r2,1
   10b80:	10c000cc 	andi	r3,r2,3
   10b84:	183ffb1e 	bne	r3,zero,10b74 <_gp+0xffff0868>
   10b88:	10c00017 	ldw	r3,0(r2)
   10b8c:	01ffbff4 	movhi	r7,65279
   10b90:	39ffbfc4 	addi	r7,r7,-257
   10b94:	00ca303a 	nor	r5,zero,r3
   10b98:	01a02074 	movhi	r6,32897
   10b9c:	19c7883a 	add	r3,r3,r7
   10ba0:	31a02004 	addi	r6,r6,-32640
   10ba4:	1946703a 	and	r3,r3,r5
   10ba8:	1986703a 	and	r3,r3,r6
   10bac:	1800091e 	bne	r3,zero,10bd4 <strlen+0x78>
   10bb0:	10800104 	addi	r2,r2,4
   10bb4:	10c00017 	ldw	r3,0(r2)
   10bb8:	19cb883a 	add	r5,r3,r7
   10bbc:	00c6303a 	nor	r3,zero,r3
   10bc0:	28c6703a 	and	r3,r5,r3
   10bc4:	1986703a 	and	r3,r3,r6
   10bc8:	183ff926 	beq	r3,zero,10bb0 <_gp+0xffff08a4>
   10bcc:	00000106 	br	10bd4 <strlen+0x78>
   10bd0:	10800044 	addi	r2,r2,1
   10bd4:	10c00007 	ldb	r3,0(r2)
   10bd8:	183ffd1e 	bne	r3,zero,10bd0 <_gp+0xffff08c4>
   10bdc:	1105c83a 	sub	r2,r2,r4
   10be0:	f800283a 	ret
   10be4:	2005883a 	mov	r2,r4
   10be8:	003fe706 	br	10b88 <_gp+0xffff087c>
   10bec:	0005883a 	mov	r2,zero
   10bf0:	f800283a 	ret

00010bf4 <__fp_unlock>:
   10bf4:	0005883a 	mov	r2,zero
   10bf8:	f800283a 	ret

00010bfc <_cleanup_r>:
   10bfc:	01400074 	movhi	r5,1
   10c00:	294aeb04 	addi	r5,r5,11180
   10c04:	00115301 	jmpi	11530 <_fwalk_reent>

00010c08 <__sinit.part.1>:
   10c08:	defff704 	addi	sp,sp,-36
   10c0c:	00c00074 	movhi	r3,1
   10c10:	dfc00815 	stw	ra,32(sp)
   10c14:	ddc00715 	stw	r23,28(sp)
   10c18:	dd800615 	stw	r22,24(sp)
   10c1c:	dd400515 	stw	r21,20(sp)
   10c20:	dd000415 	stw	r20,16(sp)
   10c24:	dcc00315 	stw	r19,12(sp)
   10c28:	dc800215 	stw	r18,8(sp)
   10c2c:	dc400115 	stw	r17,4(sp)
   10c30:	dc000015 	stw	r16,0(sp)
   10c34:	18c2ff04 	addi	r3,r3,3068
   10c38:	24000117 	ldw	r16,4(r4)
   10c3c:	20c00f15 	stw	r3,60(r4)
   10c40:	2080bb04 	addi	r2,r4,748
   10c44:	00c000c4 	movi	r3,3
   10c48:	20c0b915 	stw	r3,740(r4)
   10c4c:	2080ba15 	stw	r2,744(r4)
   10c50:	2000b815 	stw	zero,736(r4)
   10c54:	05c00204 	movi	r23,8
   10c58:	00800104 	movi	r2,4
   10c5c:	2025883a 	mov	r18,r4
   10c60:	b80d883a 	mov	r6,r23
   10c64:	81001704 	addi	r4,r16,92
   10c68:	000b883a 	mov	r5,zero
   10c6c:	80000015 	stw	zero,0(r16)
   10c70:	80000115 	stw	zero,4(r16)
   10c74:	80000215 	stw	zero,8(r16)
   10c78:	8080030d 	sth	r2,12(r16)
   10c7c:	80001915 	stw	zero,100(r16)
   10c80:	8000038d 	sth	zero,14(r16)
   10c84:	80000415 	stw	zero,16(r16)
   10c88:	80000515 	stw	zero,20(r16)
   10c8c:	80000615 	stw	zero,24(r16)
   10c90:	00121880 	call	12188 <memset>
   10c94:	05800074 	movhi	r22,1
   10c98:	94400217 	ldw	r17,8(r18)
   10c9c:	05400074 	movhi	r21,1
   10ca0:	05000074 	movhi	r20,1
   10ca4:	04c00074 	movhi	r19,1
   10ca8:	b58a1a04 	addi	r22,r22,10344
   10cac:	ad4a3104 	addi	r21,r21,10436
   10cb0:	a50a5004 	addi	r20,r20,10560
   10cb4:	9cca6704 	addi	r19,r19,10652
   10cb8:	85800815 	stw	r22,32(r16)
   10cbc:	85400915 	stw	r21,36(r16)
   10cc0:	85000a15 	stw	r20,40(r16)
   10cc4:	84c00b15 	stw	r19,44(r16)
   10cc8:	84000715 	stw	r16,28(r16)
   10ccc:	00800284 	movi	r2,10
   10cd0:	8880030d 	sth	r2,12(r17)
   10cd4:	00800044 	movi	r2,1
   10cd8:	b80d883a 	mov	r6,r23
   10cdc:	89001704 	addi	r4,r17,92
   10ce0:	000b883a 	mov	r5,zero
   10ce4:	88000015 	stw	zero,0(r17)
   10ce8:	88000115 	stw	zero,4(r17)
   10cec:	88000215 	stw	zero,8(r17)
   10cf0:	88001915 	stw	zero,100(r17)
   10cf4:	8880038d 	sth	r2,14(r17)
   10cf8:	88000415 	stw	zero,16(r17)
   10cfc:	88000515 	stw	zero,20(r17)
   10d00:	88000615 	stw	zero,24(r17)
   10d04:	00121880 	call	12188 <memset>
   10d08:	94000317 	ldw	r16,12(r18)
   10d0c:	00800484 	movi	r2,18
   10d10:	8c400715 	stw	r17,28(r17)
   10d14:	8d800815 	stw	r22,32(r17)
   10d18:	8d400915 	stw	r21,36(r17)
   10d1c:	8d000a15 	stw	r20,40(r17)
   10d20:	8cc00b15 	stw	r19,44(r17)
   10d24:	8080030d 	sth	r2,12(r16)
   10d28:	00800084 	movi	r2,2
   10d2c:	80000015 	stw	zero,0(r16)
   10d30:	80000115 	stw	zero,4(r16)
   10d34:	80000215 	stw	zero,8(r16)
   10d38:	80001915 	stw	zero,100(r16)
   10d3c:	8080038d 	sth	r2,14(r16)
   10d40:	80000415 	stw	zero,16(r16)
   10d44:	80000515 	stw	zero,20(r16)
   10d48:	80000615 	stw	zero,24(r16)
   10d4c:	b80d883a 	mov	r6,r23
   10d50:	000b883a 	mov	r5,zero
   10d54:	81001704 	addi	r4,r16,92
   10d58:	00121880 	call	12188 <memset>
   10d5c:	00800044 	movi	r2,1
   10d60:	84000715 	stw	r16,28(r16)
   10d64:	85800815 	stw	r22,32(r16)
   10d68:	85400915 	stw	r21,36(r16)
   10d6c:	85000a15 	stw	r20,40(r16)
   10d70:	84c00b15 	stw	r19,44(r16)
   10d74:	90800e15 	stw	r2,56(r18)
   10d78:	dfc00817 	ldw	ra,32(sp)
   10d7c:	ddc00717 	ldw	r23,28(sp)
   10d80:	dd800617 	ldw	r22,24(sp)
   10d84:	dd400517 	ldw	r21,20(sp)
   10d88:	dd000417 	ldw	r20,16(sp)
   10d8c:	dcc00317 	ldw	r19,12(sp)
   10d90:	dc800217 	ldw	r18,8(sp)
   10d94:	dc400117 	ldw	r17,4(sp)
   10d98:	dc000017 	ldw	r16,0(sp)
   10d9c:	dec00904 	addi	sp,sp,36
   10da0:	f800283a 	ret

00010da4 <__fp_lock>:
   10da4:	0005883a 	mov	r2,zero
   10da8:	f800283a 	ret

00010dac <__sfmoreglue>:
   10dac:	defffc04 	addi	sp,sp,-16
   10db0:	dc800215 	stw	r18,8(sp)
   10db4:	2825883a 	mov	r18,r5
   10db8:	dc000015 	stw	r16,0(sp)
   10dbc:	01401a04 	movi	r5,104
   10dc0:	2021883a 	mov	r16,r4
   10dc4:	913fffc4 	addi	r4,r18,-1
   10dc8:	dfc00315 	stw	ra,12(sp)
   10dcc:	dc400115 	stw	r17,4(sp)
   10dd0:	0010a600 	call	10a60 <__mulsi3>
   10dd4:	8009883a 	mov	r4,r16
   10dd8:	11401d04 	addi	r5,r2,116
   10ddc:	1023883a 	mov	r17,r2
   10de0:	00115f40 	call	115f4 <_malloc_r>
   10de4:	1021883a 	mov	r16,r2
   10de8:	10000726 	beq	r2,zero,10e08 <__sfmoreglue+0x5c>
   10dec:	11000304 	addi	r4,r2,12
   10df0:	10000015 	stw	zero,0(r2)
   10df4:	14800115 	stw	r18,4(r2)
   10df8:	11000215 	stw	r4,8(r2)
   10dfc:	89801a04 	addi	r6,r17,104
   10e00:	000b883a 	mov	r5,zero
   10e04:	00121880 	call	12188 <memset>
   10e08:	8005883a 	mov	r2,r16
   10e0c:	dfc00317 	ldw	ra,12(sp)
   10e10:	dc800217 	ldw	r18,8(sp)
   10e14:	dc400117 	ldw	r17,4(sp)
   10e18:	dc000017 	ldw	r16,0(sp)
   10e1c:	dec00404 	addi	sp,sp,16
   10e20:	f800283a 	ret

00010e24 <__sfp>:
   10e24:	defffb04 	addi	sp,sp,-20
   10e28:	dc000015 	stw	r16,0(sp)
   10e2c:	040000b4 	movhi	r16,2
   10e30:	8420c404 	addi	r16,r16,-31984
   10e34:	dcc00315 	stw	r19,12(sp)
   10e38:	2027883a 	mov	r19,r4
   10e3c:	81000017 	ldw	r4,0(r16)
   10e40:	dfc00415 	stw	ra,16(sp)
   10e44:	dc800215 	stw	r18,8(sp)
   10e48:	20800e17 	ldw	r2,56(r4)
   10e4c:	dc400115 	stw	r17,4(sp)
   10e50:	1000021e 	bne	r2,zero,10e5c <__sfp+0x38>
   10e54:	0010c080 	call	10c08 <__sinit.part.1>
   10e58:	81000017 	ldw	r4,0(r16)
   10e5c:	2480b804 	addi	r18,r4,736
   10e60:	047fffc4 	movi	r17,-1
   10e64:	91000117 	ldw	r4,4(r18)
   10e68:	94000217 	ldw	r16,8(r18)
   10e6c:	213fffc4 	addi	r4,r4,-1
   10e70:	20000a16 	blt	r4,zero,10e9c <__sfp+0x78>
   10e74:	8080030f 	ldh	r2,12(r16)
   10e78:	10000c26 	beq	r2,zero,10eac <__sfp+0x88>
   10e7c:	80c01d04 	addi	r3,r16,116
   10e80:	00000206 	br	10e8c <__sfp+0x68>
   10e84:	18bfe60f 	ldh	r2,-104(r3)
   10e88:	10000826 	beq	r2,zero,10eac <__sfp+0x88>
   10e8c:	213fffc4 	addi	r4,r4,-1
   10e90:	1c3ffd04 	addi	r16,r3,-12
   10e94:	18c01a04 	addi	r3,r3,104
   10e98:	247ffa1e 	bne	r4,r17,10e84 <_gp+0xffff0b78>
   10e9c:	90800017 	ldw	r2,0(r18)
   10ea0:	10001d26 	beq	r2,zero,10f18 <__sfp+0xf4>
   10ea4:	1025883a 	mov	r18,r2
   10ea8:	003fee06 	br	10e64 <_gp+0xffff0b58>
   10eac:	00bfffc4 	movi	r2,-1
   10eb0:	8080038d 	sth	r2,14(r16)
   10eb4:	00800044 	movi	r2,1
   10eb8:	8080030d 	sth	r2,12(r16)
   10ebc:	80001915 	stw	zero,100(r16)
   10ec0:	80000015 	stw	zero,0(r16)
   10ec4:	80000215 	stw	zero,8(r16)
   10ec8:	80000115 	stw	zero,4(r16)
   10ecc:	80000415 	stw	zero,16(r16)
   10ed0:	80000515 	stw	zero,20(r16)
   10ed4:	80000615 	stw	zero,24(r16)
   10ed8:	01800204 	movi	r6,8
   10edc:	000b883a 	mov	r5,zero
   10ee0:	81001704 	addi	r4,r16,92
   10ee4:	00121880 	call	12188 <memset>
   10ee8:	8005883a 	mov	r2,r16
   10eec:	80000c15 	stw	zero,48(r16)
   10ef0:	80000d15 	stw	zero,52(r16)
   10ef4:	80001115 	stw	zero,68(r16)
   10ef8:	80001215 	stw	zero,72(r16)
   10efc:	dfc00417 	ldw	ra,16(sp)
   10f00:	dcc00317 	ldw	r19,12(sp)
   10f04:	dc800217 	ldw	r18,8(sp)
   10f08:	dc400117 	ldw	r17,4(sp)
   10f0c:	dc000017 	ldw	r16,0(sp)
   10f10:	dec00504 	addi	sp,sp,20
   10f14:	f800283a 	ret
   10f18:	01400104 	movi	r5,4
   10f1c:	9809883a 	mov	r4,r19
   10f20:	0010dac0 	call	10dac <__sfmoreglue>
   10f24:	90800015 	stw	r2,0(r18)
   10f28:	103fde1e 	bne	r2,zero,10ea4 <_gp+0xffff0b98>
   10f2c:	00800304 	movi	r2,12
   10f30:	98800015 	stw	r2,0(r19)
   10f34:	0005883a 	mov	r2,zero
   10f38:	003ff006 	br	10efc <_gp+0xffff0bf0>

00010f3c <_cleanup>:
   10f3c:	008000b4 	movhi	r2,2
   10f40:	10a0c404 	addi	r2,r2,-31984
   10f44:	11000017 	ldw	r4,0(r2)
   10f48:	01400074 	movhi	r5,1
   10f4c:	294aeb04 	addi	r5,r5,11180
   10f50:	00115301 	jmpi	11530 <_fwalk_reent>

00010f54 <__sinit>:
   10f54:	20800e17 	ldw	r2,56(r4)
   10f58:	10000126 	beq	r2,zero,10f60 <__sinit+0xc>
   10f5c:	f800283a 	ret
   10f60:	0010c081 	jmpi	10c08 <__sinit.part.1>

00010f64 <__sfp_lock_acquire>:
   10f64:	f800283a 	ret

00010f68 <__sfp_lock_release>:
   10f68:	f800283a 	ret

00010f6c <__sinit_lock_acquire>:
   10f6c:	f800283a 	ret

00010f70 <__sinit_lock_release>:
   10f70:	f800283a 	ret

00010f74 <__fp_lock_all>:
   10f74:	008000b4 	movhi	r2,2
   10f78:	10a0c504 	addi	r2,r2,-31980
   10f7c:	11000017 	ldw	r4,0(r2)
   10f80:	01400074 	movhi	r5,1
   10f84:	29436904 	addi	r5,r5,3492
   10f88:	001146c1 	jmpi	1146c <_fwalk>

00010f8c <__fp_unlock_all>:
   10f8c:	008000b4 	movhi	r2,2
   10f90:	10a0c504 	addi	r2,r2,-31980
   10f94:	11000017 	ldw	r4,0(r2)
   10f98:	01400074 	movhi	r5,1
   10f9c:	2942fd04 	addi	r5,r5,3060
   10fa0:	001146c1 	jmpi	1146c <_fwalk>

00010fa4 <__sfvwrite_r>:
   10fa4:	30800217 	ldw	r2,8(r6)
   10fa8:	10006726 	beq	r2,zero,11148 <__sfvwrite_r+0x1a4>
   10fac:	28c0030b 	ldhu	r3,12(r5)
   10fb0:	defff404 	addi	sp,sp,-48
   10fb4:	dd400715 	stw	r21,28(sp)
   10fb8:	dd000615 	stw	r20,24(sp)
   10fbc:	dc000215 	stw	r16,8(sp)
   10fc0:	dfc00b15 	stw	ra,44(sp)
   10fc4:	df000a15 	stw	fp,40(sp)
   10fc8:	ddc00915 	stw	r23,36(sp)
   10fcc:	dd800815 	stw	r22,32(sp)
   10fd0:	dcc00515 	stw	r19,20(sp)
   10fd4:	dc800415 	stw	r18,16(sp)
   10fd8:	dc400315 	stw	r17,12(sp)
   10fdc:	1880020c 	andi	r2,r3,8
   10fe0:	2821883a 	mov	r16,r5
   10fe4:	202b883a 	mov	r21,r4
   10fe8:	3029883a 	mov	r20,r6
   10fec:	10002726 	beq	r2,zero,1108c <__sfvwrite_r+0xe8>
   10ff0:	28800417 	ldw	r2,16(r5)
   10ff4:	10002526 	beq	r2,zero,1108c <__sfvwrite_r+0xe8>
   10ff8:	1880008c 	andi	r2,r3,2
   10ffc:	a4400017 	ldw	r17,0(r20)
   11000:	10002a26 	beq	r2,zero,110ac <__sfvwrite_r+0x108>
   11004:	05a00034 	movhi	r22,32768
   11008:	0027883a 	mov	r19,zero
   1100c:	0025883a 	mov	r18,zero
   11010:	b5bf0004 	addi	r22,r22,-1024
   11014:	980d883a 	mov	r6,r19
   11018:	a809883a 	mov	r4,r21
   1101c:	90004626 	beq	r18,zero,11138 <__sfvwrite_r+0x194>
   11020:	900f883a 	mov	r7,r18
   11024:	b480022e 	bgeu	r22,r18,11030 <__sfvwrite_r+0x8c>
   11028:	01e00034 	movhi	r7,32768
   1102c:	39ff0004 	addi	r7,r7,-1024
   11030:	80800917 	ldw	r2,36(r16)
   11034:	81400717 	ldw	r5,28(r16)
   11038:	103ee83a 	callr	r2
   1103c:	00805a0e 	bge	zero,r2,111a8 <__sfvwrite_r+0x204>
   11040:	a0c00217 	ldw	r3,8(r20)
   11044:	98a7883a 	add	r19,r19,r2
   11048:	90a5c83a 	sub	r18,r18,r2
   1104c:	1885c83a 	sub	r2,r3,r2
   11050:	a0800215 	stw	r2,8(r20)
   11054:	103fef1e 	bne	r2,zero,11014 <_gp+0xffff0d08>
   11058:	0005883a 	mov	r2,zero
   1105c:	dfc00b17 	ldw	ra,44(sp)
   11060:	df000a17 	ldw	fp,40(sp)
   11064:	ddc00917 	ldw	r23,36(sp)
   11068:	dd800817 	ldw	r22,32(sp)
   1106c:	dd400717 	ldw	r21,28(sp)
   11070:	dd000617 	ldw	r20,24(sp)
   11074:	dcc00517 	ldw	r19,20(sp)
   11078:	dc800417 	ldw	r18,16(sp)
   1107c:	dc400317 	ldw	r17,12(sp)
   11080:	dc000217 	ldw	r16,8(sp)
   11084:	dec00c04 	addi	sp,sp,48
   11088:	f800283a 	ret
   1108c:	800b883a 	mov	r5,r16
   11090:	a809883a 	mov	r4,r21
   11094:	0012a040 	call	12a04 <__swsetup_r>
   11098:	1000ee1e 	bne	r2,zero,11454 <__sfvwrite_r+0x4b0>
   1109c:	80c0030b 	ldhu	r3,12(r16)
   110a0:	a4400017 	ldw	r17,0(r20)
   110a4:	1880008c 	andi	r2,r3,2
   110a8:	103fd61e 	bne	r2,zero,11004 <_gp+0xffff0cf8>
   110ac:	1880004c 	andi	r2,r3,1
   110b0:	1000421e 	bne	r2,zero,111bc <__sfvwrite_r+0x218>
   110b4:	0039883a 	mov	fp,zero
   110b8:	0025883a 	mov	r18,zero
   110bc:	90001a26 	beq	r18,zero,11128 <__sfvwrite_r+0x184>
   110c0:	1880800c 	andi	r2,r3,512
   110c4:	84c00217 	ldw	r19,8(r16)
   110c8:	10002126 	beq	r2,zero,11150 <__sfvwrite_r+0x1ac>
   110cc:	982f883a 	mov	r23,r19
   110d0:	94c09636 	bltu	r18,r19,1132c <__sfvwrite_r+0x388>
   110d4:	1881200c 	andi	r2,r3,1152
   110d8:	1000a11e 	bne	r2,zero,11360 <__sfvwrite_r+0x3bc>
   110dc:	81000017 	ldw	r4,0(r16)
   110e0:	b80d883a 	mov	r6,r23
   110e4:	e00b883a 	mov	r5,fp
   110e8:	001202c0 	call	1202c <memmove>
   110ec:	80c00217 	ldw	r3,8(r16)
   110f0:	81000017 	ldw	r4,0(r16)
   110f4:	9005883a 	mov	r2,r18
   110f8:	1ce7c83a 	sub	r19,r3,r19
   110fc:	25cf883a 	add	r7,r4,r23
   11100:	84c00215 	stw	r19,8(r16)
   11104:	81c00015 	stw	r7,0(r16)
   11108:	a0c00217 	ldw	r3,8(r20)
   1110c:	e0b9883a 	add	fp,fp,r2
   11110:	90a5c83a 	sub	r18,r18,r2
   11114:	18a7c83a 	sub	r19,r3,r2
   11118:	a4c00215 	stw	r19,8(r20)
   1111c:	983fce26 	beq	r19,zero,11058 <_gp+0xffff0d4c>
   11120:	80c0030b 	ldhu	r3,12(r16)
   11124:	903fe61e 	bne	r18,zero,110c0 <_gp+0xffff0db4>
   11128:	8f000017 	ldw	fp,0(r17)
   1112c:	8c800117 	ldw	r18,4(r17)
   11130:	8c400204 	addi	r17,r17,8
   11134:	003fe106 	br	110bc <_gp+0xffff0db0>
   11138:	8cc00017 	ldw	r19,0(r17)
   1113c:	8c800117 	ldw	r18,4(r17)
   11140:	8c400204 	addi	r17,r17,8
   11144:	003fb306 	br	11014 <_gp+0xffff0d08>
   11148:	0005883a 	mov	r2,zero
   1114c:	f800283a 	ret
   11150:	81000017 	ldw	r4,0(r16)
   11154:	80800417 	ldw	r2,16(r16)
   11158:	11005a36 	bltu	r2,r4,112c4 <__sfvwrite_r+0x320>
   1115c:	85c00517 	ldw	r23,20(r16)
   11160:	95c05836 	bltu	r18,r23,112c4 <__sfvwrite_r+0x320>
   11164:	00a00034 	movhi	r2,32768
   11168:	10bfffc4 	addi	r2,r2,-1
   1116c:	9009883a 	mov	r4,r18
   11170:	1480012e 	bgeu	r2,r18,11178 <__sfvwrite_r+0x1d4>
   11174:	1009883a 	mov	r4,r2
   11178:	b80b883a 	mov	r5,r23
   1117c:	00136b80 	call	136b8 <__divsi3>
   11180:	b80b883a 	mov	r5,r23
   11184:	1009883a 	mov	r4,r2
   11188:	0010a600 	call	10a60 <__mulsi3>
   1118c:	81400717 	ldw	r5,28(r16)
   11190:	80c00917 	ldw	r3,36(r16)
   11194:	100f883a 	mov	r7,r2
   11198:	e00d883a 	mov	r6,fp
   1119c:	a809883a 	mov	r4,r21
   111a0:	183ee83a 	callr	r3
   111a4:	00bfd816 	blt	zero,r2,11108 <_gp+0xffff0dfc>
   111a8:	8080030b 	ldhu	r2,12(r16)
   111ac:	10801014 	ori	r2,r2,64
   111b0:	8080030d 	sth	r2,12(r16)
   111b4:	00bfffc4 	movi	r2,-1
   111b8:	003fa806 	br	1105c <_gp+0xffff0d50>
   111bc:	0027883a 	mov	r19,zero
   111c0:	0011883a 	mov	r8,zero
   111c4:	0039883a 	mov	fp,zero
   111c8:	0025883a 	mov	r18,zero
   111cc:	90001f26 	beq	r18,zero,1124c <__sfvwrite_r+0x2a8>
   111d0:	40005a26 	beq	r8,zero,1133c <__sfvwrite_r+0x398>
   111d4:	982d883a 	mov	r22,r19
   111d8:	94c0012e 	bgeu	r18,r19,111e0 <__sfvwrite_r+0x23c>
   111dc:	902d883a 	mov	r22,r18
   111e0:	81000017 	ldw	r4,0(r16)
   111e4:	80800417 	ldw	r2,16(r16)
   111e8:	b02f883a 	mov	r23,r22
   111ec:	81c00517 	ldw	r7,20(r16)
   111f0:	1100032e 	bgeu	r2,r4,11200 <__sfvwrite_r+0x25c>
   111f4:	80c00217 	ldw	r3,8(r16)
   111f8:	38c7883a 	add	r3,r7,r3
   111fc:	1d801816 	blt	r3,r22,11260 <__sfvwrite_r+0x2bc>
   11200:	b1c03e16 	blt	r22,r7,112fc <__sfvwrite_r+0x358>
   11204:	80800917 	ldw	r2,36(r16)
   11208:	81400717 	ldw	r5,28(r16)
   1120c:	e00d883a 	mov	r6,fp
   11210:	da000115 	stw	r8,4(sp)
   11214:	a809883a 	mov	r4,r21
   11218:	103ee83a 	callr	r2
   1121c:	102f883a 	mov	r23,r2
   11220:	da000117 	ldw	r8,4(sp)
   11224:	00bfe00e 	bge	zero,r2,111a8 <_gp+0xffff0e9c>
   11228:	9de7c83a 	sub	r19,r19,r23
   1122c:	98001f26 	beq	r19,zero,112ac <__sfvwrite_r+0x308>
   11230:	a0800217 	ldw	r2,8(r20)
   11234:	e5f9883a 	add	fp,fp,r23
   11238:	95e5c83a 	sub	r18,r18,r23
   1123c:	15efc83a 	sub	r23,r2,r23
   11240:	a5c00215 	stw	r23,8(r20)
   11244:	b83f8426 	beq	r23,zero,11058 <_gp+0xffff0d4c>
   11248:	903fe11e 	bne	r18,zero,111d0 <_gp+0xffff0ec4>
   1124c:	8f000017 	ldw	fp,0(r17)
   11250:	8c800117 	ldw	r18,4(r17)
   11254:	0011883a 	mov	r8,zero
   11258:	8c400204 	addi	r17,r17,8
   1125c:	003fdb06 	br	111cc <_gp+0xffff0ec0>
   11260:	180d883a 	mov	r6,r3
   11264:	e00b883a 	mov	r5,fp
   11268:	da000115 	stw	r8,4(sp)
   1126c:	d8c00015 	stw	r3,0(sp)
   11270:	001202c0 	call	1202c <memmove>
   11274:	d8c00017 	ldw	r3,0(sp)
   11278:	80800017 	ldw	r2,0(r16)
   1127c:	800b883a 	mov	r5,r16
   11280:	a809883a 	mov	r4,r21
   11284:	10c5883a 	add	r2,r2,r3
   11288:	80800015 	stw	r2,0(r16)
   1128c:	d8c00015 	stw	r3,0(sp)
   11290:	0012ecc0 	call	12ecc <_fflush_r>
   11294:	d8c00017 	ldw	r3,0(sp)
   11298:	da000117 	ldw	r8,4(sp)
   1129c:	103fc21e 	bne	r2,zero,111a8 <_gp+0xffff0e9c>
   112a0:	182f883a 	mov	r23,r3
   112a4:	9de7c83a 	sub	r19,r19,r23
   112a8:	983fe11e 	bne	r19,zero,11230 <_gp+0xffff0f24>
   112ac:	800b883a 	mov	r5,r16
   112b0:	a809883a 	mov	r4,r21
   112b4:	0012ecc0 	call	12ecc <_fflush_r>
   112b8:	103fbb1e 	bne	r2,zero,111a8 <_gp+0xffff0e9c>
   112bc:	0011883a 	mov	r8,zero
   112c0:	003fdb06 	br	11230 <_gp+0xffff0f24>
   112c4:	94c0012e 	bgeu	r18,r19,112cc <__sfvwrite_r+0x328>
   112c8:	9027883a 	mov	r19,r18
   112cc:	980d883a 	mov	r6,r19
   112d0:	e00b883a 	mov	r5,fp
   112d4:	001202c0 	call	1202c <memmove>
   112d8:	80800217 	ldw	r2,8(r16)
   112dc:	80c00017 	ldw	r3,0(r16)
   112e0:	14c5c83a 	sub	r2,r2,r19
   112e4:	1cc7883a 	add	r3,r3,r19
   112e8:	80800215 	stw	r2,8(r16)
   112ec:	80c00015 	stw	r3,0(r16)
   112f0:	10004326 	beq	r2,zero,11400 <__sfvwrite_r+0x45c>
   112f4:	9805883a 	mov	r2,r19
   112f8:	003f8306 	br	11108 <_gp+0xffff0dfc>
   112fc:	b00d883a 	mov	r6,r22
   11300:	e00b883a 	mov	r5,fp
   11304:	da000115 	stw	r8,4(sp)
   11308:	001202c0 	call	1202c <memmove>
   1130c:	80800217 	ldw	r2,8(r16)
   11310:	80c00017 	ldw	r3,0(r16)
   11314:	da000117 	ldw	r8,4(sp)
   11318:	1585c83a 	sub	r2,r2,r22
   1131c:	1dad883a 	add	r22,r3,r22
   11320:	80800215 	stw	r2,8(r16)
   11324:	85800015 	stw	r22,0(r16)
   11328:	003fbf06 	br	11228 <_gp+0xffff0f1c>
   1132c:	81000017 	ldw	r4,0(r16)
   11330:	9027883a 	mov	r19,r18
   11334:	902f883a 	mov	r23,r18
   11338:	003f6906 	br	110e0 <_gp+0xffff0dd4>
   1133c:	900d883a 	mov	r6,r18
   11340:	01400284 	movi	r5,10
   11344:	e009883a 	mov	r4,fp
   11348:	0011e000 	call	11e00 <memchr>
   1134c:	10003e26 	beq	r2,zero,11448 <__sfvwrite_r+0x4a4>
   11350:	10800044 	addi	r2,r2,1
   11354:	1727c83a 	sub	r19,r2,fp
   11358:	02000044 	movi	r8,1
   1135c:	003f9d06 	br	111d4 <_gp+0xffff0ec8>
   11360:	80800517 	ldw	r2,20(r16)
   11364:	81400417 	ldw	r5,16(r16)
   11368:	81c00017 	ldw	r7,0(r16)
   1136c:	10a7883a 	add	r19,r2,r2
   11370:	9885883a 	add	r2,r19,r2
   11374:	1026d7fa 	srli	r19,r2,31
   11378:	396dc83a 	sub	r22,r7,r5
   1137c:	b1000044 	addi	r4,r22,1
   11380:	9885883a 	add	r2,r19,r2
   11384:	1027d07a 	srai	r19,r2,1
   11388:	2485883a 	add	r2,r4,r18
   1138c:	980d883a 	mov	r6,r19
   11390:	9880022e 	bgeu	r19,r2,1139c <__sfvwrite_r+0x3f8>
   11394:	1027883a 	mov	r19,r2
   11398:	100d883a 	mov	r6,r2
   1139c:	18c1000c 	andi	r3,r3,1024
   113a0:	18001c26 	beq	r3,zero,11414 <__sfvwrite_r+0x470>
   113a4:	300b883a 	mov	r5,r6
   113a8:	a809883a 	mov	r4,r21
   113ac:	00115f40 	call	115f4 <_malloc_r>
   113b0:	102f883a 	mov	r23,r2
   113b4:	10002926 	beq	r2,zero,1145c <__sfvwrite_r+0x4b8>
   113b8:	81400417 	ldw	r5,16(r16)
   113bc:	b00d883a 	mov	r6,r22
   113c0:	1009883a 	mov	r4,r2
   113c4:	0011ee40 	call	11ee4 <memcpy>
   113c8:	8080030b 	ldhu	r2,12(r16)
   113cc:	00fedfc4 	movi	r3,-1153
   113d0:	10c4703a 	and	r2,r2,r3
   113d4:	10802014 	ori	r2,r2,128
   113d8:	8080030d 	sth	r2,12(r16)
   113dc:	bd89883a 	add	r4,r23,r22
   113e0:	9d8fc83a 	sub	r7,r19,r22
   113e4:	85c00415 	stw	r23,16(r16)
   113e8:	84c00515 	stw	r19,20(r16)
   113ec:	81000015 	stw	r4,0(r16)
   113f0:	9027883a 	mov	r19,r18
   113f4:	81c00215 	stw	r7,8(r16)
   113f8:	902f883a 	mov	r23,r18
   113fc:	003f3806 	br	110e0 <_gp+0xffff0dd4>
   11400:	800b883a 	mov	r5,r16
   11404:	a809883a 	mov	r4,r21
   11408:	0012ecc0 	call	12ecc <_fflush_r>
   1140c:	103fb926 	beq	r2,zero,112f4 <_gp+0xffff0fe8>
   11410:	003f6506 	br	111a8 <_gp+0xffff0e9c>
   11414:	a809883a 	mov	r4,r21
   11418:	00122b00 	call	122b0 <_realloc_r>
   1141c:	102f883a 	mov	r23,r2
   11420:	103fee1e 	bne	r2,zero,113dc <_gp+0xffff10d0>
   11424:	81400417 	ldw	r5,16(r16)
   11428:	a809883a 	mov	r4,r21
   1142c:	001307c0 	call	1307c <_free_r>
   11430:	8080030b 	ldhu	r2,12(r16)
   11434:	00ffdfc4 	movi	r3,-129
   11438:	1884703a 	and	r2,r3,r2
   1143c:	00c00304 	movi	r3,12
   11440:	a8c00015 	stw	r3,0(r21)
   11444:	003f5906 	br	111ac <_gp+0xffff0ea0>
   11448:	94c00044 	addi	r19,r18,1
   1144c:	02000044 	movi	r8,1
   11450:	003f6006 	br	111d4 <_gp+0xffff0ec8>
   11454:	00bfffc4 	movi	r2,-1
   11458:	003f0006 	br	1105c <_gp+0xffff0d50>
   1145c:	00800304 	movi	r2,12
   11460:	a8800015 	stw	r2,0(r21)
   11464:	8080030b 	ldhu	r2,12(r16)
   11468:	003f5006 	br	111ac <_gp+0xffff0ea0>

0001146c <_fwalk>:
   1146c:	defff704 	addi	sp,sp,-36
   11470:	dd000415 	stw	r20,16(sp)
   11474:	dfc00815 	stw	ra,32(sp)
   11478:	ddc00715 	stw	r23,28(sp)
   1147c:	dd800615 	stw	r22,24(sp)
   11480:	dd400515 	stw	r21,20(sp)
   11484:	dcc00315 	stw	r19,12(sp)
   11488:	dc800215 	stw	r18,8(sp)
   1148c:	dc400115 	stw	r17,4(sp)
   11490:	dc000015 	stw	r16,0(sp)
   11494:	2500b804 	addi	r20,r4,736
   11498:	a0002326 	beq	r20,zero,11528 <_fwalk+0xbc>
   1149c:	282b883a 	mov	r21,r5
   114a0:	002f883a 	mov	r23,zero
   114a4:	05800044 	movi	r22,1
   114a8:	04ffffc4 	movi	r19,-1
   114ac:	a4400117 	ldw	r17,4(r20)
   114b0:	a4800217 	ldw	r18,8(r20)
   114b4:	8c7fffc4 	addi	r17,r17,-1
   114b8:	88000d16 	blt	r17,zero,114f0 <_fwalk+0x84>
   114bc:	94000304 	addi	r16,r18,12
   114c0:	94800384 	addi	r18,r18,14
   114c4:	8080000b 	ldhu	r2,0(r16)
   114c8:	8c7fffc4 	addi	r17,r17,-1
   114cc:	813ffd04 	addi	r4,r16,-12
   114d0:	b080042e 	bgeu	r22,r2,114e4 <_fwalk+0x78>
   114d4:	9080000f 	ldh	r2,0(r18)
   114d8:	14c00226 	beq	r2,r19,114e4 <_fwalk+0x78>
   114dc:	a83ee83a 	callr	r21
   114e0:	b8aeb03a 	or	r23,r23,r2
   114e4:	84001a04 	addi	r16,r16,104
   114e8:	94801a04 	addi	r18,r18,104
   114ec:	8cfff51e 	bne	r17,r19,114c4 <_gp+0xffff11b8>
   114f0:	a5000017 	ldw	r20,0(r20)
   114f4:	a03fed1e 	bne	r20,zero,114ac <_gp+0xffff11a0>
   114f8:	b805883a 	mov	r2,r23
   114fc:	dfc00817 	ldw	ra,32(sp)
   11500:	ddc00717 	ldw	r23,28(sp)
   11504:	dd800617 	ldw	r22,24(sp)
   11508:	dd400517 	ldw	r21,20(sp)
   1150c:	dd000417 	ldw	r20,16(sp)
   11510:	dcc00317 	ldw	r19,12(sp)
   11514:	dc800217 	ldw	r18,8(sp)
   11518:	dc400117 	ldw	r17,4(sp)
   1151c:	dc000017 	ldw	r16,0(sp)
   11520:	dec00904 	addi	sp,sp,36
   11524:	f800283a 	ret
   11528:	002f883a 	mov	r23,zero
   1152c:	003ff206 	br	114f8 <_gp+0xffff11ec>

00011530 <_fwalk_reent>:
   11530:	defff704 	addi	sp,sp,-36
   11534:	dd000415 	stw	r20,16(sp)
   11538:	dfc00815 	stw	ra,32(sp)
   1153c:	ddc00715 	stw	r23,28(sp)
   11540:	dd800615 	stw	r22,24(sp)
   11544:	dd400515 	stw	r21,20(sp)
   11548:	dcc00315 	stw	r19,12(sp)
   1154c:	dc800215 	stw	r18,8(sp)
   11550:	dc400115 	stw	r17,4(sp)
   11554:	dc000015 	stw	r16,0(sp)
   11558:	2500b804 	addi	r20,r4,736
   1155c:	a0002326 	beq	r20,zero,115ec <_fwalk_reent+0xbc>
   11560:	282b883a 	mov	r21,r5
   11564:	2027883a 	mov	r19,r4
   11568:	002f883a 	mov	r23,zero
   1156c:	05800044 	movi	r22,1
   11570:	04bfffc4 	movi	r18,-1
   11574:	a4400117 	ldw	r17,4(r20)
   11578:	a4000217 	ldw	r16,8(r20)
   1157c:	8c7fffc4 	addi	r17,r17,-1
   11580:	88000c16 	blt	r17,zero,115b4 <_fwalk_reent+0x84>
   11584:	84000304 	addi	r16,r16,12
   11588:	8080000b 	ldhu	r2,0(r16)
   1158c:	8c7fffc4 	addi	r17,r17,-1
   11590:	817ffd04 	addi	r5,r16,-12
   11594:	b080052e 	bgeu	r22,r2,115ac <_fwalk_reent+0x7c>
   11598:	8080008f 	ldh	r2,2(r16)
   1159c:	9809883a 	mov	r4,r19
   115a0:	14800226 	beq	r2,r18,115ac <_fwalk_reent+0x7c>
   115a4:	a83ee83a 	callr	r21
   115a8:	b8aeb03a 	or	r23,r23,r2
   115ac:	84001a04 	addi	r16,r16,104
   115b0:	8cbff51e 	bne	r17,r18,11588 <_gp+0xffff127c>
   115b4:	a5000017 	ldw	r20,0(r20)
   115b8:	a03fee1e 	bne	r20,zero,11574 <_gp+0xffff1268>
   115bc:	b805883a 	mov	r2,r23
   115c0:	dfc00817 	ldw	ra,32(sp)
   115c4:	ddc00717 	ldw	r23,28(sp)
   115c8:	dd800617 	ldw	r22,24(sp)
   115cc:	dd400517 	ldw	r21,20(sp)
   115d0:	dd000417 	ldw	r20,16(sp)
   115d4:	dcc00317 	ldw	r19,12(sp)
   115d8:	dc800217 	ldw	r18,8(sp)
   115dc:	dc400117 	ldw	r17,4(sp)
   115e0:	dc000017 	ldw	r16,0(sp)
   115e4:	dec00904 	addi	sp,sp,36
   115e8:	f800283a 	ret
   115ec:	002f883a 	mov	r23,zero
   115f0:	003ff206 	br	115bc <_gp+0xffff12b0>

000115f4 <_malloc_r>:
   115f4:	defff504 	addi	sp,sp,-44
   115f8:	dc800315 	stw	r18,12(sp)
   115fc:	dfc00a15 	stw	ra,40(sp)
   11600:	df000915 	stw	fp,36(sp)
   11604:	ddc00815 	stw	r23,32(sp)
   11608:	dd800715 	stw	r22,28(sp)
   1160c:	dd400615 	stw	r21,24(sp)
   11610:	dd000515 	stw	r20,20(sp)
   11614:	dcc00415 	stw	r19,16(sp)
   11618:	dc400215 	stw	r17,8(sp)
   1161c:	dc000115 	stw	r16,4(sp)
   11620:	288002c4 	addi	r2,r5,11
   11624:	00c00584 	movi	r3,22
   11628:	2025883a 	mov	r18,r4
   1162c:	18807f2e 	bgeu	r3,r2,1182c <_malloc_r+0x238>
   11630:	047ffe04 	movi	r17,-8
   11634:	1462703a 	and	r17,r2,r17
   11638:	8800a316 	blt	r17,zero,118c8 <_malloc_r+0x2d4>
   1163c:	8940a236 	bltu	r17,r5,118c8 <_malloc_r+0x2d4>
   11640:	0013f880 	call	13f88 <__malloc_lock>
   11644:	00807dc4 	movi	r2,503
   11648:	1441e92e 	bgeu	r2,r17,11df0 <_malloc_r+0x7fc>
   1164c:	8804d27a 	srli	r2,r17,9
   11650:	1000a126 	beq	r2,zero,118d8 <_malloc_r+0x2e4>
   11654:	00c00104 	movi	r3,4
   11658:	18811e36 	bltu	r3,r2,11ad4 <_malloc_r+0x4e0>
   1165c:	8804d1ba 	srli	r2,r17,6
   11660:	12000e44 	addi	r8,r2,57
   11664:	11c00e04 	addi	r7,r2,56
   11668:	4209883a 	add	r4,r8,r8
   1166c:	04c00074 	movhi	r19,1
   11670:	2109883a 	add	r4,r4,r4
   11674:	9cdb3404 	addi	r19,r19,27856
   11678:	2109883a 	add	r4,r4,r4
   1167c:	9909883a 	add	r4,r19,r4
   11680:	24000117 	ldw	r16,4(r4)
   11684:	213ffe04 	addi	r4,r4,-8
   11688:	24009726 	beq	r4,r16,118e8 <_malloc_r+0x2f4>
   1168c:	80800117 	ldw	r2,4(r16)
   11690:	01bfff04 	movi	r6,-4
   11694:	014003c4 	movi	r5,15
   11698:	1184703a 	and	r2,r2,r6
   1169c:	1447c83a 	sub	r3,r2,r17
   116a0:	28c00716 	blt	r5,r3,116c0 <_malloc_r+0xcc>
   116a4:	1800920e 	bge	r3,zero,118f0 <_malloc_r+0x2fc>
   116a8:	84000317 	ldw	r16,12(r16)
   116ac:	24008e26 	beq	r4,r16,118e8 <_malloc_r+0x2f4>
   116b0:	80800117 	ldw	r2,4(r16)
   116b4:	1184703a 	and	r2,r2,r6
   116b8:	1447c83a 	sub	r3,r2,r17
   116bc:	28fff90e 	bge	r5,r3,116a4 <_gp+0xffff1398>
   116c0:	3809883a 	mov	r4,r7
   116c4:	01800074 	movhi	r6,1
   116c8:	9c000417 	ldw	r16,16(r19)
   116cc:	319b3404 	addi	r6,r6,27856
   116d0:	32000204 	addi	r8,r6,8
   116d4:	82013426 	beq	r16,r8,11ba8 <_malloc_r+0x5b4>
   116d8:	80c00117 	ldw	r3,4(r16)
   116dc:	00bfff04 	movi	r2,-4
   116e0:	188e703a 	and	r7,r3,r2
   116e4:	3c45c83a 	sub	r2,r7,r17
   116e8:	00c003c4 	movi	r3,15
   116ec:	18811f16 	blt	r3,r2,11b6c <_malloc_r+0x578>
   116f0:	32000515 	stw	r8,20(r6)
   116f4:	32000415 	stw	r8,16(r6)
   116f8:	10007f0e 	bge	r2,zero,118f8 <_malloc_r+0x304>
   116fc:	00807fc4 	movi	r2,511
   11700:	11c0fd36 	bltu	r2,r7,11af8 <_malloc_r+0x504>
   11704:	3806d0fa 	srli	r3,r7,3
   11708:	01c00044 	movi	r7,1
   1170c:	30800117 	ldw	r2,4(r6)
   11710:	19400044 	addi	r5,r3,1
   11714:	294b883a 	add	r5,r5,r5
   11718:	1807d0ba 	srai	r3,r3,2
   1171c:	294b883a 	add	r5,r5,r5
   11720:	294b883a 	add	r5,r5,r5
   11724:	298b883a 	add	r5,r5,r6
   11728:	38c6983a 	sll	r3,r7,r3
   1172c:	29c00017 	ldw	r7,0(r5)
   11730:	2a7ffe04 	addi	r9,r5,-8
   11734:	1886b03a 	or	r3,r3,r2
   11738:	82400315 	stw	r9,12(r16)
   1173c:	81c00215 	stw	r7,8(r16)
   11740:	30c00115 	stw	r3,4(r6)
   11744:	2c000015 	stw	r16,0(r5)
   11748:	3c000315 	stw	r16,12(r7)
   1174c:	2005d0ba 	srai	r2,r4,2
   11750:	01400044 	movi	r5,1
   11754:	288a983a 	sll	r5,r5,r2
   11758:	19406f36 	bltu	r3,r5,11918 <_malloc_r+0x324>
   1175c:	28c4703a 	and	r2,r5,r3
   11760:	10000a1e 	bne	r2,zero,1178c <_malloc_r+0x198>
   11764:	00bfff04 	movi	r2,-4
   11768:	294b883a 	add	r5,r5,r5
   1176c:	2088703a 	and	r4,r4,r2
   11770:	28c4703a 	and	r2,r5,r3
   11774:	21000104 	addi	r4,r4,4
   11778:	1000041e 	bne	r2,zero,1178c <_malloc_r+0x198>
   1177c:	294b883a 	add	r5,r5,r5
   11780:	28c4703a 	and	r2,r5,r3
   11784:	21000104 	addi	r4,r4,4
   11788:	103ffc26 	beq	r2,zero,1177c <_gp+0xffff1470>
   1178c:	02bfff04 	movi	r10,-4
   11790:	024003c4 	movi	r9,15
   11794:	21800044 	addi	r6,r4,1
   11798:	318d883a 	add	r6,r6,r6
   1179c:	318d883a 	add	r6,r6,r6
   117a0:	318d883a 	add	r6,r6,r6
   117a4:	998d883a 	add	r6,r19,r6
   117a8:	333ffe04 	addi	r12,r6,-8
   117ac:	2017883a 	mov	r11,r4
   117b0:	31800104 	addi	r6,r6,4
   117b4:	34000017 	ldw	r16,0(r6)
   117b8:	31fffd04 	addi	r7,r6,-12
   117bc:	81c0041e 	bne	r16,r7,117d0 <_malloc_r+0x1dc>
   117c0:	0000fb06 	br	11bb0 <_malloc_r+0x5bc>
   117c4:	1801030e 	bge	r3,zero,11bd4 <_malloc_r+0x5e0>
   117c8:	84000317 	ldw	r16,12(r16)
   117cc:	81c0f826 	beq	r16,r7,11bb0 <_malloc_r+0x5bc>
   117d0:	80800117 	ldw	r2,4(r16)
   117d4:	1284703a 	and	r2,r2,r10
   117d8:	1447c83a 	sub	r3,r2,r17
   117dc:	48fff90e 	bge	r9,r3,117c4 <_gp+0xffff14b8>
   117e0:	80800317 	ldw	r2,12(r16)
   117e4:	81000217 	ldw	r4,8(r16)
   117e8:	89400054 	ori	r5,r17,1
   117ec:	81400115 	stw	r5,4(r16)
   117f0:	20800315 	stw	r2,12(r4)
   117f4:	11000215 	stw	r4,8(r2)
   117f8:	8463883a 	add	r17,r16,r17
   117fc:	9c400515 	stw	r17,20(r19)
   11800:	9c400415 	stw	r17,16(r19)
   11804:	18800054 	ori	r2,r3,1
   11808:	88800115 	stw	r2,4(r17)
   1180c:	8a000315 	stw	r8,12(r17)
   11810:	8a000215 	stw	r8,8(r17)
   11814:	88e3883a 	add	r17,r17,r3
   11818:	88c00015 	stw	r3,0(r17)
   1181c:	9009883a 	mov	r4,r18
   11820:	0013fac0 	call	13fac <__malloc_unlock>
   11824:	80800204 	addi	r2,r16,8
   11828:	00001b06 	br	11898 <_malloc_r+0x2a4>
   1182c:	04400404 	movi	r17,16
   11830:	89402536 	bltu	r17,r5,118c8 <_malloc_r+0x2d4>
   11834:	0013f880 	call	13f88 <__malloc_lock>
   11838:	00800184 	movi	r2,6
   1183c:	01000084 	movi	r4,2
   11840:	04c00074 	movhi	r19,1
   11844:	1085883a 	add	r2,r2,r2
   11848:	9cdb3404 	addi	r19,r19,27856
   1184c:	1085883a 	add	r2,r2,r2
   11850:	9885883a 	add	r2,r19,r2
   11854:	14000117 	ldw	r16,4(r2)
   11858:	10fffe04 	addi	r3,r2,-8
   1185c:	80c0d926 	beq	r16,r3,11bc4 <_malloc_r+0x5d0>
   11860:	80c00117 	ldw	r3,4(r16)
   11864:	81000317 	ldw	r4,12(r16)
   11868:	00bfff04 	movi	r2,-4
   1186c:	1884703a 	and	r2,r3,r2
   11870:	81400217 	ldw	r5,8(r16)
   11874:	8085883a 	add	r2,r16,r2
   11878:	10c00117 	ldw	r3,4(r2)
   1187c:	29000315 	stw	r4,12(r5)
   11880:	21400215 	stw	r5,8(r4)
   11884:	18c00054 	ori	r3,r3,1
   11888:	10c00115 	stw	r3,4(r2)
   1188c:	9009883a 	mov	r4,r18
   11890:	0013fac0 	call	13fac <__malloc_unlock>
   11894:	80800204 	addi	r2,r16,8
   11898:	dfc00a17 	ldw	ra,40(sp)
   1189c:	df000917 	ldw	fp,36(sp)
   118a0:	ddc00817 	ldw	r23,32(sp)
   118a4:	dd800717 	ldw	r22,28(sp)
   118a8:	dd400617 	ldw	r21,24(sp)
   118ac:	dd000517 	ldw	r20,20(sp)
   118b0:	dcc00417 	ldw	r19,16(sp)
   118b4:	dc800317 	ldw	r18,12(sp)
   118b8:	dc400217 	ldw	r17,8(sp)
   118bc:	dc000117 	ldw	r16,4(sp)
   118c0:	dec00b04 	addi	sp,sp,44
   118c4:	f800283a 	ret
   118c8:	00800304 	movi	r2,12
   118cc:	90800015 	stw	r2,0(r18)
   118d0:	0005883a 	mov	r2,zero
   118d4:	003ff006 	br	11898 <_gp+0xffff158c>
   118d8:	01002004 	movi	r4,128
   118dc:	02001004 	movi	r8,64
   118e0:	01c00fc4 	movi	r7,63
   118e4:	003f6106 	br	1166c <_gp+0xffff1360>
   118e8:	4009883a 	mov	r4,r8
   118ec:	003f7506 	br	116c4 <_gp+0xffff13b8>
   118f0:	81000317 	ldw	r4,12(r16)
   118f4:	003fde06 	br	11870 <_gp+0xffff1564>
   118f8:	81c5883a 	add	r2,r16,r7
   118fc:	11400117 	ldw	r5,4(r2)
   11900:	9009883a 	mov	r4,r18
   11904:	29400054 	ori	r5,r5,1
   11908:	11400115 	stw	r5,4(r2)
   1190c:	0013fac0 	call	13fac <__malloc_unlock>
   11910:	80800204 	addi	r2,r16,8
   11914:	003fe006 	br	11898 <_gp+0xffff158c>
   11918:	9c000217 	ldw	r16,8(r19)
   1191c:	00bfff04 	movi	r2,-4
   11920:	85800117 	ldw	r22,4(r16)
   11924:	b0ac703a 	and	r22,r22,r2
   11928:	b4400336 	bltu	r22,r17,11938 <_malloc_r+0x344>
   1192c:	b445c83a 	sub	r2,r22,r17
   11930:	00c003c4 	movi	r3,15
   11934:	18805d16 	blt	r3,r2,11aac <_malloc_r+0x4b8>
   11938:	05c000b4 	movhi	r23,2
   1193c:	008000b4 	movhi	r2,2
   11940:	10a77e04 	addi	r2,r2,-25096
   11944:	bde0c604 	addi	r23,r23,-31976
   11948:	15400017 	ldw	r21,0(r2)
   1194c:	b8c00017 	ldw	r3,0(r23)
   11950:	00bfffc4 	movi	r2,-1
   11954:	858d883a 	add	r6,r16,r22
   11958:	8d6b883a 	add	r21,r17,r21
   1195c:	1880ea26 	beq	r3,r2,11d08 <_malloc_r+0x714>
   11960:	ad4403c4 	addi	r21,r21,4111
   11964:	00bc0004 	movi	r2,-4096
   11968:	a8aa703a 	and	r21,r21,r2
   1196c:	a80b883a 	mov	r5,r21
   11970:	9009883a 	mov	r4,r18
   11974:	d9800015 	stw	r6,0(sp)
   11978:	00128140 	call	12814 <_sbrk_r>
   1197c:	1029883a 	mov	r20,r2
   11980:	00bfffc4 	movi	r2,-1
   11984:	d9800017 	ldw	r6,0(sp)
   11988:	a080e826 	beq	r20,r2,11d2c <_malloc_r+0x738>
   1198c:	a180a636 	bltu	r20,r6,11c28 <_malloc_r+0x634>
   11990:	070000b4 	movhi	fp,2
   11994:	e7278704 	addi	fp,fp,-25060
   11998:	e0800017 	ldw	r2,0(fp)
   1199c:	a887883a 	add	r3,r21,r2
   119a0:	e0c00015 	stw	r3,0(fp)
   119a4:	3500e626 	beq	r6,r20,11d40 <_malloc_r+0x74c>
   119a8:	b9000017 	ldw	r4,0(r23)
   119ac:	00bfffc4 	movi	r2,-1
   119b0:	2080ee26 	beq	r4,r2,11d6c <_malloc_r+0x778>
   119b4:	a185c83a 	sub	r2,r20,r6
   119b8:	10c5883a 	add	r2,r2,r3
   119bc:	e0800015 	stw	r2,0(fp)
   119c0:	a0c001cc 	andi	r3,r20,7
   119c4:	1800bc26 	beq	r3,zero,11cb8 <_malloc_r+0x6c4>
   119c8:	a0e9c83a 	sub	r20,r20,r3
   119cc:	00840204 	movi	r2,4104
   119d0:	a5000204 	addi	r20,r20,8
   119d4:	10c7c83a 	sub	r3,r2,r3
   119d8:	a545883a 	add	r2,r20,r21
   119dc:	1083ffcc 	andi	r2,r2,4095
   119e0:	18abc83a 	sub	r21,r3,r2
   119e4:	a80b883a 	mov	r5,r21
   119e8:	9009883a 	mov	r4,r18
   119ec:	00128140 	call	12814 <_sbrk_r>
   119f0:	00ffffc4 	movi	r3,-1
   119f4:	10c0e126 	beq	r2,r3,11d7c <_malloc_r+0x788>
   119f8:	1505c83a 	sub	r2,r2,r20
   119fc:	1545883a 	add	r2,r2,r21
   11a00:	10800054 	ori	r2,r2,1
   11a04:	e0c00017 	ldw	r3,0(fp)
   11a08:	9d000215 	stw	r20,8(r19)
   11a0c:	a0800115 	stw	r2,4(r20)
   11a10:	a8c7883a 	add	r3,r21,r3
   11a14:	e0c00015 	stw	r3,0(fp)
   11a18:	84c00e26 	beq	r16,r19,11a54 <_malloc_r+0x460>
   11a1c:	018003c4 	movi	r6,15
   11a20:	3580a72e 	bgeu	r6,r22,11cc0 <_malloc_r+0x6cc>
   11a24:	81400117 	ldw	r5,4(r16)
   11a28:	013ffe04 	movi	r4,-8
   11a2c:	b0bffd04 	addi	r2,r22,-12
   11a30:	1104703a 	and	r2,r2,r4
   11a34:	2900004c 	andi	r4,r5,1
   11a38:	2088b03a 	or	r4,r4,r2
   11a3c:	81000115 	stw	r4,4(r16)
   11a40:	01400144 	movi	r5,5
   11a44:	8089883a 	add	r4,r16,r2
   11a48:	21400115 	stw	r5,4(r4)
   11a4c:	21400215 	stw	r5,8(r4)
   11a50:	3080cd36 	bltu	r6,r2,11d88 <_malloc_r+0x794>
   11a54:	008000b4 	movhi	r2,2
   11a58:	10a77d04 	addi	r2,r2,-25100
   11a5c:	11000017 	ldw	r4,0(r2)
   11a60:	20c0012e 	bgeu	r4,r3,11a68 <_malloc_r+0x474>
   11a64:	10c00015 	stw	r3,0(r2)
   11a68:	008000b4 	movhi	r2,2
   11a6c:	10a77c04 	addi	r2,r2,-25104
   11a70:	11000017 	ldw	r4,0(r2)
   11a74:	9c000217 	ldw	r16,8(r19)
   11a78:	20c0012e 	bgeu	r4,r3,11a80 <_malloc_r+0x48c>
   11a7c:	10c00015 	stw	r3,0(r2)
   11a80:	80c00117 	ldw	r3,4(r16)
   11a84:	00bfff04 	movi	r2,-4
   11a88:	1886703a 	and	r3,r3,r2
   11a8c:	1c45c83a 	sub	r2,r3,r17
   11a90:	1c400236 	bltu	r3,r17,11a9c <_malloc_r+0x4a8>
   11a94:	00c003c4 	movi	r3,15
   11a98:	18800416 	blt	r3,r2,11aac <_malloc_r+0x4b8>
   11a9c:	9009883a 	mov	r4,r18
   11aa0:	0013fac0 	call	13fac <__malloc_unlock>
   11aa4:	0005883a 	mov	r2,zero
   11aa8:	003f7b06 	br	11898 <_gp+0xffff158c>
   11aac:	88c00054 	ori	r3,r17,1
   11ab0:	80c00115 	stw	r3,4(r16)
   11ab4:	8463883a 	add	r17,r16,r17
   11ab8:	10800054 	ori	r2,r2,1
   11abc:	9c400215 	stw	r17,8(r19)
   11ac0:	88800115 	stw	r2,4(r17)
   11ac4:	9009883a 	mov	r4,r18
   11ac8:	0013fac0 	call	13fac <__malloc_unlock>
   11acc:	80800204 	addi	r2,r16,8
   11ad0:	003f7106 	br	11898 <_gp+0xffff158c>
   11ad4:	00c00504 	movi	r3,20
   11ad8:	18804a2e 	bgeu	r3,r2,11c04 <_malloc_r+0x610>
   11adc:	00c01504 	movi	r3,84
   11ae0:	18806e36 	bltu	r3,r2,11c9c <_malloc_r+0x6a8>
   11ae4:	8804d33a 	srli	r2,r17,12
   11ae8:	12001bc4 	addi	r8,r2,111
   11aec:	11c01b84 	addi	r7,r2,110
   11af0:	4209883a 	add	r4,r8,r8
   11af4:	003edd06 	br	1166c <_gp+0xffff1360>
   11af8:	3804d27a 	srli	r2,r7,9
   11afc:	00c00104 	movi	r3,4
   11b00:	1880442e 	bgeu	r3,r2,11c14 <_malloc_r+0x620>
   11b04:	00c00504 	movi	r3,20
   11b08:	18808136 	bltu	r3,r2,11d10 <_malloc_r+0x71c>
   11b0c:	11401704 	addi	r5,r2,92
   11b10:	10c016c4 	addi	r3,r2,91
   11b14:	294b883a 	add	r5,r5,r5
   11b18:	294b883a 	add	r5,r5,r5
   11b1c:	294b883a 	add	r5,r5,r5
   11b20:	994b883a 	add	r5,r19,r5
   11b24:	28800017 	ldw	r2,0(r5)
   11b28:	01800074 	movhi	r6,1
   11b2c:	297ffe04 	addi	r5,r5,-8
   11b30:	319b3404 	addi	r6,r6,27856
   11b34:	28806526 	beq	r5,r2,11ccc <_malloc_r+0x6d8>
   11b38:	01bfff04 	movi	r6,-4
   11b3c:	10c00117 	ldw	r3,4(r2)
   11b40:	1986703a 	and	r3,r3,r6
   11b44:	38c0022e 	bgeu	r7,r3,11b50 <_malloc_r+0x55c>
   11b48:	10800217 	ldw	r2,8(r2)
   11b4c:	28bffb1e 	bne	r5,r2,11b3c <_gp+0xffff1830>
   11b50:	11400317 	ldw	r5,12(r2)
   11b54:	98c00117 	ldw	r3,4(r19)
   11b58:	81400315 	stw	r5,12(r16)
   11b5c:	80800215 	stw	r2,8(r16)
   11b60:	2c000215 	stw	r16,8(r5)
   11b64:	14000315 	stw	r16,12(r2)
   11b68:	003ef806 	br	1174c <_gp+0xffff1440>
   11b6c:	88c00054 	ori	r3,r17,1
   11b70:	80c00115 	stw	r3,4(r16)
   11b74:	8463883a 	add	r17,r16,r17
   11b78:	34400515 	stw	r17,20(r6)
   11b7c:	34400415 	stw	r17,16(r6)
   11b80:	10c00054 	ori	r3,r2,1
   11b84:	8a000315 	stw	r8,12(r17)
   11b88:	8a000215 	stw	r8,8(r17)
   11b8c:	88c00115 	stw	r3,4(r17)
   11b90:	88a3883a 	add	r17,r17,r2
   11b94:	88800015 	stw	r2,0(r17)
   11b98:	9009883a 	mov	r4,r18
   11b9c:	0013fac0 	call	13fac <__malloc_unlock>
   11ba0:	80800204 	addi	r2,r16,8
   11ba4:	003f3c06 	br	11898 <_gp+0xffff158c>
   11ba8:	30c00117 	ldw	r3,4(r6)
   11bac:	003ee706 	br	1174c <_gp+0xffff1440>
   11bb0:	5ac00044 	addi	r11,r11,1
   11bb4:	588000cc 	andi	r2,r11,3
   11bb8:	31800204 	addi	r6,r6,8
   11bbc:	103efd1e 	bne	r2,zero,117b4 <_gp+0xffff14a8>
   11bc0:	00002406 	br	11c54 <_malloc_r+0x660>
   11bc4:	14000317 	ldw	r16,12(r2)
   11bc8:	143f251e 	bne	r2,r16,11860 <_gp+0xffff1554>
   11bcc:	21000084 	addi	r4,r4,2
   11bd0:	003ebc06 	br	116c4 <_gp+0xffff13b8>
   11bd4:	8085883a 	add	r2,r16,r2
   11bd8:	10c00117 	ldw	r3,4(r2)
   11bdc:	81000317 	ldw	r4,12(r16)
   11be0:	81400217 	ldw	r5,8(r16)
   11be4:	18c00054 	ori	r3,r3,1
   11be8:	10c00115 	stw	r3,4(r2)
   11bec:	29000315 	stw	r4,12(r5)
   11bf0:	21400215 	stw	r5,8(r4)
   11bf4:	9009883a 	mov	r4,r18
   11bf8:	0013fac0 	call	13fac <__malloc_unlock>
   11bfc:	80800204 	addi	r2,r16,8
   11c00:	003f2506 	br	11898 <_gp+0xffff158c>
   11c04:	12001704 	addi	r8,r2,92
   11c08:	11c016c4 	addi	r7,r2,91
   11c0c:	4209883a 	add	r4,r8,r8
   11c10:	003e9606 	br	1166c <_gp+0xffff1360>
   11c14:	3804d1ba 	srli	r2,r7,6
   11c18:	11400e44 	addi	r5,r2,57
   11c1c:	10c00e04 	addi	r3,r2,56
   11c20:	294b883a 	add	r5,r5,r5
   11c24:	003fbc06 	br	11b18 <_gp+0xffff180c>
   11c28:	84ff5926 	beq	r16,r19,11990 <_gp+0xffff1684>
   11c2c:	00800074 	movhi	r2,1
   11c30:	109b3404 	addi	r2,r2,27856
   11c34:	14000217 	ldw	r16,8(r2)
   11c38:	00bfff04 	movi	r2,-4
   11c3c:	80c00117 	ldw	r3,4(r16)
   11c40:	1886703a 	and	r3,r3,r2
   11c44:	003f9106 	br	11a8c <_gp+0xffff1780>
   11c48:	60800217 	ldw	r2,8(r12)
   11c4c:	213fffc4 	addi	r4,r4,-1
   11c50:	1300651e 	bne	r2,r12,11de8 <_malloc_r+0x7f4>
   11c54:	208000cc 	andi	r2,r4,3
   11c58:	633ffe04 	addi	r12,r12,-8
   11c5c:	103ffa1e 	bne	r2,zero,11c48 <_gp+0xffff193c>
   11c60:	98800117 	ldw	r2,4(r19)
   11c64:	0146303a 	nor	r3,zero,r5
   11c68:	1884703a 	and	r2,r3,r2
   11c6c:	98800115 	stw	r2,4(r19)
   11c70:	294b883a 	add	r5,r5,r5
   11c74:	117f2836 	bltu	r2,r5,11918 <_gp+0xffff160c>
   11c78:	283f2726 	beq	r5,zero,11918 <_gp+0xffff160c>
   11c7c:	2886703a 	and	r3,r5,r2
   11c80:	5809883a 	mov	r4,r11
   11c84:	183ec31e 	bne	r3,zero,11794 <_gp+0xffff1488>
   11c88:	294b883a 	add	r5,r5,r5
   11c8c:	2886703a 	and	r3,r5,r2
   11c90:	21000104 	addi	r4,r4,4
   11c94:	183ffc26 	beq	r3,zero,11c88 <_gp+0xffff197c>
   11c98:	003ebe06 	br	11794 <_gp+0xffff1488>
   11c9c:	00c05504 	movi	r3,340
   11ca0:	18801236 	bltu	r3,r2,11cec <_malloc_r+0x6f8>
   11ca4:	8804d3fa 	srli	r2,r17,15
   11ca8:	12001e04 	addi	r8,r2,120
   11cac:	11c01dc4 	addi	r7,r2,119
   11cb0:	4209883a 	add	r4,r8,r8
   11cb4:	003e6d06 	br	1166c <_gp+0xffff1360>
   11cb8:	00c40004 	movi	r3,4096
   11cbc:	003f4606 	br	119d8 <_gp+0xffff16cc>
   11cc0:	00800044 	movi	r2,1
   11cc4:	a0800115 	stw	r2,4(r20)
   11cc8:	003f7406 	br	11a9c <_gp+0xffff1790>
   11ccc:	1805d0ba 	srai	r2,r3,2
   11cd0:	01c00044 	movi	r7,1
   11cd4:	30c00117 	ldw	r3,4(r6)
   11cd8:	388e983a 	sll	r7,r7,r2
   11cdc:	2805883a 	mov	r2,r5
   11ce0:	38c6b03a 	or	r3,r7,r3
   11ce4:	30c00115 	stw	r3,4(r6)
   11ce8:	003f9b06 	br	11b58 <_gp+0xffff184c>
   11cec:	00c15504 	movi	r3,1364
   11cf0:	18801a36 	bltu	r3,r2,11d5c <_malloc_r+0x768>
   11cf4:	8804d4ba 	srli	r2,r17,18
   11cf8:	12001f44 	addi	r8,r2,125
   11cfc:	11c01f04 	addi	r7,r2,124
   11d00:	4209883a 	add	r4,r8,r8
   11d04:	003e5906 	br	1166c <_gp+0xffff1360>
   11d08:	ad400404 	addi	r21,r21,16
   11d0c:	003f1706 	br	1196c <_gp+0xffff1660>
   11d10:	00c01504 	movi	r3,84
   11d14:	18802336 	bltu	r3,r2,11da4 <_malloc_r+0x7b0>
   11d18:	3804d33a 	srli	r2,r7,12
   11d1c:	11401bc4 	addi	r5,r2,111
   11d20:	10c01b84 	addi	r3,r2,110
   11d24:	294b883a 	add	r5,r5,r5
   11d28:	003f7b06 	br	11b18 <_gp+0xffff180c>
   11d2c:	9c000217 	ldw	r16,8(r19)
   11d30:	00bfff04 	movi	r2,-4
   11d34:	80c00117 	ldw	r3,4(r16)
   11d38:	1886703a 	and	r3,r3,r2
   11d3c:	003f5306 	br	11a8c <_gp+0xffff1780>
   11d40:	3083ffcc 	andi	r2,r6,4095
   11d44:	103f181e 	bne	r2,zero,119a8 <_gp+0xffff169c>
   11d48:	99000217 	ldw	r4,8(r19)
   11d4c:	b545883a 	add	r2,r22,r21
   11d50:	10800054 	ori	r2,r2,1
   11d54:	20800115 	stw	r2,4(r4)
   11d58:	003f3e06 	br	11a54 <_gp+0xffff1748>
   11d5c:	01003f84 	movi	r4,254
   11d60:	02001fc4 	movi	r8,127
   11d64:	01c01f84 	movi	r7,126
   11d68:	003e4006 	br	1166c <_gp+0xffff1360>
   11d6c:	008000b4 	movhi	r2,2
   11d70:	10a0c604 	addi	r2,r2,-31976
   11d74:	15000015 	stw	r20,0(r2)
   11d78:	003f1106 	br	119c0 <_gp+0xffff16b4>
   11d7c:	00800044 	movi	r2,1
   11d80:	002b883a 	mov	r21,zero
   11d84:	003f1f06 	br	11a04 <_gp+0xffff16f8>
   11d88:	81400204 	addi	r5,r16,8
   11d8c:	9009883a 	mov	r4,r18
   11d90:	001307c0 	call	1307c <_free_r>
   11d94:	008000b4 	movhi	r2,2
   11d98:	10a78704 	addi	r2,r2,-25060
   11d9c:	10c00017 	ldw	r3,0(r2)
   11da0:	003f2c06 	br	11a54 <_gp+0xffff1748>
   11da4:	00c05504 	movi	r3,340
   11da8:	18800536 	bltu	r3,r2,11dc0 <_malloc_r+0x7cc>
   11dac:	3804d3fa 	srli	r2,r7,15
   11db0:	11401e04 	addi	r5,r2,120
   11db4:	10c01dc4 	addi	r3,r2,119
   11db8:	294b883a 	add	r5,r5,r5
   11dbc:	003f5606 	br	11b18 <_gp+0xffff180c>
   11dc0:	00c15504 	movi	r3,1364
   11dc4:	18800536 	bltu	r3,r2,11ddc <_malloc_r+0x7e8>
   11dc8:	3804d4ba 	srli	r2,r7,18
   11dcc:	11401f44 	addi	r5,r2,125
   11dd0:	10c01f04 	addi	r3,r2,124
   11dd4:	294b883a 	add	r5,r5,r5
   11dd8:	003f4f06 	br	11b18 <_gp+0xffff180c>
   11ddc:	01403f84 	movi	r5,254
   11de0:	00c01f84 	movi	r3,126
   11de4:	003f4c06 	br	11b18 <_gp+0xffff180c>
   11de8:	98800117 	ldw	r2,4(r19)
   11dec:	003fa006 	br	11c70 <_gp+0xffff1964>
   11df0:	8808d0fa 	srli	r4,r17,3
   11df4:	20800044 	addi	r2,r4,1
   11df8:	1085883a 	add	r2,r2,r2
   11dfc:	003e9006 	br	11840 <_gp+0xffff1534>

00011e00 <memchr>:
   11e00:	208000cc 	andi	r2,r4,3
   11e04:	280f883a 	mov	r7,r5
   11e08:	10003426 	beq	r2,zero,11edc <memchr+0xdc>
   11e0c:	30bfffc4 	addi	r2,r6,-1
   11e10:	30001a26 	beq	r6,zero,11e7c <memchr+0x7c>
   11e14:	20c00003 	ldbu	r3,0(r4)
   11e18:	29803fcc 	andi	r6,r5,255
   11e1c:	30c0051e 	bne	r6,r3,11e34 <memchr+0x34>
   11e20:	00001806 	br	11e84 <memchr+0x84>
   11e24:	10001526 	beq	r2,zero,11e7c <memchr+0x7c>
   11e28:	20c00003 	ldbu	r3,0(r4)
   11e2c:	10bfffc4 	addi	r2,r2,-1
   11e30:	30c01426 	beq	r6,r3,11e84 <memchr+0x84>
   11e34:	21000044 	addi	r4,r4,1
   11e38:	20c000cc 	andi	r3,r4,3
   11e3c:	183ff91e 	bne	r3,zero,11e24 <_gp+0xffff1b18>
   11e40:	020000c4 	movi	r8,3
   11e44:	40801136 	bltu	r8,r2,11e8c <memchr+0x8c>
   11e48:	10000c26 	beq	r2,zero,11e7c <memchr+0x7c>
   11e4c:	20c00003 	ldbu	r3,0(r4)
   11e50:	29403fcc 	andi	r5,r5,255
   11e54:	28c00b26 	beq	r5,r3,11e84 <memchr+0x84>
   11e58:	20c00044 	addi	r3,r4,1
   11e5c:	39803fcc 	andi	r6,r7,255
   11e60:	2089883a 	add	r4,r4,r2
   11e64:	00000306 	br	11e74 <memchr+0x74>
   11e68:	18c00044 	addi	r3,r3,1
   11e6c:	197fffc3 	ldbu	r5,-1(r3)
   11e70:	31400526 	beq	r6,r5,11e88 <memchr+0x88>
   11e74:	1805883a 	mov	r2,r3
   11e78:	20fffb1e 	bne	r4,r3,11e68 <_gp+0xffff1b5c>
   11e7c:	0005883a 	mov	r2,zero
   11e80:	f800283a 	ret
   11e84:	2005883a 	mov	r2,r4
   11e88:	f800283a 	ret
   11e8c:	28c03fcc 	andi	r3,r5,255
   11e90:	1812923a 	slli	r9,r3,8
   11e94:	02ffbff4 	movhi	r11,65279
   11e98:	02a02074 	movhi	r10,32897
   11e9c:	48d2b03a 	or	r9,r9,r3
   11ea0:	4806943a 	slli	r3,r9,16
   11ea4:	5affbfc4 	addi	r11,r11,-257
   11ea8:	52a02004 	addi	r10,r10,-32640
   11eac:	48d2b03a 	or	r9,r9,r3
   11eb0:	20c00017 	ldw	r3,0(r4)
   11eb4:	48c6f03a 	xor	r3,r9,r3
   11eb8:	1acd883a 	add	r6,r3,r11
   11ebc:	00c6303a 	nor	r3,zero,r3
   11ec0:	30c6703a 	and	r3,r6,r3
   11ec4:	1a86703a 	and	r3,r3,r10
   11ec8:	183fe01e 	bne	r3,zero,11e4c <_gp+0xffff1b40>
   11ecc:	10bfff04 	addi	r2,r2,-4
   11ed0:	21000104 	addi	r4,r4,4
   11ed4:	40bff636 	bltu	r8,r2,11eb0 <_gp+0xffff1ba4>
   11ed8:	003fdb06 	br	11e48 <_gp+0xffff1b3c>
   11edc:	3005883a 	mov	r2,r6
   11ee0:	003fd706 	br	11e40 <_gp+0xffff1b34>

00011ee4 <memcpy>:
   11ee4:	defffd04 	addi	sp,sp,-12
   11ee8:	dfc00215 	stw	ra,8(sp)
   11eec:	dc400115 	stw	r17,4(sp)
   11ef0:	dc000015 	stw	r16,0(sp)
   11ef4:	00c003c4 	movi	r3,15
   11ef8:	2005883a 	mov	r2,r4
   11efc:	1980452e 	bgeu	r3,r6,12014 <memcpy+0x130>
   11f00:	2906b03a 	or	r3,r5,r4
   11f04:	18c000cc 	andi	r3,r3,3
   11f08:	1800441e 	bne	r3,zero,1201c <memcpy+0x138>
   11f0c:	347ffc04 	addi	r17,r6,-16
   11f10:	8822d13a 	srli	r17,r17,4
   11f14:	28c00104 	addi	r3,r5,4
   11f18:	23400104 	addi	r13,r4,4
   11f1c:	8820913a 	slli	r16,r17,4
   11f20:	2b000204 	addi	r12,r5,8
   11f24:	22c00204 	addi	r11,r4,8
   11f28:	84000504 	addi	r16,r16,20
   11f2c:	2a800304 	addi	r10,r5,12
   11f30:	22400304 	addi	r9,r4,12
   11f34:	2c21883a 	add	r16,r5,r16
   11f38:	2811883a 	mov	r8,r5
   11f3c:	200f883a 	mov	r7,r4
   11f40:	41000017 	ldw	r4,0(r8)
   11f44:	1fc00017 	ldw	ra,0(r3)
   11f48:	63c00017 	ldw	r15,0(r12)
   11f4c:	39000015 	stw	r4,0(r7)
   11f50:	53800017 	ldw	r14,0(r10)
   11f54:	6fc00015 	stw	ra,0(r13)
   11f58:	5bc00015 	stw	r15,0(r11)
   11f5c:	4b800015 	stw	r14,0(r9)
   11f60:	18c00404 	addi	r3,r3,16
   11f64:	39c00404 	addi	r7,r7,16
   11f68:	42000404 	addi	r8,r8,16
   11f6c:	6b400404 	addi	r13,r13,16
   11f70:	63000404 	addi	r12,r12,16
   11f74:	5ac00404 	addi	r11,r11,16
   11f78:	52800404 	addi	r10,r10,16
   11f7c:	4a400404 	addi	r9,r9,16
   11f80:	1c3fef1e 	bne	r3,r16,11f40 <_gp+0xffff1c34>
   11f84:	89c00044 	addi	r7,r17,1
   11f88:	380e913a 	slli	r7,r7,4
   11f8c:	310003cc 	andi	r4,r6,15
   11f90:	02c000c4 	movi	r11,3
   11f94:	11c7883a 	add	r3,r2,r7
   11f98:	29cb883a 	add	r5,r5,r7
   11f9c:	5900212e 	bgeu	r11,r4,12024 <memcpy+0x140>
   11fa0:	1813883a 	mov	r9,r3
   11fa4:	2811883a 	mov	r8,r5
   11fa8:	200f883a 	mov	r7,r4
   11fac:	42800017 	ldw	r10,0(r8)
   11fb0:	4a400104 	addi	r9,r9,4
   11fb4:	39ffff04 	addi	r7,r7,-4
   11fb8:	4abfff15 	stw	r10,-4(r9)
   11fbc:	42000104 	addi	r8,r8,4
   11fc0:	59fffa36 	bltu	r11,r7,11fac <_gp+0xffff1ca0>
   11fc4:	213fff04 	addi	r4,r4,-4
   11fc8:	2008d0ba 	srli	r4,r4,2
   11fcc:	318000cc 	andi	r6,r6,3
   11fd0:	21000044 	addi	r4,r4,1
   11fd4:	2109883a 	add	r4,r4,r4
   11fd8:	2109883a 	add	r4,r4,r4
   11fdc:	1907883a 	add	r3,r3,r4
   11fe0:	290b883a 	add	r5,r5,r4
   11fe4:	30000626 	beq	r6,zero,12000 <memcpy+0x11c>
   11fe8:	198d883a 	add	r6,r3,r6
   11fec:	29c00003 	ldbu	r7,0(r5)
   11ff0:	18c00044 	addi	r3,r3,1
   11ff4:	29400044 	addi	r5,r5,1
   11ff8:	19ffffc5 	stb	r7,-1(r3)
   11ffc:	19bffb1e 	bne	r3,r6,11fec <_gp+0xffff1ce0>
   12000:	dfc00217 	ldw	ra,8(sp)
   12004:	dc400117 	ldw	r17,4(sp)
   12008:	dc000017 	ldw	r16,0(sp)
   1200c:	dec00304 	addi	sp,sp,12
   12010:	f800283a 	ret
   12014:	2007883a 	mov	r3,r4
   12018:	003ff206 	br	11fe4 <_gp+0xffff1cd8>
   1201c:	2007883a 	mov	r3,r4
   12020:	003ff106 	br	11fe8 <_gp+0xffff1cdc>
   12024:	200d883a 	mov	r6,r4
   12028:	003fee06 	br	11fe4 <_gp+0xffff1cd8>

0001202c <memmove>:
   1202c:	2005883a 	mov	r2,r4
   12030:	29000b2e 	bgeu	r5,r4,12060 <memmove+0x34>
   12034:	298f883a 	add	r7,r5,r6
   12038:	21c0092e 	bgeu	r4,r7,12060 <memmove+0x34>
   1203c:	2187883a 	add	r3,r4,r6
   12040:	198bc83a 	sub	r5,r3,r6
   12044:	30004826 	beq	r6,zero,12168 <memmove+0x13c>
   12048:	39ffffc4 	addi	r7,r7,-1
   1204c:	39000003 	ldbu	r4,0(r7)
   12050:	18ffffc4 	addi	r3,r3,-1
   12054:	19000005 	stb	r4,0(r3)
   12058:	28fffb1e 	bne	r5,r3,12048 <_gp+0xffff1d3c>
   1205c:	f800283a 	ret
   12060:	00c003c4 	movi	r3,15
   12064:	1980412e 	bgeu	r3,r6,1216c <memmove+0x140>
   12068:	2886b03a 	or	r3,r5,r2
   1206c:	18c000cc 	andi	r3,r3,3
   12070:	1800401e 	bne	r3,zero,12174 <memmove+0x148>
   12074:	33fffc04 	addi	r15,r6,-16
   12078:	781ed13a 	srli	r15,r15,4
   1207c:	28c00104 	addi	r3,r5,4
   12080:	13400104 	addi	r13,r2,4
   12084:	781c913a 	slli	r14,r15,4
   12088:	2b000204 	addi	r12,r5,8
   1208c:	12c00204 	addi	r11,r2,8
   12090:	73800504 	addi	r14,r14,20
   12094:	2a800304 	addi	r10,r5,12
   12098:	12400304 	addi	r9,r2,12
   1209c:	2b9d883a 	add	r14,r5,r14
   120a0:	2811883a 	mov	r8,r5
   120a4:	100f883a 	mov	r7,r2
   120a8:	41000017 	ldw	r4,0(r8)
   120ac:	39c00404 	addi	r7,r7,16
   120b0:	18c00404 	addi	r3,r3,16
   120b4:	393ffc15 	stw	r4,-16(r7)
   120b8:	193ffc17 	ldw	r4,-16(r3)
   120bc:	6b400404 	addi	r13,r13,16
   120c0:	5ac00404 	addi	r11,r11,16
   120c4:	693ffc15 	stw	r4,-16(r13)
   120c8:	61000017 	ldw	r4,0(r12)
   120cc:	4a400404 	addi	r9,r9,16
   120d0:	42000404 	addi	r8,r8,16
   120d4:	593ffc15 	stw	r4,-16(r11)
   120d8:	51000017 	ldw	r4,0(r10)
   120dc:	63000404 	addi	r12,r12,16
   120e0:	52800404 	addi	r10,r10,16
   120e4:	493ffc15 	stw	r4,-16(r9)
   120e8:	1bbfef1e 	bne	r3,r14,120a8 <_gp+0xffff1d9c>
   120ec:	79000044 	addi	r4,r15,1
   120f0:	2008913a 	slli	r4,r4,4
   120f4:	328003cc 	andi	r10,r6,15
   120f8:	02c000c4 	movi	r11,3
   120fc:	1107883a 	add	r3,r2,r4
   12100:	290b883a 	add	r5,r5,r4
   12104:	5a801e2e 	bgeu	r11,r10,12180 <memmove+0x154>
   12108:	1813883a 	mov	r9,r3
   1210c:	2811883a 	mov	r8,r5
   12110:	500f883a 	mov	r7,r10
   12114:	41000017 	ldw	r4,0(r8)
   12118:	4a400104 	addi	r9,r9,4
   1211c:	39ffff04 	addi	r7,r7,-4
   12120:	493fff15 	stw	r4,-4(r9)
   12124:	42000104 	addi	r8,r8,4
   12128:	59fffa36 	bltu	r11,r7,12114 <_gp+0xffff1e08>
   1212c:	513fff04 	addi	r4,r10,-4
   12130:	2008d0ba 	srli	r4,r4,2
   12134:	318000cc 	andi	r6,r6,3
   12138:	21000044 	addi	r4,r4,1
   1213c:	2109883a 	add	r4,r4,r4
   12140:	2109883a 	add	r4,r4,r4
   12144:	1907883a 	add	r3,r3,r4
   12148:	290b883a 	add	r5,r5,r4
   1214c:	30000b26 	beq	r6,zero,1217c <memmove+0x150>
   12150:	198d883a 	add	r6,r3,r6
   12154:	29c00003 	ldbu	r7,0(r5)
   12158:	18c00044 	addi	r3,r3,1
   1215c:	29400044 	addi	r5,r5,1
   12160:	19ffffc5 	stb	r7,-1(r3)
   12164:	19bffb1e 	bne	r3,r6,12154 <_gp+0xffff1e48>
   12168:	f800283a 	ret
   1216c:	1007883a 	mov	r3,r2
   12170:	003ff606 	br	1214c <_gp+0xffff1e40>
   12174:	1007883a 	mov	r3,r2
   12178:	003ff506 	br	12150 <_gp+0xffff1e44>
   1217c:	f800283a 	ret
   12180:	500d883a 	mov	r6,r10
   12184:	003ff106 	br	1214c <_gp+0xffff1e40>

00012188 <memset>:
   12188:	20c000cc 	andi	r3,r4,3
   1218c:	2005883a 	mov	r2,r4
   12190:	18004426 	beq	r3,zero,122a4 <memset+0x11c>
   12194:	31ffffc4 	addi	r7,r6,-1
   12198:	30004026 	beq	r6,zero,1229c <memset+0x114>
   1219c:	2813883a 	mov	r9,r5
   121a0:	200d883a 	mov	r6,r4
   121a4:	2007883a 	mov	r3,r4
   121a8:	00000406 	br	121bc <memset+0x34>
   121ac:	3a3fffc4 	addi	r8,r7,-1
   121b0:	31800044 	addi	r6,r6,1
   121b4:	38003926 	beq	r7,zero,1229c <memset+0x114>
   121b8:	400f883a 	mov	r7,r8
   121bc:	18c00044 	addi	r3,r3,1
   121c0:	32400005 	stb	r9,0(r6)
   121c4:	1a0000cc 	andi	r8,r3,3
   121c8:	403ff81e 	bne	r8,zero,121ac <_gp+0xffff1ea0>
   121cc:	010000c4 	movi	r4,3
   121d0:	21c02d2e 	bgeu	r4,r7,12288 <memset+0x100>
   121d4:	29003fcc 	andi	r4,r5,255
   121d8:	200c923a 	slli	r6,r4,8
   121dc:	3108b03a 	or	r4,r6,r4
   121e0:	200c943a 	slli	r6,r4,16
   121e4:	218cb03a 	or	r6,r4,r6
   121e8:	010003c4 	movi	r4,15
   121ec:	21c0182e 	bgeu	r4,r7,12250 <memset+0xc8>
   121f0:	3b3ffc04 	addi	r12,r7,-16
   121f4:	6018d13a 	srli	r12,r12,4
   121f8:	1a000104 	addi	r8,r3,4
   121fc:	1ac00204 	addi	r11,r3,8
   12200:	6008913a 	slli	r4,r12,4
   12204:	1a800304 	addi	r10,r3,12
   12208:	1813883a 	mov	r9,r3
   1220c:	21000504 	addi	r4,r4,20
   12210:	1909883a 	add	r4,r3,r4
   12214:	49800015 	stw	r6,0(r9)
   12218:	41800015 	stw	r6,0(r8)
   1221c:	59800015 	stw	r6,0(r11)
   12220:	51800015 	stw	r6,0(r10)
   12224:	42000404 	addi	r8,r8,16
   12228:	4a400404 	addi	r9,r9,16
   1222c:	5ac00404 	addi	r11,r11,16
   12230:	52800404 	addi	r10,r10,16
   12234:	413ff71e 	bne	r8,r4,12214 <_gp+0xffff1f08>
   12238:	63000044 	addi	r12,r12,1
   1223c:	6018913a 	slli	r12,r12,4
   12240:	39c003cc 	andi	r7,r7,15
   12244:	010000c4 	movi	r4,3
   12248:	1b07883a 	add	r3,r3,r12
   1224c:	21c00e2e 	bgeu	r4,r7,12288 <memset+0x100>
   12250:	1813883a 	mov	r9,r3
   12254:	3811883a 	mov	r8,r7
   12258:	010000c4 	movi	r4,3
   1225c:	49800015 	stw	r6,0(r9)
   12260:	423fff04 	addi	r8,r8,-4
   12264:	4a400104 	addi	r9,r9,4
   12268:	223ffc36 	bltu	r4,r8,1225c <_gp+0xffff1f50>
   1226c:	393fff04 	addi	r4,r7,-4
   12270:	2008d0ba 	srli	r4,r4,2
   12274:	39c000cc 	andi	r7,r7,3
   12278:	21000044 	addi	r4,r4,1
   1227c:	2109883a 	add	r4,r4,r4
   12280:	2109883a 	add	r4,r4,r4
   12284:	1907883a 	add	r3,r3,r4
   12288:	38000526 	beq	r7,zero,122a0 <memset+0x118>
   1228c:	19cf883a 	add	r7,r3,r7
   12290:	19400005 	stb	r5,0(r3)
   12294:	18c00044 	addi	r3,r3,1
   12298:	38fffd1e 	bne	r7,r3,12290 <_gp+0xffff1f84>
   1229c:	f800283a 	ret
   122a0:	f800283a 	ret
   122a4:	2007883a 	mov	r3,r4
   122a8:	300f883a 	mov	r7,r6
   122ac:	003fc706 	br	121cc <_gp+0xffff1ec0>

000122b0 <_realloc_r>:
   122b0:	defff604 	addi	sp,sp,-40
   122b4:	dc800215 	stw	r18,8(sp)
   122b8:	dfc00915 	stw	ra,36(sp)
   122bc:	df000815 	stw	fp,32(sp)
   122c0:	ddc00715 	stw	r23,28(sp)
   122c4:	dd800615 	stw	r22,24(sp)
   122c8:	dd400515 	stw	r21,20(sp)
   122cc:	dd000415 	stw	r20,16(sp)
   122d0:	dcc00315 	stw	r19,12(sp)
   122d4:	dc400115 	stw	r17,4(sp)
   122d8:	dc000015 	stw	r16,0(sp)
   122dc:	3025883a 	mov	r18,r6
   122e0:	2800b726 	beq	r5,zero,125c0 <_realloc_r+0x310>
   122e4:	282b883a 	mov	r21,r5
   122e8:	2029883a 	mov	r20,r4
   122ec:	0013f880 	call	13f88 <__malloc_lock>
   122f0:	a8bfff17 	ldw	r2,-4(r21)
   122f4:	043fff04 	movi	r16,-4
   122f8:	90c002c4 	addi	r3,r18,11
   122fc:	01000584 	movi	r4,22
   12300:	acfffe04 	addi	r19,r21,-8
   12304:	1420703a 	and	r16,r2,r16
   12308:	20c0332e 	bgeu	r4,r3,123d8 <_realloc_r+0x128>
   1230c:	047ffe04 	movi	r17,-8
   12310:	1c62703a 	and	r17,r3,r17
   12314:	8807883a 	mov	r3,r17
   12318:	88005816 	blt	r17,zero,1247c <_realloc_r+0x1cc>
   1231c:	8c805736 	bltu	r17,r18,1247c <_realloc_r+0x1cc>
   12320:	80c0300e 	bge	r16,r3,123e4 <_realloc_r+0x134>
   12324:	07000074 	movhi	fp,1
   12328:	e71b3404 	addi	fp,fp,27856
   1232c:	e1c00217 	ldw	r7,8(fp)
   12330:	9c09883a 	add	r4,r19,r16
   12334:	22000117 	ldw	r8,4(r4)
   12338:	21c06326 	beq	r4,r7,124c8 <_realloc_r+0x218>
   1233c:	017fff84 	movi	r5,-2
   12340:	414a703a 	and	r5,r8,r5
   12344:	214b883a 	add	r5,r4,r5
   12348:	29800117 	ldw	r6,4(r5)
   1234c:	3180004c 	andi	r6,r6,1
   12350:	30003f26 	beq	r6,zero,12450 <_realloc_r+0x1a0>
   12354:	1080004c 	andi	r2,r2,1
   12358:	10008326 	beq	r2,zero,12568 <_realloc_r+0x2b8>
   1235c:	900b883a 	mov	r5,r18
   12360:	a009883a 	mov	r4,r20
   12364:	00115f40 	call	115f4 <_malloc_r>
   12368:	1025883a 	mov	r18,r2
   1236c:	10011e26 	beq	r2,zero,127e8 <_realloc_r+0x538>
   12370:	a93fff17 	ldw	r4,-4(r21)
   12374:	10fffe04 	addi	r3,r2,-8
   12378:	00bfff84 	movi	r2,-2
   1237c:	2084703a 	and	r2,r4,r2
   12380:	9885883a 	add	r2,r19,r2
   12384:	1880ee26 	beq	r3,r2,12740 <_realloc_r+0x490>
   12388:	81bfff04 	addi	r6,r16,-4
   1238c:	00800904 	movi	r2,36
   12390:	1180b836 	bltu	r2,r6,12674 <_realloc_r+0x3c4>
   12394:	00c004c4 	movi	r3,19
   12398:	19809636 	bltu	r3,r6,125f4 <_realloc_r+0x344>
   1239c:	9005883a 	mov	r2,r18
   123a0:	a807883a 	mov	r3,r21
   123a4:	19000017 	ldw	r4,0(r3)
   123a8:	11000015 	stw	r4,0(r2)
   123ac:	19000117 	ldw	r4,4(r3)
   123b0:	11000115 	stw	r4,4(r2)
   123b4:	18c00217 	ldw	r3,8(r3)
   123b8:	10c00215 	stw	r3,8(r2)
   123bc:	a80b883a 	mov	r5,r21
   123c0:	a009883a 	mov	r4,r20
   123c4:	001307c0 	call	1307c <_free_r>
   123c8:	a009883a 	mov	r4,r20
   123cc:	0013fac0 	call	13fac <__malloc_unlock>
   123d0:	9005883a 	mov	r2,r18
   123d4:	00001206 	br	12420 <_realloc_r+0x170>
   123d8:	00c00404 	movi	r3,16
   123dc:	1823883a 	mov	r17,r3
   123e0:	003fce06 	br	1231c <_gp+0xffff2010>
   123e4:	a825883a 	mov	r18,r21
   123e8:	8445c83a 	sub	r2,r16,r17
   123ec:	00c003c4 	movi	r3,15
   123f0:	18802636 	bltu	r3,r2,1248c <_realloc_r+0x1dc>
   123f4:	99800117 	ldw	r6,4(r19)
   123f8:	9c07883a 	add	r3,r19,r16
   123fc:	3180004c 	andi	r6,r6,1
   12400:	3420b03a 	or	r16,r6,r16
   12404:	9c000115 	stw	r16,4(r19)
   12408:	18800117 	ldw	r2,4(r3)
   1240c:	10800054 	ori	r2,r2,1
   12410:	18800115 	stw	r2,4(r3)
   12414:	a009883a 	mov	r4,r20
   12418:	0013fac0 	call	13fac <__malloc_unlock>
   1241c:	9005883a 	mov	r2,r18
   12420:	dfc00917 	ldw	ra,36(sp)
   12424:	df000817 	ldw	fp,32(sp)
   12428:	ddc00717 	ldw	r23,28(sp)
   1242c:	dd800617 	ldw	r22,24(sp)
   12430:	dd400517 	ldw	r21,20(sp)
   12434:	dd000417 	ldw	r20,16(sp)
   12438:	dcc00317 	ldw	r19,12(sp)
   1243c:	dc800217 	ldw	r18,8(sp)
   12440:	dc400117 	ldw	r17,4(sp)
   12444:	dc000017 	ldw	r16,0(sp)
   12448:	dec00a04 	addi	sp,sp,40
   1244c:	f800283a 	ret
   12450:	017fff04 	movi	r5,-4
   12454:	414a703a 	and	r5,r8,r5
   12458:	814d883a 	add	r6,r16,r5
   1245c:	30c01f16 	blt	r6,r3,124dc <_realloc_r+0x22c>
   12460:	20800317 	ldw	r2,12(r4)
   12464:	20c00217 	ldw	r3,8(r4)
   12468:	a825883a 	mov	r18,r21
   1246c:	3021883a 	mov	r16,r6
   12470:	18800315 	stw	r2,12(r3)
   12474:	10c00215 	stw	r3,8(r2)
   12478:	003fdb06 	br	123e8 <_gp+0xffff20dc>
   1247c:	00800304 	movi	r2,12
   12480:	a0800015 	stw	r2,0(r20)
   12484:	0005883a 	mov	r2,zero
   12488:	003fe506 	br	12420 <_gp+0xffff2114>
   1248c:	98c00117 	ldw	r3,4(r19)
   12490:	9c4b883a 	add	r5,r19,r17
   12494:	11000054 	ori	r4,r2,1
   12498:	18c0004c 	andi	r3,r3,1
   1249c:	1c62b03a 	or	r17,r3,r17
   124a0:	9c400115 	stw	r17,4(r19)
   124a4:	29000115 	stw	r4,4(r5)
   124a8:	2885883a 	add	r2,r5,r2
   124ac:	10c00117 	ldw	r3,4(r2)
   124b0:	29400204 	addi	r5,r5,8
   124b4:	a009883a 	mov	r4,r20
   124b8:	18c00054 	ori	r3,r3,1
   124bc:	10c00115 	stw	r3,4(r2)
   124c0:	001307c0 	call	1307c <_free_r>
   124c4:	003fd306 	br	12414 <_gp+0xffff2108>
   124c8:	017fff04 	movi	r5,-4
   124cc:	414a703a 	and	r5,r8,r5
   124d0:	89800404 	addi	r6,r17,16
   124d4:	8151883a 	add	r8,r16,r5
   124d8:	4180590e 	bge	r8,r6,12640 <_realloc_r+0x390>
   124dc:	1080004c 	andi	r2,r2,1
   124e0:	103f9e1e 	bne	r2,zero,1235c <_gp+0xffff2050>
   124e4:	adbffe17 	ldw	r22,-8(r21)
   124e8:	00bfff04 	movi	r2,-4
   124ec:	9dadc83a 	sub	r22,r19,r22
   124f0:	b1800117 	ldw	r6,4(r22)
   124f4:	3084703a 	and	r2,r6,r2
   124f8:	20002026 	beq	r4,zero,1257c <_realloc_r+0x2cc>
   124fc:	80af883a 	add	r23,r16,r2
   12500:	b96f883a 	add	r23,r23,r5
   12504:	21c05f26 	beq	r4,r7,12684 <_realloc_r+0x3d4>
   12508:	b8c01c16 	blt	r23,r3,1257c <_realloc_r+0x2cc>
   1250c:	20800317 	ldw	r2,12(r4)
   12510:	20c00217 	ldw	r3,8(r4)
   12514:	81bfff04 	addi	r6,r16,-4
   12518:	01000904 	movi	r4,36
   1251c:	18800315 	stw	r2,12(r3)
   12520:	10c00215 	stw	r3,8(r2)
   12524:	b0c00217 	ldw	r3,8(r22)
   12528:	b0800317 	ldw	r2,12(r22)
   1252c:	b4800204 	addi	r18,r22,8
   12530:	18800315 	stw	r2,12(r3)
   12534:	10c00215 	stw	r3,8(r2)
   12538:	21801b36 	bltu	r4,r6,125a8 <_realloc_r+0x2f8>
   1253c:	008004c4 	movi	r2,19
   12540:	1180352e 	bgeu	r2,r6,12618 <_realloc_r+0x368>
   12544:	a8800017 	ldw	r2,0(r21)
   12548:	b0800215 	stw	r2,8(r22)
   1254c:	a8800117 	ldw	r2,4(r21)
   12550:	b0800315 	stw	r2,12(r22)
   12554:	008006c4 	movi	r2,27
   12558:	11807f36 	bltu	r2,r6,12758 <_realloc_r+0x4a8>
   1255c:	b0800404 	addi	r2,r22,16
   12560:	ad400204 	addi	r21,r21,8
   12564:	00002d06 	br	1261c <_realloc_r+0x36c>
   12568:	adbffe17 	ldw	r22,-8(r21)
   1256c:	00bfff04 	movi	r2,-4
   12570:	9dadc83a 	sub	r22,r19,r22
   12574:	b1000117 	ldw	r4,4(r22)
   12578:	2084703a 	and	r2,r4,r2
   1257c:	b03f7726 	beq	r22,zero,1235c <_gp+0xffff2050>
   12580:	80af883a 	add	r23,r16,r2
   12584:	b8ff7516 	blt	r23,r3,1235c <_gp+0xffff2050>
   12588:	b0800317 	ldw	r2,12(r22)
   1258c:	b0c00217 	ldw	r3,8(r22)
   12590:	81bfff04 	addi	r6,r16,-4
   12594:	01000904 	movi	r4,36
   12598:	18800315 	stw	r2,12(r3)
   1259c:	10c00215 	stw	r3,8(r2)
   125a0:	b4800204 	addi	r18,r22,8
   125a4:	21bfe52e 	bgeu	r4,r6,1253c <_gp+0xffff2230>
   125a8:	a80b883a 	mov	r5,r21
   125ac:	9009883a 	mov	r4,r18
   125b0:	001202c0 	call	1202c <memmove>
   125b4:	b821883a 	mov	r16,r23
   125b8:	b027883a 	mov	r19,r22
   125bc:	003f8a06 	br	123e8 <_gp+0xffff20dc>
   125c0:	300b883a 	mov	r5,r6
   125c4:	dfc00917 	ldw	ra,36(sp)
   125c8:	df000817 	ldw	fp,32(sp)
   125cc:	ddc00717 	ldw	r23,28(sp)
   125d0:	dd800617 	ldw	r22,24(sp)
   125d4:	dd400517 	ldw	r21,20(sp)
   125d8:	dd000417 	ldw	r20,16(sp)
   125dc:	dcc00317 	ldw	r19,12(sp)
   125e0:	dc800217 	ldw	r18,8(sp)
   125e4:	dc400117 	ldw	r17,4(sp)
   125e8:	dc000017 	ldw	r16,0(sp)
   125ec:	dec00a04 	addi	sp,sp,40
   125f0:	00115f41 	jmpi	115f4 <_malloc_r>
   125f4:	a8c00017 	ldw	r3,0(r21)
   125f8:	90c00015 	stw	r3,0(r18)
   125fc:	a8c00117 	ldw	r3,4(r21)
   12600:	90c00115 	stw	r3,4(r18)
   12604:	00c006c4 	movi	r3,27
   12608:	19804536 	bltu	r3,r6,12720 <_realloc_r+0x470>
   1260c:	90800204 	addi	r2,r18,8
   12610:	a8c00204 	addi	r3,r21,8
   12614:	003f6306 	br	123a4 <_gp+0xffff2098>
   12618:	9005883a 	mov	r2,r18
   1261c:	a8c00017 	ldw	r3,0(r21)
   12620:	b821883a 	mov	r16,r23
   12624:	b027883a 	mov	r19,r22
   12628:	10c00015 	stw	r3,0(r2)
   1262c:	a8c00117 	ldw	r3,4(r21)
   12630:	10c00115 	stw	r3,4(r2)
   12634:	a8c00217 	ldw	r3,8(r21)
   12638:	10c00215 	stw	r3,8(r2)
   1263c:	003f6a06 	br	123e8 <_gp+0xffff20dc>
   12640:	9c67883a 	add	r19,r19,r17
   12644:	4445c83a 	sub	r2,r8,r17
   12648:	e4c00215 	stw	r19,8(fp)
   1264c:	10800054 	ori	r2,r2,1
   12650:	98800115 	stw	r2,4(r19)
   12654:	a8bfff17 	ldw	r2,-4(r21)
   12658:	a009883a 	mov	r4,r20
   1265c:	1080004c 	andi	r2,r2,1
   12660:	1462b03a 	or	r17,r2,r17
   12664:	ac7fff15 	stw	r17,-4(r21)
   12668:	0013fac0 	call	13fac <__malloc_unlock>
   1266c:	a805883a 	mov	r2,r21
   12670:	003f6b06 	br	12420 <_gp+0xffff2114>
   12674:	a80b883a 	mov	r5,r21
   12678:	9009883a 	mov	r4,r18
   1267c:	001202c0 	call	1202c <memmove>
   12680:	003f4e06 	br	123bc <_gp+0xffff20b0>
   12684:	89000404 	addi	r4,r17,16
   12688:	b93fbc16 	blt	r23,r4,1257c <_gp+0xffff2270>
   1268c:	b0800317 	ldw	r2,12(r22)
   12690:	b0c00217 	ldw	r3,8(r22)
   12694:	81bfff04 	addi	r6,r16,-4
   12698:	01000904 	movi	r4,36
   1269c:	18800315 	stw	r2,12(r3)
   126a0:	10c00215 	stw	r3,8(r2)
   126a4:	b4800204 	addi	r18,r22,8
   126a8:	21804336 	bltu	r4,r6,127b8 <_realloc_r+0x508>
   126ac:	008004c4 	movi	r2,19
   126b0:	11803f2e 	bgeu	r2,r6,127b0 <_realloc_r+0x500>
   126b4:	a8800017 	ldw	r2,0(r21)
   126b8:	b0800215 	stw	r2,8(r22)
   126bc:	a8800117 	ldw	r2,4(r21)
   126c0:	b0800315 	stw	r2,12(r22)
   126c4:	008006c4 	movi	r2,27
   126c8:	11803f36 	bltu	r2,r6,127c8 <_realloc_r+0x518>
   126cc:	b0800404 	addi	r2,r22,16
   126d0:	ad400204 	addi	r21,r21,8
   126d4:	a8c00017 	ldw	r3,0(r21)
   126d8:	10c00015 	stw	r3,0(r2)
   126dc:	a8c00117 	ldw	r3,4(r21)
   126e0:	10c00115 	stw	r3,4(r2)
   126e4:	a8c00217 	ldw	r3,8(r21)
   126e8:	10c00215 	stw	r3,8(r2)
   126ec:	b447883a 	add	r3,r22,r17
   126f0:	bc45c83a 	sub	r2,r23,r17
   126f4:	e0c00215 	stw	r3,8(fp)
   126f8:	10800054 	ori	r2,r2,1
   126fc:	18800115 	stw	r2,4(r3)
   12700:	b0800117 	ldw	r2,4(r22)
   12704:	a009883a 	mov	r4,r20
   12708:	1080004c 	andi	r2,r2,1
   1270c:	1462b03a 	or	r17,r2,r17
   12710:	b4400115 	stw	r17,4(r22)
   12714:	0013fac0 	call	13fac <__malloc_unlock>
   12718:	9005883a 	mov	r2,r18
   1271c:	003f4006 	br	12420 <_gp+0xffff2114>
   12720:	a8c00217 	ldw	r3,8(r21)
   12724:	90c00215 	stw	r3,8(r18)
   12728:	a8c00317 	ldw	r3,12(r21)
   1272c:	90c00315 	stw	r3,12(r18)
   12730:	30801126 	beq	r6,r2,12778 <_realloc_r+0x4c8>
   12734:	90800404 	addi	r2,r18,16
   12738:	a8c00404 	addi	r3,r21,16
   1273c:	003f1906 	br	123a4 <_gp+0xffff2098>
   12740:	90ffff17 	ldw	r3,-4(r18)
   12744:	00bfff04 	movi	r2,-4
   12748:	a825883a 	mov	r18,r21
   1274c:	1884703a 	and	r2,r3,r2
   12750:	80a1883a 	add	r16,r16,r2
   12754:	003f2406 	br	123e8 <_gp+0xffff20dc>
   12758:	a8800217 	ldw	r2,8(r21)
   1275c:	b0800415 	stw	r2,16(r22)
   12760:	a8800317 	ldw	r2,12(r21)
   12764:	b0800515 	stw	r2,20(r22)
   12768:	31000a26 	beq	r6,r4,12794 <_realloc_r+0x4e4>
   1276c:	b0800604 	addi	r2,r22,24
   12770:	ad400404 	addi	r21,r21,16
   12774:	003fa906 	br	1261c <_gp+0xffff2310>
   12778:	a9000417 	ldw	r4,16(r21)
   1277c:	90800604 	addi	r2,r18,24
   12780:	a8c00604 	addi	r3,r21,24
   12784:	91000415 	stw	r4,16(r18)
   12788:	a9000517 	ldw	r4,20(r21)
   1278c:	91000515 	stw	r4,20(r18)
   12790:	003f0406 	br	123a4 <_gp+0xffff2098>
   12794:	a8c00417 	ldw	r3,16(r21)
   12798:	ad400604 	addi	r21,r21,24
   1279c:	b0800804 	addi	r2,r22,32
   127a0:	b0c00615 	stw	r3,24(r22)
   127a4:	a8ffff17 	ldw	r3,-4(r21)
   127a8:	b0c00715 	stw	r3,28(r22)
   127ac:	003f9b06 	br	1261c <_gp+0xffff2310>
   127b0:	9005883a 	mov	r2,r18
   127b4:	003fc706 	br	126d4 <_gp+0xffff23c8>
   127b8:	a80b883a 	mov	r5,r21
   127bc:	9009883a 	mov	r4,r18
   127c0:	001202c0 	call	1202c <memmove>
   127c4:	003fc906 	br	126ec <_gp+0xffff23e0>
   127c8:	a8800217 	ldw	r2,8(r21)
   127cc:	b0800415 	stw	r2,16(r22)
   127d0:	a8800317 	ldw	r2,12(r21)
   127d4:	b0800515 	stw	r2,20(r22)
   127d8:	31000726 	beq	r6,r4,127f8 <_realloc_r+0x548>
   127dc:	b0800604 	addi	r2,r22,24
   127e0:	ad400404 	addi	r21,r21,16
   127e4:	003fbb06 	br	126d4 <_gp+0xffff23c8>
   127e8:	a009883a 	mov	r4,r20
   127ec:	0013fac0 	call	13fac <__malloc_unlock>
   127f0:	0005883a 	mov	r2,zero
   127f4:	003f0a06 	br	12420 <_gp+0xffff2114>
   127f8:	a8c00417 	ldw	r3,16(r21)
   127fc:	ad400604 	addi	r21,r21,24
   12800:	b0800804 	addi	r2,r22,32
   12804:	b0c00615 	stw	r3,24(r22)
   12808:	a8ffff17 	ldw	r3,-4(r21)
   1280c:	b0c00715 	stw	r3,28(r22)
   12810:	003fb006 	br	126d4 <_gp+0xffff23c8>

00012814 <_sbrk_r>:
   12814:	defffd04 	addi	sp,sp,-12
   12818:	dc000015 	stw	r16,0(sp)
   1281c:	040000b4 	movhi	r16,2
   12820:	dc400115 	stw	r17,4(sp)
   12824:	84277f04 	addi	r16,r16,-25092
   12828:	2023883a 	mov	r17,r4
   1282c:	2809883a 	mov	r4,r5
   12830:	dfc00215 	stw	ra,8(sp)
   12834:	80000015 	stw	zero,0(r16)
   12838:	00143fc0 	call	143fc <sbrk>
   1283c:	00ffffc4 	movi	r3,-1
   12840:	10c00526 	beq	r2,r3,12858 <_sbrk_r+0x44>
   12844:	dfc00217 	ldw	ra,8(sp)
   12848:	dc400117 	ldw	r17,4(sp)
   1284c:	dc000017 	ldw	r16,0(sp)
   12850:	dec00304 	addi	sp,sp,12
   12854:	f800283a 	ret
   12858:	80c00017 	ldw	r3,0(r16)
   1285c:	183ff926 	beq	r3,zero,12844 <_gp+0xffff2538>
   12860:	88c00015 	stw	r3,0(r17)
   12864:	003ff706 	br	12844 <_gp+0xffff2538>

00012868 <__sread>:
   12868:	defffe04 	addi	sp,sp,-8
   1286c:	dc000015 	stw	r16,0(sp)
   12870:	2821883a 	mov	r16,r5
   12874:	2940038f 	ldh	r5,14(r5)
   12878:	dfc00115 	stw	ra,4(sp)
   1287c:	00135a80 	call	135a8 <_read_r>
   12880:	10000716 	blt	r2,zero,128a0 <__sread+0x38>
   12884:	80c01417 	ldw	r3,80(r16)
   12888:	1887883a 	add	r3,r3,r2
   1288c:	80c01415 	stw	r3,80(r16)
   12890:	dfc00117 	ldw	ra,4(sp)
   12894:	dc000017 	ldw	r16,0(sp)
   12898:	dec00204 	addi	sp,sp,8
   1289c:	f800283a 	ret
   128a0:	80c0030b 	ldhu	r3,12(r16)
   128a4:	18fbffcc 	andi	r3,r3,61439
   128a8:	80c0030d 	sth	r3,12(r16)
   128ac:	dfc00117 	ldw	ra,4(sp)
   128b0:	dc000017 	ldw	r16,0(sp)
   128b4:	dec00204 	addi	sp,sp,8
   128b8:	f800283a 	ret

000128bc <__seofread>:
   128bc:	0005883a 	mov	r2,zero
   128c0:	f800283a 	ret

000128c4 <__swrite>:
   128c4:	2880030b 	ldhu	r2,12(r5)
   128c8:	defffb04 	addi	sp,sp,-20
   128cc:	dcc00315 	stw	r19,12(sp)
   128d0:	dc800215 	stw	r18,8(sp)
   128d4:	dc400115 	stw	r17,4(sp)
   128d8:	dc000015 	stw	r16,0(sp)
   128dc:	dfc00415 	stw	ra,16(sp)
   128e0:	10c0400c 	andi	r3,r2,256
   128e4:	2821883a 	mov	r16,r5
   128e8:	2023883a 	mov	r17,r4
   128ec:	3025883a 	mov	r18,r6
   128f0:	3827883a 	mov	r19,r7
   128f4:	18000526 	beq	r3,zero,1290c <__swrite+0x48>
   128f8:	2940038f 	ldh	r5,14(r5)
   128fc:	01c00084 	movi	r7,2
   12900:	000d883a 	mov	r6,zero
   12904:	001338c0 	call	1338c <_lseek_r>
   12908:	8080030b 	ldhu	r2,12(r16)
   1290c:	8140038f 	ldh	r5,14(r16)
   12910:	10bbffcc 	andi	r2,r2,61439
   12914:	980f883a 	mov	r7,r19
   12918:	900d883a 	mov	r6,r18
   1291c:	8809883a 	mov	r4,r17
   12920:	8080030d 	sth	r2,12(r16)
   12924:	dfc00417 	ldw	ra,16(sp)
   12928:	dcc00317 	ldw	r19,12(sp)
   1292c:	dc800217 	ldw	r18,8(sp)
   12930:	dc400117 	ldw	r17,4(sp)
   12934:	dc000017 	ldw	r16,0(sp)
   12938:	dec00504 	addi	sp,sp,20
   1293c:	00129a41 	jmpi	129a4 <_write_r>

00012940 <__sseek>:
   12940:	defffe04 	addi	sp,sp,-8
   12944:	dc000015 	stw	r16,0(sp)
   12948:	2821883a 	mov	r16,r5
   1294c:	2940038f 	ldh	r5,14(r5)
   12950:	dfc00115 	stw	ra,4(sp)
   12954:	001338c0 	call	1338c <_lseek_r>
   12958:	00ffffc4 	movi	r3,-1
   1295c:	10c00826 	beq	r2,r3,12980 <__sseek+0x40>
   12960:	80c0030b 	ldhu	r3,12(r16)
   12964:	80801415 	stw	r2,80(r16)
   12968:	18c40014 	ori	r3,r3,4096
   1296c:	80c0030d 	sth	r3,12(r16)
   12970:	dfc00117 	ldw	ra,4(sp)
   12974:	dc000017 	ldw	r16,0(sp)
   12978:	dec00204 	addi	sp,sp,8
   1297c:	f800283a 	ret
   12980:	80c0030b 	ldhu	r3,12(r16)
   12984:	18fbffcc 	andi	r3,r3,61439
   12988:	80c0030d 	sth	r3,12(r16)
   1298c:	dfc00117 	ldw	ra,4(sp)
   12990:	dc000017 	ldw	r16,0(sp)
   12994:	dec00204 	addi	sp,sp,8
   12998:	f800283a 	ret

0001299c <__sclose>:
   1299c:	2940038f 	ldh	r5,14(r5)
   129a0:	0012b581 	jmpi	12b58 <_close_r>

000129a4 <_write_r>:
   129a4:	defffd04 	addi	sp,sp,-12
   129a8:	2805883a 	mov	r2,r5
   129ac:	dc000015 	stw	r16,0(sp)
   129b0:	040000b4 	movhi	r16,2
   129b4:	dc400115 	stw	r17,4(sp)
   129b8:	300b883a 	mov	r5,r6
   129bc:	84277f04 	addi	r16,r16,-25092
   129c0:	2023883a 	mov	r17,r4
   129c4:	380d883a 	mov	r6,r7
   129c8:	1009883a 	mov	r4,r2
   129cc:	dfc00215 	stw	ra,8(sp)
   129d0:	80000015 	stw	zero,0(r16)
   129d4:	00144e80 	call	144e8 <write>
   129d8:	00ffffc4 	movi	r3,-1
   129dc:	10c00526 	beq	r2,r3,129f4 <_write_r+0x50>
   129e0:	dfc00217 	ldw	ra,8(sp)
   129e4:	dc400117 	ldw	r17,4(sp)
   129e8:	dc000017 	ldw	r16,0(sp)
   129ec:	dec00304 	addi	sp,sp,12
   129f0:	f800283a 	ret
   129f4:	80c00017 	ldw	r3,0(r16)
   129f8:	183ff926 	beq	r3,zero,129e0 <_gp+0xffff26d4>
   129fc:	88c00015 	stw	r3,0(r17)
   12a00:	003ff706 	br	129e0 <_gp+0xffff26d4>

00012a04 <__swsetup_r>:
   12a04:	008000b4 	movhi	r2,2
   12a08:	defffd04 	addi	sp,sp,-12
   12a0c:	10a0c504 	addi	r2,r2,-31980
   12a10:	dc400115 	stw	r17,4(sp)
   12a14:	2023883a 	mov	r17,r4
   12a18:	11000017 	ldw	r4,0(r2)
   12a1c:	dc000015 	stw	r16,0(sp)
   12a20:	dfc00215 	stw	ra,8(sp)
   12a24:	2821883a 	mov	r16,r5
   12a28:	20000226 	beq	r4,zero,12a34 <__swsetup_r+0x30>
   12a2c:	20800e17 	ldw	r2,56(r4)
   12a30:	10003126 	beq	r2,zero,12af8 <__swsetup_r+0xf4>
   12a34:	8080030b 	ldhu	r2,12(r16)
   12a38:	10c0020c 	andi	r3,r2,8
   12a3c:	1009883a 	mov	r4,r2
   12a40:	18000f26 	beq	r3,zero,12a80 <__swsetup_r+0x7c>
   12a44:	80c00417 	ldw	r3,16(r16)
   12a48:	18001526 	beq	r3,zero,12aa0 <__swsetup_r+0x9c>
   12a4c:	1100004c 	andi	r4,r2,1
   12a50:	20001c1e 	bne	r4,zero,12ac4 <__swsetup_r+0xc0>
   12a54:	1080008c 	andi	r2,r2,2
   12a58:	1000291e 	bne	r2,zero,12b00 <__swsetup_r+0xfc>
   12a5c:	80800517 	ldw	r2,20(r16)
   12a60:	80800215 	stw	r2,8(r16)
   12a64:	18001c26 	beq	r3,zero,12ad8 <__swsetup_r+0xd4>
   12a68:	0005883a 	mov	r2,zero
   12a6c:	dfc00217 	ldw	ra,8(sp)
   12a70:	dc400117 	ldw	r17,4(sp)
   12a74:	dc000017 	ldw	r16,0(sp)
   12a78:	dec00304 	addi	sp,sp,12
   12a7c:	f800283a 	ret
   12a80:	2080040c 	andi	r2,r4,16
   12a84:	10002e26 	beq	r2,zero,12b40 <__swsetup_r+0x13c>
   12a88:	2080010c 	andi	r2,r4,4
   12a8c:	10001e1e 	bne	r2,zero,12b08 <__swsetup_r+0x104>
   12a90:	80c00417 	ldw	r3,16(r16)
   12a94:	20800214 	ori	r2,r4,8
   12a98:	8080030d 	sth	r2,12(r16)
   12a9c:	183feb1e 	bne	r3,zero,12a4c <_gp+0xffff2740>
   12aa0:	1100a00c 	andi	r4,r2,640
   12aa4:	01408004 	movi	r5,512
   12aa8:	217fe826 	beq	r4,r5,12a4c <_gp+0xffff2740>
   12aac:	800b883a 	mov	r5,r16
   12ab0:	8809883a 	mov	r4,r17
   12ab4:	00133ec0 	call	133ec <__smakebuf_r>
   12ab8:	8080030b 	ldhu	r2,12(r16)
   12abc:	80c00417 	ldw	r3,16(r16)
   12ac0:	003fe206 	br	12a4c <_gp+0xffff2740>
   12ac4:	80800517 	ldw	r2,20(r16)
   12ac8:	80000215 	stw	zero,8(r16)
   12acc:	0085c83a 	sub	r2,zero,r2
   12ad0:	80800615 	stw	r2,24(r16)
   12ad4:	183fe41e 	bne	r3,zero,12a68 <_gp+0xffff275c>
   12ad8:	80c0030b 	ldhu	r3,12(r16)
   12adc:	0005883a 	mov	r2,zero
   12ae0:	1900200c 	andi	r4,r3,128
   12ae4:	203fe126 	beq	r4,zero,12a6c <_gp+0xffff2760>
   12ae8:	18c01014 	ori	r3,r3,64
   12aec:	80c0030d 	sth	r3,12(r16)
   12af0:	00bfffc4 	movi	r2,-1
   12af4:	003fdd06 	br	12a6c <_gp+0xffff2760>
   12af8:	0010f540 	call	10f54 <__sinit>
   12afc:	003fcd06 	br	12a34 <_gp+0xffff2728>
   12b00:	0005883a 	mov	r2,zero
   12b04:	003fd606 	br	12a60 <_gp+0xffff2754>
   12b08:	81400c17 	ldw	r5,48(r16)
   12b0c:	28000626 	beq	r5,zero,12b28 <__swsetup_r+0x124>
   12b10:	80801004 	addi	r2,r16,64
   12b14:	28800326 	beq	r5,r2,12b24 <__swsetup_r+0x120>
   12b18:	8809883a 	mov	r4,r17
   12b1c:	001307c0 	call	1307c <_free_r>
   12b20:	8100030b 	ldhu	r4,12(r16)
   12b24:	80000c15 	stw	zero,48(r16)
   12b28:	80c00417 	ldw	r3,16(r16)
   12b2c:	00bff6c4 	movi	r2,-37
   12b30:	1108703a 	and	r4,r2,r4
   12b34:	80000115 	stw	zero,4(r16)
   12b38:	80c00015 	stw	r3,0(r16)
   12b3c:	003fd506 	br	12a94 <_gp+0xffff2788>
   12b40:	00800244 	movi	r2,9
   12b44:	88800015 	stw	r2,0(r17)
   12b48:	20801014 	ori	r2,r4,64
   12b4c:	8080030d 	sth	r2,12(r16)
   12b50:	00bfffc4 	movi	r2,-1
   12b54:	003fc506 	br	12a6c <_gp+0xffff2760>

00012b58 <_close_r>:
   12b58:	defffd04 	addi	sp,sp,-12
   12b5c:	dc000015 	stw	r16,0(sp)
   12b60:	040000b4 	movhi	r16,2
   12b64:	dc400115 	stw	r17,4(sp)
   12b68:	84277f04 	addi	r16,r16,-25092
   12b6c:	2023883a 	mov	r17,r4
   12b70:	2809883a 	mov	r4,r5
   12b74:	dfc00215 	stw	ra,8(sp)
   12b78:	80000015 	stw	zero,0(r16)
   12b7c:	00138a80 	call	138a8 <close>
   12b80:	00ffffc4 	movi	r3,-1
   12b84:	10c00526 	beq	r2,r3,12b9c <_close_r+0x44>
   12b88:	dfc00217 	ldw	ra,8(sp)
   12b8c:	dc400117 	ldw	r17,4(sp)
   12b90:	dc000017 	ldw	r16,0(sp)
   12b94:	dec00304 	addi	sp,sp,12
   12b98:	f800283a 	ret
   12b9c:	80c00017 	ldw	r3,0(r16)
   12ba0:	183ff926 	beq	r3,zero,12b88 <_gp+0xffff287c>
   12ba4:	88c00015 	stw	r3,0(r17)
   12ba8:	003ff706 	br	12b88 <_gp+0xffff287c>

00012bac <_fclose_r>:
   12bac:	28003926 	beq	r5,zero,12c94 <_fclose_r+0xe8>
   12bb0:	defffc04 	addi	sp,sp,-16
   12bb4:	dc400115 	stw	r17,4(sp)
   12bb8:	dc000015 	stw	r16,0(sp)
   12bbc:	dfc00315 	stw	ra,12(sp)
   12bc0:	dc800215 	stw	r18,8(sp)
   12bc4:	2023883a 	mov	r17,r4
   12bc8:	2821883a 	mov	r16,r5
   12bcc:	20000226 	beq	r4,zero,12bd8 <_fclose_r+0x2c>
   12bd0:	20800e17 	ldw	r2,56(r4)
   12bd4:	10002726 	beq	r2,zero,12c74 <_fclose_r+0xc8>
   12bd8:	8080030f 	ldh	r2,12(r16)
   12bdc:	1000071e 	bne	r2,zero,12bfc <_fclose_r+0x50>
   12be0:	0005883a 	mov	r2,zero
   12be4:	dfc00317 	ldw	ra,12(sp)
   12be8:	dc800217 	ldw	r18,8(sp)
   12bec:	dc400117 	ldw	r17,4(sp)
   12bf0:	dc000017 	ldw	r16,0(sp)
   12bf4:	dec00404 	addi	sp,sp,16
   12bf8:	f800283a 	ret
   12bfc:	800b883a 	mov	r5,r16
   12c00:	8809883a 	mov	r4,r17
   12c04:	0012cb00 	call	12cb0 <__sflush_r>
   12c08:	1025883a 	mov	r18,r2
   12c0c:	80800b17 	ldw	r2,44(r16)
   12c10:	10000426 	beq	r2,zero,12c24 <_fclose_r+0x78>
   12c14:	81400717 	ldw	r5,28(r16)
   12c18:	8809883a 	mov	r4,r17
   12c1c:	103ee83a 	callr	r2
   12c20:	10001616 	blt	r2,zero,12c7c <_fclose_r+0xd0>
   12c24:	8080030b 	ldhu	r2,12(r16)
   12c28:	1080200c 	andi	r2,r2,128
   12c2c:	1000151e 	bne	r2,zero,12c84 <_fclose_r+0xd8>
   12c30:	81400c17 	ldw	r5,48(r16)
   12c34:	28000526 	beq	r5,zero,12c4c <_fclose_r+0xa0>
   12c38:	80801004 	addi	r2,r16,64
   12c3c:	28800226 	beq	r5,r2,12c48 <_fclose_r+0x9c>
   12c40:	8809883a 	mov	r4,r17
   12c44:	001307c0 	call	1307c <_free_r>
   12c48:	80000c15 	stw	zero,48(r16)
   12c4c:	81401117 	ldw	r5,68(r16)
   12c50:	28000326 	beq	r5,zero,12c60 <_fclose_r+0xb4>
   12c54:	8809883a 	mov	r4,r17
   12c58:	001307c0 	call	1307c <_free_r>
   12c5c:	80001115 	stw	zero,68(r16)
   12c60:	0010f640 	call	10f64 <__sfp_lock_acquire>
   12c64:	8000030d 	sth	zero,12(r16)
   12c68:	0010f680 	call	10f68 <__sfp_lock_release>
   12c6c:	9005883a 	mov	r2,r18
   12c70:	003fdc06 	br	12be4 <_gp+0xffff28d8>
   12c74:	0010f540 	call	10f54 <__sinit>
   12c78:	003fd706 	br	12bd8 <_gp+0xffff28cc>
   12c7c:	04bfffc4 	movi	r18,-1
   12c80:	003fe806 	br	12c24 <_gp+0xffff2918>
   12c84:	81400417 	ldw	r5,16(r16)
   12c88:	8809883a 	mov	r4,r17
   12c8c:	001307c0 	call	1307c <_free_r>
   12c90:	003fe706 	br	12c30 <_gp+0xffff2924>
   12c94:	0005883a 	mov	r2,zero
   12c98:	f800283a 	ret

00012c9c <fclose>:
   12c9c:	008000b4 	movhi	r2,2
   12ca0:	10a0c504 	addi	r2,r2,-31980
   12ca4:	200b883a 	mov	r5,r4
   12ca8:	11000017 	ldw	r4,0(r2)
   12cac:	0012bac1 	jmpi	12bac <_fclose_r>

00012cb0 <__sflush_r>:
   12cb0:	2880030b 	ldhu	r2,12(r5)
   12cb4:	defffb04 	addi	sp,sp,-20
   12cb8:	dcc00315 	stw	r19,12(sp)
   12cbc:	dc400115 	stw	r17,4(sp)
   12cc0:	dfc00415 	stw	ra,16(sp)
   12cc4:	dc800215 	stw	r18,8(sp)
   12cc8:	dc000015 	stw	r16,0(sp)
   12ccc:	10c0020c 	andi	r3,r2,8
   12cd0:	2823883a 	mov	r17,r5
   12cd4:	2027883a 	mov	r19,r4
   12cd8:	1800311e 	bne	r3,zero,12da0 <__sflush_r+0xf0>
   12cdc:	28c00117 	ldw	r3,4(r5)
   12ce0:	10820014 	ori	r2,r2,2048
   12ce4:	2880030d 	sth	r2,12(r5)
   12ce8:	00c04b0e 	bge	zero,r3,12e18 <__sflush_r+0x168>
   12cec:	8a000a17 	ldw	r8,40(r17)
   12cf0:	40002326 	beq	r8,zero,12d80 <__sflush_r+0xd0>
   12cf4:	9c000017 	ldw	r16,0(r19)
   12cf8:	10c4000c 	andi	r3,r2,4096
   12cfc:	98000015 	stw	zero,0(r19)
   12d00:	18004826 	beq	r3,zero,12e24 <__sflush_r+0x174>
   12d04:	89801417 	ldw	r6,80(r17)
   12d08:	10c0010c 	andi	r3,r2,4
   12d0c:	18000626 	beq	r3,zero,12d28 <__sflush_r+0x78>
   12d10:	88c00117 	ldw	r3,4(r17)
   12d14:	88800c17 	ldw	r2,48(r17)
   12d18:	30cdc83a 	sub	r6,r6,r3
   12d1c:	10000226 	beq	r2,zero,12d28 <__sflush_r+0x78>
   12d20:	88800f17 	ldw	r2,60(r17)
   12d24:	308dc83a 	sub	r6,r6,r2
   12d28:	89400717 	ldw	r5,28(r17)
   12d2c:	000f883a 	mov	r7,zero
   12d30:	9809883a 	mov	r4,r19
   12d34:	403ee83a 	callr	r8
   12d38:	00ffffc4 	movi	r3,-1
   12d3c:	10c04426 	beq	r2,r3,12e50 <__sflush_r+0x1a0>
   12d40:	88c0030b 	ldhu	r3,12(r17)
   12d44:	89000417 	ldw	r4,16(r17)
   12d48:	88000115 	stw	zero,4(r17)
   12d4c:	197dffcc 	andi	r5,r3,63487
   12d50:	8940030d 	sth	r5,12(r17)
   12d54:	89000015 	stw	r4,0(r17)
   12d58:	18c4000c 	andi	r3,r3,4096
   12d5c:	18002c1e 	bne	r3,zero,12e10 <__sflush_r+0x160>
   12d60:	89400c17 	ldw	r5,48(r17)
   12d64:	9c000015 	stw	r16,0(r19)
   12d68:	28000526 	beq	r5,zero,12d80 <__sflush_r+0xd0>
   12d6c:	88801004 	addi	r2,r17,64
   12d70:	28800226 	beq	r5,r2,12d7c <__sflush_r+0xcc>
   12d74:	9809883a 	mov	r4,r19
   12d78:	001307c0 	call	1307c <_free_r>
   12d7c:	88000c15 	stw	zero,48(r17)
   12d80:	0005883a 	mov	r2,zero
   12d84:	dfc00417 	ldw	ra,16(sp)
   12d88:	dcc00317 	ldw	r19,12(sp)
   12d8c:	dc800217 	ldw	r18,8(sp)
   12d90:	dc400117 	ldw	r17,4(sp)
   12d94:	dc000017 	ldw	r16,0(sp)
   12d98:	dec00504 	addi	sp,sp,20
   12d9c:	f800283a 	ret
   12da0:	2c800417 	ldw	r18,16(r5)
   12da4:	903ff626 	beq	r18,zero,12d80 <_gp+0xffff2a74>
   12da8:	2c000017 	ldw	r16,0(r5)
   12dac:	108000cc 	andi	r2,r2,3
   12db0:	2c800015 	stw	r18,0(r5)
   12db4:	84a1c83a 	sub	r16,r16,r18
   12db8:	1000131e 	bne	r2,zero,12e08 <__sflush_r+0x158>
   12dbc:	28800517 	ldw	r2,20(r5)
   12dc0:	88800215 	stw	r2,8(r17)
   12dc4:	04000316 	blt	zero,r16,12dd4 <__sflush_r+0x124>
   12dc8:	003fed06 	br	12d80 <_gp+0xffff2a74>
   12dcc:	90a5883a 	add	r18,r18,r2
   12dd0:	043feb0e 	bge	zero,r16,12d80 <_gp+0xffff2a74>
   12dd4:	88800917 	ldw	r2,36(r17)
   12dd8:	89400717 	ldw	r5,28(r17)
   12ddc:	800f883a 	mov	r7,r16
   12de0:	900d883a 	mov	r6,r18
   12de4:	9809883a 	mov	r4,r19
   12de8:	103ee83a 	callr	r2
   12dec:	80a1c83a 	sub	r16,r16,r2
   12df0:	00bff616 	blt	zero,r2,12dcc <_gp+0xffff2ac0>
   12df4:	88c0030b 	ldhu	r3,12(r17)
   12df8:	00bfffc4 	movi	r2,-1
   12dfc:	18c01014 	ori	r3,r3,64
   12e00:	88c0030d 	sth	r3,12(r17)
   12e04:	003fdf06 	br	12d84 <_gp+0xffff2a78>
   12e08:	0005883a 	mov	r2,zero
   12e0c:	003fec06 	br	12dc0 <_gp+0xffff2ab4>
   12e10:	88801415 	stw	r2,80(r17)
   12e14:	003fd206 	br	12d60 <_gp+0xffff2a54>
   12e18:	28c00f17 	ldw	r3,60(r5)
   12e1c:	00ffb316 	blt	zero,r3,12cec <_gp+0xffff29e0>
   12e20:	003fd706 	br	12d80 <_gp+0xffff2a74>
   12e24:	89400717 	ldw	r5,28(r17)
   12e28:	000d883a 	mov	r6,zero
   12e2c:	01c00044 	movi	r7,1
   12e30:	9809883a 	mov	r4,r19
   12e34:	403ee83a 	callr	r8
   12e38:	100d883a 	mov	r6,r2
   12e3c:	00bfffc4 	movi	r2,-1
   12e40:	30801426 	beq	r6,r2,12e94 <__sflush_r+0x1e4>
   12e44:	8880030b 	ldhu	r2,12(r17)
   12e48:	8a000a17 	ldw	r8,40(r17)
   12e4c:	003fae06 	br	12d08 <_gp+0xffff29fc>
   12e50:	98c00017 	ldw	r3,0(r19)
   12e54:	183fba26 	beq	r3,zero,12d40 <_gp+0xffff2a34>
   12e58:	01000744 	movi	r4,29
   12e5c:	19000626 	beq	r3,r4,12e78 <__sflush_r+0x1c8>
   12e60:	01000584 	movi	r4,22
   12e64:	19000426 	beq	r3,r4,12e78 <__sflush_r+0x1c8>
   12e68:	88c0030b 	ldhu	r3,12(r17)
   12e6c:	18c01014 	ori	r3,r3,64
   12e70:	88c0030d 	sth	r3,12(r17)
   12e74:	003fc306 	br	12d84 <_gp+0xffff2a78>
   12e78:	8880030b 	ldhu	r2,12(r17)
   12e7c:	88c00417 	ldw	r3,16(r17)
   12e80:	88000115 	stw	zero,4(r17)
   12e84:	10bdffcc 	andi	r2,r2,63487
   12e88:	8880030d 	sth	r2,12(r17)
   12e8c:	88c00015 	stw	r3,0(r17)
   12e90:	003fb306 	br	12d60 <_gp+0xffff2a54>
   12e94:	98800017 	ldw	r2,0(r19)
   12e98:	103fea26 	beq	r2,zero,12e44 <_gp+0xffff2b38>
   12e9c:	00c00744 	movi	r3,29
   12ea0:	10c00226 	beq	r2,r3,12eac <__sflush_r+0x1fc>
   12ea4:	00c00584 	movi	r3,22
   12ea8:	10c0031e 	bne	r2,r3,12eb8 <__sflush_r+0x208>
   12eac:	9c000015 	stw	r16,0(r19)
   12eb0:	0005883a 	mov	r2,zero
   12eb4:	003fb306 	br	12d84 <_gp+0xffff2a78>
   12eb8:	88c0030b 	ldhu	r3,12(r17)
   12ebc:	3005883a 	mov	r2,r6
   12ec0:	18c01014 	ori	r3,r3,64
   12ec4:	88c0030d 	sth	r3,12(r17)
   12ec8:	003fae06 	br	12d84 <_gp+0xffff2a78>

00012ecc <_fflush_r>:
   12ecc:	defffd04 	addi	sp,sp,-12
   12ed0:	dc000115 	stw	r16,4(sp)
   12ed4:	dfc00215 	stw	ra,8(sp)
   12ed8:	2021883a 	mov	r16,r4
   12edc:	20000226 	beq	r4,zero,12ee8 <_fflush_r+0x1c>
   12ee0:	20800e17 	ldw	r2,56(r4)
   12ee4:	10000c26 	beq	r2,zero,12f18 <_fflush_r+0x4c>
   12ee8:	2880030f 	ldh	r2,12(r5)
   12eec:	1000051e 	bne	r2,zero,12f04 <_fflush_r+0x38>
   12ef0:	0005883a 	mov	r2,zero
   12ef4:	dfc00217 	ldw	ra,8(sp)
   12ef8:	dc000117 	ldw	r16,4(sp)
   12efc:	dec00304 	addi	sp,sp,12
   12f00:	f800283a 	ret
   12f04:	8009883a 	mov	r4,r16
   12f08:	dfc00217 	ldw	ra,8(sp)
   12f0c:	dc000117 	ldw	r16,4(sp)
   12f10:	dec00304 	addi	sp,sp,12
   12f14:	0012cb01 	jmpi	12cb0 <__sflush_r>
   12f18:	d9400015 	stw	r5,0(sp)
   12f1c:	0010f540 	call	10f54 <__sinit>
   12f20:	d9400017 	ldw	r5,0(sp)
   12f24:	003ff006 	br	12ee8 <_gp+0xffff2bdc>

00012f28 <fflush>:
   12f28:	20000526 	beq	r4,zero,12f40 <fflush+0x18>
   12f2c:	008000b4 	movhi	r2,2
   12f30:	10a0c504 	addi	r2,r2,-31980
   12f34:	200b883a 	mov	r5,r4
   12f38:	11000017 	ldw	r4,0(r2)
   12f3c:	0012ecc1 	jmpi	12ecc <_fflush_r>
   12f40:	008000b4 	movhi	r2,2
   12f44:	10a0c404 	addi	r2,r2,-31984
   12f48:	11000017 	ldw	r4,0(r2)
   12f4c:	01400074 	movhi	r5,1
   12f50:	294bb304 	addi	r5,r5,11980
   12f54:	00115301 	jmpi	11530 <_fwalk_reent>

00012f58 <_malloc_trim_r>:
   12f58:	defffb04 	addi	sp,sp,-20
   12f5c:	dcc00315 	stw	r19,12(sp)
   12f60:	04c00074 	movhi	r19,1
   12f64:	dc800215 	stw	r18,8(sp)
   12f68:	dc400115 	stw	r17,4(sp)
   12f6c:	dc000015 	stw	r16,0(sp)
   12f70:	dfc00415 	stw	ra,16(sp)
   12f74:	2821883a 	mov	r16,r5
   12f78:	9cdb3404 	addi	r19,r19,27856
   12f7c:	2025883a 	mov	r18,r4
   12f80:	0013f880 	call	13f88 <__malloc_lock>
   12f84:	98800217 	ldw	r2,8(r19)
   12f88:	14400117 	ldw	r17,4(r2)
   12f8c:	00bfff04 	movi	r2,-4
   12f90:	88a2703a 	and	r17,r17,r2
   12f94:	8c21c83a 	sub	r16,r17,r16
   12f98:	8403fbc4 	addi	r16,r16,4079
   12f9c:	8020d33a 	srli	r16,r16,12
   12fa0:	0083ffc4 	movi	r2,4095
   12fa4:	843fffc4 	addi	r16,r16,-1
   12fa8:	8020933a 	slli	r16,r16,12
   12fac:	1400060e 	bge	r2,r16,12fc8 <_malloc_trim_r+0x70>
   12fb0:	000b883a 	mov	r5,zero
   12fb4:	9009883a 	mov	r4,r18
   12fb8:	00128140 	call	12814 <_sbrk_r>
   12fbc:	98c00217 	ldw	r3,8(r19)
   12fc0:	1c47883a 	add	r3,r3,r17
   12fc4:	10c00a26 	beq	r2,r3,12ff0 <_malloc_trim_r+0x98>
   12fc8:	9009883a 	mov	r4,r18
   12fcc:	0013fac0 	call	13fac <__malloc_unlock>
   12fd0:	0005883a 	mov	r2,zero
   12fd4:	dfc00417 	ldw	ra,16(sp)
   12fd8:	dcc00317 	ldw	r19,12(sp)
   12fdc:	dc800217 	ldw	r18,8(sp)
   12fe0:	dc400117 	ldw	r17,4(sp)
   12fe4:	dc000017 	ldw	r16,0(sp)
   12fe8:	dec00504 	addi	sp,sp,20
   12fec:	f800283a 	ret
   12ff0:	040bc83a 	sub	r5,zero,r16
   12ff4:	9009883a 	mov	r4,r18
   12ff8:	00128140 	call	12814 <_sbrk_r>
   12ffc:	00ffffc4 	movi	r3,-1
   13000:	10c00d26 	beq	r2,r3,13038 <_malloc_trim_r+0xe0>
   13004:	00c000b4 	movhi	r3,2
   13008:	18e78704 	addi	r3,r3,-25060
   1300c:	18800017 	ldw	r2,0(r3)
   13010:	99000217 	ldw	r4,8(r19)
   13014:	8c23c83a 	sub	r17,r17,r16
   13018:	8c400054 	ori	r17,r17,1
   1301c:	1421c83a 	sub	r16,r2,r16
   13020:	24400115 	stw	r17,4(r4)
   13024:	9009883a 	mov	r4,r18
   13028:	1c000015 	stw	r16,0(r3)
   1302c:	0013fac0 	call	13fac <__malloc_unlock>
   13030:	00800044 	movi	r2,1
   13034:	003fe706 	br	12fd4 <_gp+0xffff2cc8>
   13038:	000b883a 	mov	r5,zero
   1303c:	9009883a 	mov	r4,r18
   13040:	00128140 	call	12814 <_sbrk_r>
   13044:	99000217 	ldw	r4,8(r19)
   13048:	014003c4 	movi	r5,15
   1304c:	1107c83a 	sub	r3,r2,r4
   13050:	28ffdd0e 	bge	r5,r3,12fc8 <_gp+0xffff2cbc>
   13054:	014000b4 	movhi	r5,2
   13058:	2960c604 	addi	r5,r5,-31976
   1305c:	29400017 	ldw	r5,0(r5)
   13060:	18c00054 	ori	r3,r3,1
   13064:	20c00115 	stw	r3,4(r4)
   13068:	00c000b4 	movhi	r3,2
   1306c:	1145c83a 	sub	r2,r2,r5
   13070:	18e78704 	addi	r3,r3,-25060
   13074:	18800015 	stw	r2,0(r3)
   13078:	003fd306 	br	12fc8 <_gp+0xffff2cbc>

0001307c <_free_r>:
   1307c:	28004126 	beq	r5,zero,13184 <_free_r+0x108>
   13080:	defffd04 	addi	sp,sp,-12
   13084:	dc400115 	stw	r17,4(sp)
   13088:	dc000015 	stw	r16,0(sp)
   1308c:	2023883a 	mov	r17,r4
   13090:	2821883a 	mov	r16,r5
   13094:	dfc00215 	stw	ra,8(sp)
   13098:	0013f880 	call	13f88 <__malloc_lock>
   1309c:	81ffff17 	ldw	r7,-4(r16)
   130a0:	00bfff84 	movi	r2,-2
   130a4:	01000074 	movhi	r4,1
   130a8:	81bffe04 	addi	r6,r16,-8
   130ac:	3884703a 	and	r2,r7,r2
   130b0:	211b3404 	addi	r4,r4,27856
   130b4:	308b883a 	add	r5,r6,r2
   130b8:	2a400117 	ldw	r9,4(r5)
   130bc:	22000217 	ldw	r8,8(r4)
   130c0:	00ffff04 	movi	r3,-4
   130c4:	48c6703a 	and	r3,r9,r3
   130c8:	2a005726 	beq	r5,r8,13228 <_free_r+0x1ac>
   130cc:	28c00115 	stw	r3,4(r5)
   130d0:	39c0004c 	andi	r7,r7,1
   130d4:	3800091e 	bne	r7,zero,130fc <_free_r+0x80>
   130d8:	823ffe17 	ldw	r8,-8(r16)
   130dc:	22400204 	addi	r9,r4,8
   130e0:	320dc83a 	sub	r6,r6,r8
   130e4:	31c00217 	ldw	r7,8(r6)
   130e8:	1205883a 	add	r2,r2,r8
   130ec:	3a406526 	beq	r7,r9,13284 <_free_r+0x208>
   130f0:	32000317 	ldw	r8,12(r6)
   130f4:	3a000315 	stw	r8,12(r7)
   130f8:	41c00215 	stw	r7,8(r8)
   130fc:	28cf883a 	add	r7,r5,r3
   13100:	39c00117 	ldw	r7,4(r7)
   13104:	39c0004c 	andi	r7,r7,1
   13108:	38003a26 	beq	r7,zero,131f4 <_free_r+0x178>
   1310c:	10c00054 	ori	r3,r2,1
   13110:	30c00115 	stw	r3,4(r6)
   13114:	3087883a 	add	r3,r6,r2
   13118:	18800015 	stw	r2,0(r3)
   1311c:	00c07fc4 	movi	r3,511
   13120:	18801936 	bltu	r3,r2,13188 <_free_r+0x10c>
   13124:	1004d0fa 	srli	r2,r2,3
   13128:	01c00044 	movi	r7,1
   1312c:	21400117 	ldw	r5,4(r4)
   13130:	10c00044 	addi	r3,r2,1
   13134:	18c7883a 	add	r3,r3,r3
   13138:	1005d0ba 	srai	r2,r2,2
   1313c:	18c7883a 	add	r3,r3,r3
   13140:	18c7883a 	add	r3,r3,r3
   13144:	1907883a 	add	r3,r3,r4
   13148:	3884983a 	sll	r2,r7,r2
   1314c:	19c00017 	ldw	r7,0(r3)
   13150:	1a3ffe04 	addi	r8,r3,-8
   13154:	1144b03a 	or	r2,r2,r5
   13158:	32000315 	stw	r8,12(r6)
   1315c:	31c00215 	stw	r7,8(r6)
   13160:	20800115 	stw	r2,4(r4)
   13164:	19800015 	stw	r6,0(r3)
   13168:	39800315 	stw	r6,12(r7)
   1316c:	8809883a 	mov	r4,r17
   13170:	dfc00217 	ldw	ra,8(sp)
   13174:	dc400117 	ldw	r17,4(sp)
   13178:	dc000017 	ldw	r16,0(sp)
   1317c:	dec00304 	addi	sp,sp,12
   13180:	0013fac1 	jmpi	13fac <__malloc_unlock>
   13184:	f800283a 	ret
   13188:	100ad27a 	srli	r5,r2,9
   1318c:	00c00104 	movi	r3,4
   13190:	19404a36 	bltu	r3,r5,132bc <_free_r+0x240>
   13194:	100ad1ba 	srli	r5,r2,6
   13198:	28c00e44 	addi	r3,r5,57
   1319c:	18c7883a 	add	r3,r3,r3
   131a0:	29400e04 	addi	r5,r5,56
   131a4:	18c7883a 	add	r3,r3,r3
   131a8:	18c7883a 	add	r3,r3,r3
   131ac:	1909883a 	add	r4,r3,r4
   131b0:	20c00017 	ldw	r3,0(r4)
   131b4:	01c00074 	movhi	r7,1
   131b8:	213ffe04 	addi	r4,r4,-8
   131bc:	39db3404 	addi	r7,r7,27856
   131c0:	20c04426 	beq	r4,r3,132d4 <_free_r+0x258>
   131c4:	01ffff04 	movi	r7,-4
   131c8:	19400117 	ldw	r5,4(r3)
   131cc:	29ca703a 	and	r5,r5,r7
   131d0:	1140022e 	bgeu	r2,r5,131dc <_free_r+0x160>
   131d4:	18c00217 	ldw	r3,8(r3)
   131d8:	20fffb1e 	bne	r4,r3,131c8 <_gp+0xffff2ebc>
   131dc:	19000317 	ldw	r4,12(r3)
   131e0:	31000315 	stw	r4,12(r6)
   131e4:	30c00215 	stw	r3,8(r6)
   131e8:	21800215 	stw	r6,8(r4)
   131ec:	19800315 	stw	r6,12(r3)
   131f0:	003fde06 	br	1316c <_gp+0xffff2e60>
   131f4:	29c00217 	ldw	r7,8(r5)
   131f8:	10c5883a 	add	r2,r2,r3
   131fc:	00c00074 	movhi	r3,1
   13200:	18db3604 	addi	r3,r3,27864
   13204:	38c03b26 	beq	r7,r3,132f4 <_free_r+0x278>
   13208:	2a000317 	ldw	r8,12(r5)
   1320c:	11400054 	ori	r5,r2,1
   13210:	3087883a 	add	r3,r6,r2
   13214:	3a000315 	stw	r8,12(r7)
   13218:	41c00215 	stw	r7,8(r8)
   1321c:	31400115 	stw	r5,4(r6)
   13220:	18800015 	stw	r2,0(r3)
   13224:	003fbd06 	br	1311c <_gp+0xffff2e10>
   13228:	39c0004c 	andi	r7,r7,1
   1322c:	10c5883a 	add	r2,r2,r3
   13230:	3800071e 	bne	r7,zero,13250 <_free_r+0x1d4>
   13234:	81fffe17 	ldw	r7,-8(r16)
   13238:	31cdc83a 	sub	r6,r6,r7
   1323c:	30c00317 	ldw	r3,12(r6)
   13240:	31400217 	ldw	r5,8(r6)
   13244:	11c5883a 	add	r2,r2,r7
   13248:	28c00315 	stw	r3,12(r5)
   1324c:	19400215 	stw	r5,8(r3)
   13250:	10c00054 	ori	r3,r2,1
   13254:	30c00115 	stw	r3,4(r6)
   13258:	00c000b4 	movhi	r3,2
   1325c:	18e0c704 	addi	r3,r3,-31972
   13260:	18c00017 	ldw	r3,0(r3)
   13264:	21800215 	stw	r6,8(r4)
   13268:	10ffc036 	bltu	r2,r3,1316c <_gp+0xffff2e60>
   1326c:	008000b4 	movhi	r2,2
   13270:	10a77e04 	addi	r2,r2,-25096
   13274:	11400017 	ldw	r5,0(r2)
   13278:	8809883a 	mov	r4,r17
   1327c:	0012f580 	call	12f58 <_malloc_trim_r>
   13280:	003fba06 	br	1316c <_gp+0xffff2e60>
   13284:	28c9883a 	add	r4,r5,r3
   13288:	21000117 	ldw	r4,4(r4)
   1328c:	2100004c 	andi	r4,r4,1
   13290:	2000391e 	bne	r4,zero,13378 <_free_r+0x2fc>
   13294:	29c00217 	ldw	r7,8(r5)
   13298:	29000317 	ldw	r4,12(r5)
   1329c:	1885883a 	add	r2,r3,r2
   132a0:	10c00054 	ori	r3,r2,1
   132a4:	39000315 	stw	r4,12(r7)
   132a8:	21c00215 	stw	r7,8(r4)
   132ac:	30c00115 	stw	r3,4(r6)
   132b0:	308d883a 	add	r6,r6,r2
   132b4:	30800015 	stw	r2,0(r6)
   132b8:	003fac06 	br	1316c <_gp+0xffff2e60>
   132bc:	00c00504 	movi	r3,20
   132c0:	19401536 	bltu	r3,r5,13318 <_free_r+0x29c>
   132c4:	28c01704 	addi	r3,r5,92
   132c8:	18c7883a 	add	r3,r3,r3
   132cc:	294016c4 	addi	r5,r5,91
   132d0:	003fb406 	br	131a4 <_gp+0xffff2e98>
   132d4:	280bd0ba 	srai	r5,r5,2
   132d8:	00c00044 	movi	r3,1
   132dc:	38800117 	ldw	r2,4(r7)
   132e0:	194a983a 	sll	r5,r3,r5
   132e4:	2007883a 	mov	r3,r4
   132e8:	2884b03a 	or	r2,r5,r2
   132ec:	38800115 	stw	r2,4(r7)
   132f0:	003fbb06 	br	131e0 <_gp+0xffff2ed4>
   132f4:	21800515 	stw	r6,20(r4)
   132f8:	21800415 	stw	r6,16(r4)
   132fc:	10c00054 	ori	r3,r2,1
   13300:	31c00315 	stw	r7,12(r6)
   13304:	31c00215 	stw	r7,8(r6)
   13308:	30c00115 	stw	r3,4(r6)
   1330c:	308d883a 	add	r6,r6,r2
   13310:	30800015 	stw	r2,0(r6)
   13314:	003f9506 	br	1316c <_gp+0xffff2e60>
   13318:	00c01504 	movi	r3,84
   1331c:	19400536 	bltu	r3,r5,13334 <_free_r+0x2b8>
   13320:	100ad33a 	srli	r5,r2,12
   13324:	28c01bc4 	addi	r3,r5,111
   13328:	18c7883a 	add	r3,r3,r3
   1332c:	29401b84 	addi	r5,r5,110
   13330:	003f9c06 	br	131a4 <_gp+0xffff2e98>
   13334:	00c05504 	movi	r3,340
   13338:	19400536 	bltu	r3,r5,13350 <_free_r+0x2d4>
   1333c:	100ad3fa 	srli	r5,r2,15
   13340:	28c01e04 	addi	r3,r5,120
   13344:	18c7883a 	add	r3,r3,r3
   13348:	29401dc4 	addi	r5,r5,119
   1334c:	003f9506 	br	131a4 <_gp+0xffff2e98>
   13350:	00c15504 	movi	r3,1364
   13354:	19400536 	bltu	r3,r5,1336c <_free_r+0x2f0>
   13358:	100ad4ba 	srli	r5,r2,18
   1335c:	28c01f44 	addi	r3,r5,125
   13360:	18c7883a 	add	r3,r3,r3
   13364:	29401f04 	addi	r5,r5,124
   13368:	003f8e06 	br	131a4 <_gp+0xffff2e98>
   1336c:	00c03f84 	movi	r3,254
   13370:	01401f84 	movi	r5,126
   13374:	003f8b06 	br	131a4 <_gp+0xffff2e98>
   13378:	10c00054 	ori	r3,r2,1
   1337c:	30c00115 	stw	r3,4(r6)
   13380:	308d883a 	add	r6,r6,r2
   13384:	30800015 	stw	r2,0(r6)
   13388:	003f7806 	br	1316c <_gp+0xffff2e60>

0001338c <_lseek_r>:
   1338c:	defffd04 	addi	sp,sp,-12
   13390:	2805883a 	mov	r2,r5
   13394:	dc000015 	stw	r16,0(sp)
   13398:	040000b4 	movhi	r16,2
   1339c:	dc400115 	stw	r17,4(sp)
   133a0:	300b883a 	mov	r5,r6
   133a4:	84277f04 	addi	r16,r16,-25092
   133a8:	2023883a 	mov	r17,r4
   133ac:	380d883a 	mov	r6,r7
   133b0:	1009883a 	mov	r4,r2
   133b4:	dfc00215 	stw	ra,8(sp)
   133b8:	80000015 	stw	zero,0(r16)
   133bc:	0013e300 	call	13e30 <lseek>
   133c0:	00ffffc4 	movi	r3,-1
   133c4:	10c00526 	beq	r2,r3,133dc <_lseek_r+0x50>
   133c8:	dfc00217 	ldw	ra,8(sp)
   133cc:	dc400117 	ldw	r17,4(sp)
   133d0:	dc000017 	ldw	r16,0(sp)
   133d4:	dec00304 	addi	sp,sp,12
   133d8:	f800283a 	ret
   133dc:	80c00017 	ldw	r3,0(r16)
   133e0:	183ff926 	beq	r3,zero,133c8 <_gp+0xffff30bc>
   133e4:	88c00015 	stw	r3,0(r17)
   133e8:	003ff706 	br	133c8 <_gp+0xffff30bc>

000133ec <__smakebuf_r>:
   133ec:	2880030b 	ldhu	r2,12(r5)
   133f0:	10c0008c 	andi	r3,r2,2
   133f4:	1800411e 	bne	r3,zero,134fc <__smakebuf_r+0x110>
   133f8:	deffec04 	addi	sp,sp,-80
   133fc:	dc000f15 	stw	r16,60(sp)
   13400:	2821883a 	mov	r16,r5
   13404:	2940038f 	ldh	r5,14(r5)
   13408:	dc401015 	stw	r17,64(sp)
   1340c:	dfc01315 	stw	ra,76(sp)
   13410:	dcc01215 	stw	r19,72(sp)
   13414:	dc801115 	stw	r18,68(sp)
   13418:	2023883a 	mov	r17,r4
   1341c:	28001c16 	blt	r5,zero,13490 <__smakebuf_r+0xa4>
   13420:	d80d883a 	mov	r6,sp
   13424:	00136080 	call	13608 <_fstat_r>
   13428:	10001816 	blt	r2,zero,1348c <__smakebuf_r+0xa0>
   1342c:	d8800117 	ldw	r2,4(sp)
   13430:	00e00014 	movui	r3,32768
   13434:	10bc000c 	andi	r2,r2,61440
   13438:	14c80020 	cmpeqi	r19,r2,8192
   1343c:	10c03726 	beq	r2,r3,1351c <__smakebuf_r+0x130>
   13440:	80c0030b 	ldhu	r3,12(r16)
   13444:	18c20014 	ori	r3,r3,2048
   13448:	80c0030d 	sth	r3,12(r16)
   1344c:	00c80004 	movi	r3,8192
   13450:	10c0521e 	bne	r2,r3,1359c <__smakebuf_r+0x1b0>
   13454:	8140038f 	ldh	r5,14(r16)
   13458:	8809883a 	mov	r4,r17
   1345c:	00136640 	call	13664 <_isatty_r>
   13460:	10004c26 	beq	r2,zero,13594 <__smakebuf_r+0x1a8>
   13464:	8080030b 	ldhu	r2,12(r16)
   13468:	80c010c4 	addi	r3,r16,67
   1346c:	80c00015 	stw	r3,0(r16)
   13470:	10800054 	ori	r2,r2,1
   13474:	8080030d 	sth	r2,12(r16)
   13478:	00800044 	movi	r2,1
   1347c:	80c00415 	stw	r3,16(r16)
   13480:	80800515 	stw	r2,20(r16)
   13484:	04810004 	movi	r18,1024
   13488:	00000706 	br	134a8 <__smakebuf_r+0xbc>
   1348c:	8080030b 	ldhu	r2,12(r16)
   13490:	10c0200c 	andi	r3,r2,128
   13494:	18001f1e 	bne	r3,zero,13514 <__smakebuf_r+0x128>
   13498:	04810004 	movi	r18,1024
   1349c:	10820014 	ori	r2,r2,2048
   134a0:	8080030d 	sth	r2,12(r16)
   134a4:	0027883a 	mov	r19,zero
   134a8:	900b883a 	mov	r5,r18
   134ac:	8809883a 	mov	r4,r17
   134b0:	00115f40 	call	115f4 <_malloc_r>
   134b4:	10002c26 	beq	r2,zero,13568 <__smakebuf_r+0x17c>
   134b8:	80c0030b 	ldhu	r3,12(r16)
   134bc:	01000074 	movhi	r4,1
   134c0:	2102ff04 	addi	r4,r4,3068
   134c4:	89000f15 	stw	r4,60(r17)
   134c8:	18c02014 	ori	r3,r3,128
   134cc:	80c0030d 	sth	r3,12(r16)
   134d0:	80800015 	stw	r2,0(r16)
   134d4:	80800415 	stw	r2,16(r16)
   134d8:	84800515 	stw	r18,20(r16)
   134dc:	98001a1e 	bne	r19,zero,13548 <__smakebuf_r+0x15c>
   134e0:	dfc01317 	ldw	ra,76(sp)
   134e4:	dcc01217 	ldw	r19,72(sp)
   134e8:	dc801117 	ldw	r18,68(sp)
   134ec:	dc401017 	ldw	r17,64(sp)
   134f0:	dc000f17 	ldw	r16,60(sp)
   134f4:	dec01404 	addi	sp,sp,80
   134f8:	f800283a 	ret
   134fc:	288010c4 	addi	r2,r5,67
   13500:	28800015 	stw	r2,0(r5)
   13504:	28800415 	stw	r2,16(r5)
   13508:	00800044 	movi	r2,1
   1350c:	28800515 	stw	r2,20(r5)
   13510:	f800283a 	ret
   13514:	04801004 	movi	r18,64
   13518:	003fe006 	br	1349c <_gp+0xffff3190>
   1351c:	81000a17 	ldw	r4,40(r16)
   13520:	00c00074 	movhi	r3,1
   13524:	18ca5004 	addi	r3,r3,10560
   13528:	20ffc51e 	bne	r4,r3,13440 <_gp+0xffff3134>
   1352c:	8080030b 	ldhu	r2,12(r16)
   13530:	04810004 	movi	r18,1024
   13534:	84801315 	stw	r18,76(r16)
   13538:	1484b03a 	or	r2,r2,r18
   1353c:	8080030d 	sth	r2,12(r16)
   13540:	0027883a 	mov	r19,zero
   13544:	003fd806 	br	134a8 <_gp+0xffff319c>
   13548:	8140038f 	ldh	r5,14(r16)
   1354c:	8809883a 	mov	r4,r17
   13550:	00136640 	call	13664 <_isatty_r>
   13554:	103fe226 	beq	r2,zero,134e0 <_gp+0xffff31d4>
   13558:	8080030b 	ldhu	r2,12(r16)
   1355c:	10800054 	ori	r2,r2,1
   13560:	8080030d 	sth	r2,12(r16)
   13564:	003fde06 	br	134e0 <_gp+0xffff31d4>
   13568:	8080030b 	ldhu	r2,12(r16)
   1356c:	10c0800c 	andi	r3,r2,512
   13570:	183fdb1e 	bne	r3,zero,134e0 <_gp+0xffff31d4>
   13574:	10800094 	ori	r2,r2,2
   13578:	80c010c4 	addi	r3,r16,67
   1357c:	8080030d 	sth	r2,12(r16)
   13580:	00800044 	movi	r2,1
   13584:	80c00015 	stw	r3,0(r16)
   13588:	80c00415 	stw	r3,16(r16)
   1358c:	80800515 	stw	r2,20(r16)
   13590:	003fd306 	br	134e0 <_gp+0xffff31d4>
   13594:	04810004 	movi	r18,1024
   13598:	003fc306 	br	134a8 <_gp+0xffff319c>
   1359c:	0027883a 	mov	r19,zero
   135a0:	04810004 	movi	r18,1024
   135a4:	003fc006 	br	134a8 <_gp+0xffff319c>

000135a8 <_read_r>:
   135a8:	defffd04 	addi	sp,sp,-12
   135ac:	2805883a 	mov	r2,r5
   135b0:	dc000015 	stw	r16,0(sp)
   135b4:	040000b4 	movhi	r16,2
   135b8:	dc400115 	stw	r17,4(sp)
   135bc:	300b883a 	mov	r5,r6
   135c0:	84277f04 	addi	r16,r16,-25092
   135c4:	2023883a 	mov	r17,r4
   135c8:	380d883a 	mov	r6,r7
   135cc:	1009883a 	mov	r4,r2
   135d0:	dfc00215 	stw	ra,8(sp)
   135d4:	80000015 	stw	zero,0(r16)
   135d8:	00142740 	call	14274 <read>
   135dc:	00ffffc4 	movi	r3,-1
   135e0:	10c00526 	beq	r2,r3,135f8 <_read_r+0x50>
   135e4:	dfc00217 	ldw	ra,8(sp)
   135e8:	dc400117 	ldw	r17,4(sp)
   135ec:	dc000017 	ldw	r16,0(sp)
   135f0:	dec00304 	addi	sp,sp,12
   135f4:	f800283a 	ret
   135f8:	80c00017 	ldw	r3,0(r16)
   135fc:	183ff926 	beq	r3,zero,135e4 <_gp+0xffff32d8>
   13600:	88c00015 	stw	r3,0(r17)
   13604:	003ff706 	br	135e4 <_gp+0xffff32d8>

00013608 <_fstat_r>:
   13608:	defffd04 	addi	sp,sp,-12
   1360c:	2805883a 	mov	r2,r5
   13610:	dc000015 	stw	r16,0(sp)
   13614:	040000b4 	movhi	r16,2
   13618:	dc400115 	stw	r17,4(sp)
   1361c:	84277f04 	addi	r16,r16,-25092
   13620:	2023883a 	mov	r17,r4
   13624:	300b883a 	mov	r5,r6
   13628:	1009883a 	mov	r4,r2
   1362c:	dfc00215 	stw	ra,8(sp)
   13630:	80000015 	stw	zero,0(r16)
   13634:	00139e80 	call	139e8 <fstat>
   13638:	00ffffc4 	movi	r3,-1
   1363c:	10c00526 	beq	r2,r3,13654 <_fstat_r+0x4c>
   13640:	dfc00217 	ldw	ra,8(sp)
   13644:	dc400117 	ldw	r17,4(sp)
   13648:	dc000017 	ldw	r16,0(sp)
   1364c:	dec00304 	addi	sp,sp,12
   13650:	f800283a 	ret
   13654:	80c00017 	ldw	r3,0(r16)
   13658:	183ff926 	beq	r3,zero,13640 <_gp+0xffff3334>
   1365c:	88c00015 	stw	r3,0(r17)
   13660:	003ff706 	br	13640 <_gp+0xffff3334>

00013664 <_isatty_r>:
   13664:	defffd04 	addi	sp,sp,-12
   13668:	dc000015 	stw	r16,0(sp)
   1366c:	040000b4 	movhi	r16,2
   13670:	dc400115 	stw	r17,4(sp)
   13674:	84277f04 	addi	r16,r16,-25092
   13678:	2023883a 	mov	r17,r4
   1367c:	2809883a 	mov	r4,r5
   13680:	dfc00215 	stw	ra,8(sp)
   13684:	80000015 	stw	zero,0(r16)
   13688:	0013c5c0 	call	13c5c <isatty>
   1368c:	00ffffc4 	movi	r3,-1
   13690:	10c00526 	beq	r2,r3,136a8 <_isatty_r+0x44>
   13694:	dfc00217 	ldw	ra,8(sp)
   13698:	dc400117 	ldw	r17,4(sp)
   1369c:	dc000017 	ldw	r16,0(sp)
   136a0:	dec00304 	addi	sp,sp,12
   136a4:	f800283a 	ret
   136a8:	80c00017 	ldw	r3,0(r16)
   136ac:	183ff926 	beq	r3,zero,13694 <_gp+0xffff3388>
   136b0:	88c00015 	stw	r3,0(r17)
   136b4:	003ff706 	br	13694 <_gp+0xffff3388>

000136b8 <__divsi3>:
   136b8:	20001b16 	blt	r4,zero,13728 <__divsi3+0x70>
   136bc:	000f883a 	mov	r7,zero
   136c0:	28001616 	blt	r5,zero,1371c <__divsi3+0x64>
   136c4:	200d883a 	mov	r6,r4
   136c8:	29001a2e 	bgeu	r5,r4,13734 <__divsi3+0x7c>
   136cc:	00800804 	movi	r2,32
   136d0:	00c00044 	movi	r3,1
   136d4:	00000106 	br	136dc <__divsi3+0x24>
   136d8:	10000d26 	beq	r2,zero,13710 <__divsi3+0x58>
   136dc:	294b883a 	add	r5,r5,r5
   136e0:	10bfffc4 	addi	r2,r2,-1
   136e4:	18c7883a 	add	r3,r3,r3
   136e8:	293ffb36 	bltu	r5,r4,136d8 <_gp+0xffff33cc>
   136ec:	0005883a 	mov	r2,zero
   136f0:	18000726 	beq	r3,zero,13710 <__divsi3+0x58>
   136f4:	0005883a 	mov	r2,zero
   136f8:	31400236 	bltu	r6,r5,13704 <__divsi3+0x4c>
   136fc:	314dc83a 	sub	r6,r6,r5
   13700:	10c4b03a 	or	r2,r2,r3
   13704:	1806d07a 	srli	r3,r3,1
   13708:	280ad07a 	srli	r5,r5,1
   1370c:	183ffa1e 	bne	r3,zero,136f8 <_gp+0xffff33ec>
   13710:	38000126 	beq	r7,zero,13718 <__divsi3+0x60>
   13714:	0085c83a 	sub	r2,zero,r2
   13718:	f800283a 	ret
   1371c:	014bc83a 	sub	r5,zero,r5
   13720:	39c0005c 	xori	r7,r7,1
   13724:	003fe706 	br	136c4 <_gp+0xffff33b8>
   13728:	0109c83a 	sub	r4,zero,r4
   1372c:	01c00044 	movi	r7,1
   13730:	003fe306 	br	136c0 <_gp+0xffff33b4>
   13734:	00c00044 	movi	r3,1
   13738:	003fee06 	br	136f4 <_gp+0xffff33e8>

0001373c <__modsi3>:
   1373c:	20001716 	blt	r4,zero,1379c <__modsi3+0x60>
   13740:	000f883a 	mov	r7,zero
   13744:	2005883a 	mov	r2,r4
   13748:	28001216 	blt	r5,zero,13794 <__modsi3+0x58>
   1374c:	2900162e 	bgeu	r5,r4,137a8 <__modsi3+0x6c>
   13750:	01800804 	movi	r6,32
   13754:	00c00044 	movi	r3,1
   13758:	00000106 	br	13760 <__modsi3+0x24>
   1375c:	30000a26 	beq	r6,zero,13788 <__modsi3+0x4c>
   13760:	294b883a 	add	r5,r5,r5
   13764:	31bfffc4 	addi	r6,r6,-1
   13768:	18c7883a 	add	r3,r3,r3
   1376c:	293ffb36 	bltu	r5,r4,1375c <_gp+0xffff3450>
   13770:	18000526 	beq	r3,zero,13788 <__modsi3+0x4c>
   13774:	1806d07a 	srli	r3,r3,1
   13778:	11400136 	bltu	r2,r5,13780 <__modsi3+0x44>
   1377c:	1145c83a 	sub	r2,r2,r5
   13780:	280ad07a 	srli	r5,r5,1
   13784:	183ffb1e 	bne	r3,zero,13774 <_gp+0xffff3468>
   13788:	38000126 	beq	r7,zero,13790 <__modsi3+0x54>
   1378c:	0085c83a 	sub	r2,zero,r2
   13790:	f800283a 	ret
   13794:	014bc83a 	sub	r5,zero,r5
   13798:	003fec06 	br	1374c <_gp+0xffff3440>
   1379c:	0109c83a 	sub	r4,zero,r4
   137a0:	01c00044 	movi	r7,1
   137a4:	003fe706 	br	13744 <_gp+0xffff3438>
   137a8:	00c00044 	movi	r3,1
   137ac:	003ff106 	br	13774 <_gp+0xffff3468>

000137b0 <__udivsi3>:
   137b0:	200d883a 	mov	r6,r4
   137b4:	2900152e 	bgeu	r5,r4,1380c <__udivsi3+0x5c>
   137b8:	28001416 	blt	r5,zero,1380c <__udivsi3+0x5c>
   137bc:	00800804 	movi	r2,32
   137c0:	00c00044 	movi	r3,1
   137c4:	00000206 	br	137d0 <__udivsi3+0x20>
   137c8:	10000e26 	beq	r2,zero,13804 <__udivsi3+0x54>
   137cc:	28000516 	blt	r5,zero,137e4 <__udivsi3+0x34>
   137d0:	294b883a 	add	r5,r5,r5
   137d4:	10bfffc4 	addi	r2,r2,-1
   137d8:	18c7883a 	add	r3,r3,r3
   137dc:	293ffa36 	bltu	r5,r4,137c8 <_gp+0xffff34bc>
   137e0:	18000826 	beq	r3,zero,13804 <__udivsi3+0x54>
   137e4:	0005883a 	mov	r2,zero
   137e8:	31400236 	bltu	r6,r5,137f4 <__udivsi3+0x44>
   137ec:	314dc83a 	sub	r6,r6,r5
   137f0:	10c4b03a 	or	r2,r2,r3
   137f4:	1806d07a 	srli	r3,r3,1
   137f8:	280ad07a 	srli	r5,r5,1
   137fc:	183ffa1e 	bne	r3,zero,137e8 <_gp+0xffff34dc>
   13800:	f800283a 	ret
   13804:	0005883a 	mov	r2,zero
   13808:	f800283a 	ret
   1380c:	00c00044 	movi	r3,1
   13810:	003ff406 	br	137e4 <_gp+0xffff34d8>

00013814 <__umodsi3>:
   13814:	2005883a 	mov	r2,r4
   13818:	2900122e 	bgeu	r5,r4,13864 <__umodsi3+0x50>
   1381c:	28001116 	blt	r5,zero,13864 <__umodsi3+0x50>
   13820:	01800804 	movi	r6,32
   13824:	00c00044 	movi	r3,1
   13828:	00000206 	br	13834 <__umodsi3+0x20>
   1382c:	30000c26 	beq	r6,zero,13860 <__umodsi3+0x4c>
   13830:	28000516 	blt	r5,zero,13848 <__umodsi3+0x34>
   13834:	294b883a 	add	r5,r5,r5
   13838:	31bfffc4 	addi	r6,r6,-1
   1383c:	18c7883a 	add	r3,r3,r3
   13840:	293ffa36 	bltu	r5,r4,1382c <_gp+0xffff3520>
   13844:	18000626 	beq	r3,zero,13860 <__umodsi3+0x4c>
   13848:	1806d07a 	srli	r3,r3,1
   1384c:	11400136 	bltu	r2,r5,13854 <__umodsi3+0x40>
   13850:	1145c83a 	sub	r2,r2,r5
   13854:	280ad07a 	srli	r5,r5,1
   13858:	183ffb1e 	bne	r3,zero,13848 <_gp+0xffff353c>
   1385c:	f800283a 	ret
   13860:	f800283a 	ret
   13864:	00c00044 	movi	r3,1
   13868:	003ff706 	br	13848 <_gp+0xffff353c>

0001386c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1386c:	defffe04 	addi	sp,sp,-8
   13870:	dfc00115 	stw	ra,4(sp)
   13874:	df000015 	stw	fp,0(sp)
   13878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1387c:	d0a00a17 	ldw	r2,-32728(gp)
   13880:	10000326 	beq	r2,zero,13890 <alt_get_errno+0x24>
   13884:	d0a00a17 	ldw	r2,-32728(gp)
   13888:	103ee83a 	callr	r2
   1388c:	00000106 	br	13894 <alt_get_errno+0x28>
   13890:	d0a6bc04 	addi	r2,gp,-25872
}
   13894:	e037883a 	mov	sp,fp
   13898:	dfc00117 	ldw	ra,4(sp)
   1389c:	df000017 	ldw	fp,0(sp)
   138a0:	dec00204 	addi	sp,sp,8
   138a4:	f800283a 	ret

000138a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   138a8:	defffb04 	addi	sp,sp,-20
   138ac:	dfc00415 	stw	ra,16(sp)
   138b0:	df000315 	stw	fp,12(sp)
   138b4:	df000304 	addi	fp,sp,12
   138b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   138bc:	e0bfff17 	ldw	r2,-4(fp)
   138c0:	10000816 	blt	r2,zero,138e4 <close+0x3c>
   138c4:	01400304 	movi	r5,12
   138c8:	e13fff17 	ldw	r4,-4(fp)
   138cc:	0010a600 	call	10a60 <__mulsi3>
   138d0:	1007883a 	mov	r3,r2
   138d4:	00800074 	movhi	r2,1
   138d8:	109c4004 	addi	r2,r2,28928
   138dc:	1885883a 	add	r2,r3,r2
   138e0:	00000106 	br	138e8 <close+0x40>
   138e4:	0005883a 	mov	r2,zero
   138e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   138ec:	e0bffd17 	ldw	r2,-12(fp)
   138f0:	10001926 	beq	r2,zero,13958 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	10800017 	ldw	r2,0(r2)
   138fc:	10800417 	ldw	r2,16(r2)
   13900:	10000626 	beq	r2,zero,1391c <close+0x74>
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	10800017 	ldw	r2,0(r2)
   1390c:	10800417 	ldw	r2,16(r2)
   13910:	e13ffd17 	ldw	r4,-12(fp)
   13914:	103ee83a 	callr	r2
   13918:	00000106 	br	13920 <close+0x78>
   1391c:	0005883a 	mov	r2,zero
   13920:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13924:	e13fff17 	ldw	r4,-4(fp)
   13928:	00143780 	call	14378 <alt_release_fd>
    if (rval < 0)
   1392c:	e0bffe17 	ldw	r2,-8(fp)
   13930:	1000070e 	bge	r2,zero,13950 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13934:	001386c0 	call	1386c <alt_get_errno>
   13938:	1007883a 	mov	r3,r2
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	0085c83a 	sub	r2,zero,r2
   13944:	18800015 	stw	r2,0(r3)
      return -1;
   13948:	00bfffc4 	movi	r2,-1
   1394c:	00000706 	br	1396c <close+0xc4>
    }
    return 0;
   13950:	0005883a 	mov	r2,zero
   13954:	00000506 	br	1396c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13958:	001386c0 	call	1386c <alt_get_errno>
   1395c:	1007883a 	mov	r3,r2
   13960:	00801444 	movi	r2,81
   13964:	18800015 	stw	r2,0(r3)
    return -1;
   13968:	00bfffc4 	movi	r2,-1
  }
}
   1396c:	e037883a 	mov	sp,fp
   13970:	dfc00117 	ldw	ra,4(sp)
   13974:	df000017 	ldw	fp,0(sp)
   13978:	dec00204 	addi	sp,sp,8
   1397c:	f800283a 	ret

00013980 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13980:	defffc04 	addi	sp,sp,-16
   13984:	df000315 	stw	fp,12(sp)
   13988:	df000304 	addi	fp,sp,12
   1398c:	e13ffd15 	stw	r4,-12(fp)
   13990:	e17ffe15 	stw	r5,-8(fp)
   13994:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13998:	e0bfff17 	ldw	r2,-4(fp)
}
   1399c:	e037883a 	mov	sp,fp
   139a0:	df000017 	ldw	fp,0(sp)
   139a4:	dec00104 	addi	sp,sp,4
   139a8:	f800283a 	ret

000139ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139ac:	defffe04 	addi	sp,sp,-8
   139b0:	dfc00115 	stw	ra,4(sp)
   139b4:	df000015 	stw	fp,0(sp)
   139b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139bc:	d0a00a17 	ldw	r2,-32728(gp)
   139c0:	10000326 	beq	r2,zero,139d0 <alt_get_errno+0x24>
   139c4:	d0a00a17 	ldw	r2,-32728(gp)
   139c8:	103ee83a 	callr	r2
   139cc:	00000106 	br	139d4 <alt_get_errno+0x28>
   139d0:	d0a6bc04 	addi	r2,gp,-25872
}
   139d4:	e037883a 	mov	sp,fp
   139d8:	dfc00117 	ldw	ra,4(sp)
   139dc:	df000017 	ldw	fp,0(sp)
   139e0:	dec00204 	addi	sp,sp,8
   139e4:	f800283a 	ret

000139e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   139e8:	defffb04 	addi	sp,sp,-20
   139ec:	dfc00415 	stw	ra,16(sp)
   139f0:	df000315 	stw	fp,12(sp)
   139f4:	df000304 	addi	fp,sp,12
   139f8:	e13ffe15 	stw	r4,-8(fp)
   139fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a00:	e0bffe17 	ldw	r2,-8(fp)
   13a04:	10000816 	blt	r2,zero,13a28 <fstat+0x40>
   13a08:	01400304 	movi	r5,12
   13a0c:	e13ffe17 	ldw	r4,-8(fp)
   13a10:	0010a600 	call	10a60 <__mulsi3>
   13a14:	1007883a 	mov	r3,r2
   13a18:	00800074 	movhi	r2,1
   13a1c:	109c4004 	addi	r2,r2,28928
   13a20:	1885883a 	add	r2,r3,r2
   13a24:	00000106 	br	13a2c <fstat+0x44>
   13a28:	0005883a 	mov	r2,zero
   13a2c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13a30:	e0bffd17 	ldw	r2,-12(fp)
   13a34:	10001026 	beq	r2,zero,13a78 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13a38:	e0bffd17 	ldw	r2,-12(fp)
   13a3c:	10800017 	ldw	r2,0(r2)
   13a40:	10800817 	ldw	r2,32(r2)
   13a44:	10000726 	beq	r2,zero,13a64 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13a48:	e0bffd17 	ldw	r2,-12(fp)
   13a4c:	10800017 	ldw	r2,0(r2)
   13a50:	10800817 	ldw	r2,32(r2)
   13a54:	e17fff17 	ldw	r5,-4(fp)
   13a58:	e13ffd17 	ldw	r4,-12(fp)
   13a5c:	103ee83a 	callr	r2
   13a60:	00000a06 	br	13a8c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13a64:	e0bfff17 	ldw	r2,-4(fp)
   13a68:	00c80004 	movi	r3,8192
   13a6c:	10c00115 	stw	r3,4(r2)
      return 0;
   13a70:	0005883a 	mov	r2,zero
   13a74:	00000506 	br	13a8c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13a78:	00139ac0 	call	139ac <alt_get_errno>
   13a7c:	1007883a 	mov	r3,r2
   13a80:	00801444 	movi	r2,81
   13a84:	18800015 	stw	r2,0(r3)
    return -1;
   13a88:	00bfffc4 	movi	r2,-1
  }
}
   13a8c:	e037883a 	mov	sp,fp
   13a90:	dfc00117 	ldw	ra,4(sp)
   13a94:	df000017 	ldw	fp,0(sp)
   13a98:	dec00204 	addi	sp,sp,8
   13a9c:	f800283a 	ret

00013aa0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   13aa0:	defff004 	addi	sp,sp,-64
   13aa4:	df000f15 	stw	fp,60(sp)
   13aa8:	df000f04 	addi	fp,sp,60
   13aac:	e13ffd15 	stw	r4,-12(fp)
   13ab0:	e17ffe15 	stw	r5,-8(fp)
   13ab4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   13ab8:	00bffa84 	movi	r2,-22
   13abc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
   13ac4:	10800828 	cmpgeui	r2,r2,32
   13ac8:	1000501e 	bne	r2,zero,13c0c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13acc:	0005303a 	rdctl	r2,status
   13ad0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ad4:	e0fff617 	ldw	r3,-40(fp)
   13ad8:	00bfff84 	movi	r2,-2
   13adc:	1884703a 	and	r2,r3,r2
   13ae0:	1001703a 	wrctl	status,r2
  
  return context;
   13ae4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   13ae8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   13aec:	008000b4 	movhi	r2,2
   13af0:	10a79104 	addi	r2,r2,-25020
   13af4:	e0fffd17 	ldw	r3,-12(fp)
   13af8:	180690fa 	slli	r3,r3,3
   13afc:	10c5883a 	add	r2,r2,r3
   13b00:	e0ffff17 	ldw	r3,-4(fp)
   13b04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   13b08:	008000b4 	movhi	r2,2
   13b0c:	10a79104 	addi	r2,r2,-25020
   13b10:	e0fffd17 	ldw	r3,-12(fp)
   13b14:	180690fa 	slli	r3,r3,3
   13b18:	10c5883a 	add	r2,r2,r3
   13b1c:	10800104 	addi	r2,r2,4
   13b20:	e0fffe17 	ldw	r3,-8(fp)
   13b24:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   13b28:	e0bfff17 	ldw	r2,-4(fp)
   13b2c:	10001926 	beq	r2,zero,13b94 <alt_irq_register+0xf4>
   13b30:	e0bffd17 	ldw	r2,-12(fp)
   13b34:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b38:	0005303a 	rdctl	r2,status
   13b3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b40:	e0fff717 	ldw	r3,-36(fp)
   13b44:	00bfff84 	movi	r2,-2
   13b48:	1884703a 	and	r2,r3,r2
   13b4c:	1001703a 	wrctl	status,r2
  
  return context;
   13b50:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13b54:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   13b58:	00c00044 	movi	r3,1
   13b5c:	e0bff217 	ldw	r2,-56(fp)
   13b60:	1884983a 	sll	r2,r3,r2
   13b64:	1007883a 	mov	r3,r2
   13b68:	d0a6bd17 	ldw	r2,-25868(gp)
   13b6c:	1884b03a 	or	r2,r3,r2
   13b70:	d0a6bd15 	stw	r2,-25868(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13b74:	d0a6bd17 	ldw	r2,-25868(gp)
   13b78:	100170fa 	wrctl	ienable,r2
   13b7c:	e0bff817 	ldw	r2,-32(fp)
   13b80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b84:	e0bff917 	ldw	r2,-28(fp)
   13b88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13b8c:	0005883a 	mov	r2,zero
   13b90:	00001906 	br	13bf8 <alt_irq_register+0x158>
   13b94:	e0bffd17 	ldw	r2,-12(fp)
   13b98:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b9c:	0005303a 	rdctl	r2,status
   13ba0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ba4:	e0fffa17 	ldw	r3,-24(fp)
   13ba8:	00bfff84 	movi	r2,-2
   13bac:	1884703a 	and	r2,r3,r2
   13bb0:	1001703a 	wrctl	status,r2
  
  return context;
   13bb4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13bb8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   13bbc:	00c00044 	movi	r3,1
   13bc0:	e0bff417 	ldw	r2,-48(fp)
   13bc4:	1884983a 	sll	r2,r3,r2
   13bc8:	0084303a 	nor	r2,zero,r2
   13bcc:	1007883a 	mov	r3,r2
   13bd0:	d0a6bd17 	ldw	r2,-25868(gp)
   13bd4:	1884703a 	and	r2,r3,r2
   13bd8:	d0a6bd15 	stw	r2,-25868(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13bdc:	d0a6bd17 	ldw	r2,-25868(gp)
   13be0:	100170fa 	wrctl	ienable,r2
   13be4:	e0bffb17 	ldw	r2,-20(fp)
   13be8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bec:	e0bffc17 	ldw	r2,-16(fp)
   13bf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13bf4:	0005883a 	mov	r2,zero
   13bf8:	e0bff115 	stw	r2,-60(fp)
   13bfc:	e0bff317 	ldw	r2,-52(fp)
   13c00:	e0bff515 	stw	r2,-44(fp)
   13c04:	e0bff517 	ldw	r2,-44(fp)
   13c08:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   13c0c:	e0bff117 	ldw	r2,-60(fp)
}
   13c10:	e037883a 	mov	sp,fp
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00104 	addi	sp,sp,4
   13c1c:	f800283a 	ret

00013c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c20:	defffe04 	addi	sp,sp,-8
   13c24:	dfc00115 	stw	ra,4(sp)
   13c28:	df000015 	stw	fp,0(sp)
   13c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c30:	d0a00a17 	ldw	r2,-32728(gp)
   13c34:	10000326 	beq	r2,zero,13c44 <alt_get_errno+0x24>
   13c38:	d0a00a17 	ldw	r2,-32728(gp)
   13c3c:	103ee83a 	callr	r2
   13c40:	00000106 	br	13c48 <alt_get_errno+0x28>
   13c44:	d0a6bc04 	addi	r2,gp,-25872
}
   13c48:	e037883a 	mov	sp,fp
   13c4c:	dfc00117 	ldw	ra,4(sp)
   13c50:	df000017 	ldw	fp,0(sp)
   13c54:	dec00204 	addi	sp,sp,8
   13c58:	f800283a 	ret

00013c5c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13c5c:	deffed04 	addi	sp,sp,-76
   13c60:	dfc01215 	stw	ra,72(sp)
   13c64:	df001115 	stw	fp,68(sp)
   13c68:	df001104 	addi	fp,sp,68
   13c6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13c70:	e0bfff17 	ldw	r2,-4(fp)
   13c74:	10000816 	blt	r2,zero,13c98 <isatty+0x3c>
   13c78:	01400304 	movi	r5,12
   13c7c:	e13fff17 	ldw	r4,-4(fp)
   13c80:	0010a600 	call	10a60 <__mulsi3>
   13c84:	1007883a 	mov	r3,r2
   13c88:	00800074 	movhi	r2,1
   13c8c:	109c4004 	addi	r2,r2,28928
   13c90:	1885883a 	add	r2,r3,r2
   13c94:	00000106 	br	13c9c <isatty+0x40>
   13c98:	0005883a 	mov	r2,zero
   13c9c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13ca0:	e0bfef17 	ldw	r2,-68(fp)
   13ca4:	10000e26 	beq	r2,zero,13ce0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13ca8:	e0bfef17 	ldw	r2,-68(fp)
   13cac:	10800017 	ldw	r2,0(r2)
   13cb0:	10800817 	ldw	r2,32(r2)
   13cb4:	1000021e 	bne	r2,zero,13cc0 <isatty+0x64>
    {
      return 1;
   13cb8:	00800044 	movi	r2,1
   13cbc:	00000d06 	br	13cf4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13cc0:	e0bff004 	addi	r2,fp,-64
   13cc4:	100b883a 	mov	r5,r2
   13cc8:	e13fff17 	ldw	r4,-4(fp)
   13ccc:	00139e80 	call	139e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13cd0:	e0bff117 	ldw	r2,-60(fp)
   13cd4:	10880020 	cmpeqi	r2,r2,8192
   13cd8:	10803fcc 	andi	r2,r2,255
   13cdc:	00000506 	br	13cf4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13ce0:	0013c200 	call	13c20 <alt_get_errno>
   13ce4:	1007883a 	mov	r3,r2
   13ce8:	00801444 	movi	r2,81
   13cec:	18800015 	stw	r2,0(r3)
    return 0;
   13cf0:	0005883a 	mov	r2,zero
  }
}
   13cf4:	e037883a 	mov	sp,fp
   13cf8:	dfc00117 	ldw	ra,4(sp)
   13cfc:	df000017 	ldw	fp,0(sp)
   13d00:	dec00204 	addi	sp,sp,8
   13d04:	f800283a 	ret

00013d08 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13d08:	defffc04 	addi	sp,sp,-16
   13d0c:	df000315 	stw	fp,12(sp)
   13d10:	df000304 	addi	fp,sp,12
   13d14:	e13ffd15 	stw	r4,-12(fp)
   13d18:	e17ffe15 	stw	r5,-8(fp)
   13d1c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13d20:	e0fffe17 	ldw	r3,-8(fp)
   13d24:	e0bffd17 	ldw	r2,-12(fp)
   13d28:	18800c26 	beq	r3,r2,13d5c <alt_load_section+0x54>
  {
    while( to != end )
   13d2c:	00000806 	br	13d50 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13d30:	e0bffe17 	ldw	r2,-8(fp)
   13d34:	10c00104 	addi	r3,r2,4
   13d38:	e0fffe15 	stw	r3,-8(fp)
   13d3c:	e0fffd17 	ldw	r3,-12(fp)
   13d40:	19000104 	addi	r4,r3,4
   13d44:	e13ffd15 	stw	r4,-12(fp)
   13d48:	18c00017 	ldw	r3,0(r3)
   13d4c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13d50:	e0fffe17 	ldw	r3,-8(fp)
   13d54:	e0bfff17 	ldw	r2,-4(fp)
   13d58:	18bff51e 	bne	r3,r2,13d30 <_gp+0xffff3a24>
    {
      *to++ = *from++;
    }
  }
}
   13d5c:	0001883a 	nop
   13d60:	e037883a 	mov	sp,fp
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00104 	addi	sp,sp,4
   13d6c:	f800283a 	ret

00013d70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13d70:	defffe04 	addi	sp,sp,-8
   13d74:	dfc00115 	stw	ra,4(sp)
   13d78:	df000015 	stw	fp,0(sp)
   13d7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13d80:	018000b4 	movhi	r6,2
   13d84:	31a0d204 	addi	r6,r6,-31928
   13d88:	01400074 	movhi	r5,1
   13d8c:	295a2b04 	addi	r5,r5,26796
   13d90:	010000b4 	movhi	r4,2
   13d94:	2120d204 	addi	r4,r4,-31928
   13d98:	0013d080 	call	13d08 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13d9c:	01800074 	movhi	r6,1
   13da0:	31808d04 	addi	r6,r6,564
   13da4:	01400074 	movhi	r5,1
   13da8:	29400804 	addi	r5,r5,32
   13dac:	01000074 	movhi	r4,1
   13db0:	21000804 	addi	r4,r4,32
   13db4:	0013d080 	call	13d08 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13db8:	01800074 	movhi	r6,1
   13dbc:	319a2b04 	addi	r6,r6,26796
   13dc0:	01400074 	movhi	r5,1
   13dc4:	2959f104 	addi	r5,r5,26564
   13dc8:	01000074 	movhi	r4,1
   13dcc:	2119f104 	addi	r4,r4,26564
   13dd0:	0013d080 	call	13d08 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13dd4:	00156ec0 	call	156ec <alt_dcache_flush_all>
  alt_icache_flush_all();
   13dd8:	001593c0 	call	1593c <alt_icache_flush_all>
}
   13ddc:	0001883a 	nop
   13de0:	e037883a 	mov	sp,fp
   13de4:	dfc00117 	ldw	ra,4(sp)
   13de8:	df000017 	ldw	fp,0(sp)
   13dec:	dec00204 	addi	sp,sp,8
   13df0:	f800283a 	ret

00013df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13df4:	defffe04 	addi	sp,sp,-8
   13df8:	dfc00115 	stw	ra,4(sp)
   13dfc:	df000015 	stw	fp,0(sp)
   13e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e04:	d0a00a17 	ldw	r2,-32728(gp)
   13e08:	10000326 	beq	r2,zero,13e18 <alt_get_errno+0x24>
   13e0c:	d0a00a17 	ldw	r2,-32728(gp)
   13e10:	103ee83a 	callr	r2
   13e14:	00000106 	br	13e1c <alt_get_errno+0x28>
   13e18:	d0a6bc04 	addi	r2,gp,-25872
}
   13e1c:	e037883a 	mov	sp,fp
   13e20:	dfc00117 	ldw	ra,4(sp)
   13e24:	df000017 	ldw	fp,0(sp)
   13e28:	dec00204 	addi	sp,sp,8
   13e2c:	f800283a 	ret

00013e30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13e30:	defff904 	addi	sp,sp,-28
   13e34:	dfc00615 	stw	ra,24(sp)
   13e38:	df000515 	stw	fp,20(sp)
   13e3c:	df000504 	addi	fp,sp,20
   13e40:	e13ffd15 	stw	r4,-12(fp)
   13e44:	e17ffe15 	stw	r5,-8(fp)
   13e48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13e4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e50:	e0bffd17 	ldw	r2,-12(fp)
   13e54:	10000816 	blt	r2,zero,13e78 <lseek+0x48>
   13e58:	01400304 	movi	r5,12
   13e5c:	e13ffd17 	ldw	r4,-12(fp)
   13e60:	0010a600 	call	10a60 <__mulsi3>
   13e64:	1007883a 	mov	r3,r2
   13e68:	00800074 	movhi	r2,1
   13e6c:	109c4004 	addi	r2,r2,28928
   13e70:	1885883a 	add	r2,r3,r2
   13e74:	00000106 	br	13e7c <lseek+0x4c>
   13e78:	0005883a 	mov	r2,zero
   13e7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13e80:	e0bffc17 	ldw	r2,-16(fp)
   13e84:	10001026 	beq	r2,zero,13ec8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13e88:	e0bffc17 	ldw	r2,-16(fp)
   13e8c:	10800017 	ldw	r2,0(r2)
   13e90:	10800717 	ldw	r2,28(r2)
   13e94:	10000926 	beq	r2,zero,13ebc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13e98:	e0bffc17 	ldw	r2,-16(fp)
   13e9c:	10800017 	ldw	r2,0(r2)
   13ea0:	10800717 	ldw	r2,28(r2)
   13ea4:	e1bfff17 	ldw	r6,-4(fp)
   13ea8:	e17ffe17 	ldw	r5,-8(fp)
   13eac:	e13ffc17 	ldw	r4,-16(fp)
   13eb0:	103ee83a 	callr	r2
   13eb4:	e0bffb15 	stw	r2,-20(fp)
   13eb8:	00000506 	br	13ed0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13ebc:	00bfde84 	movi	r2,-134
   13ec0:	e0bffb15 	stw	r2,-20(fp)
   13ec4:	00000206 	br	13ed0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13ec8:	00bfebc4 	movi	r2,-81
   13ecc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13ed0:	e0bffb17 	ldw	r2,-20(fp)
   13ed4:	1000070e 	bge	r2,zero,13ef4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13ed8:	0013df40 	call	13df4 <alt_get_errno>
   13edc:	1007883a 	mov	r3,r2
   13ee0:	e0bffb17 	ldw	r2,-20(fp)
   13ee4:	0085c83a 	sub	r2,zero,r2
   13ee8:	18800015 	stw	r2,0(r3)
    rc = -1;
   13eec:	00bfffc4 	movi	r2,-1
   13ef0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13ef4:	e0bffb17 	ldw	r2,-20(fp)
}
   13ef8:	e037883a 	mov	sp,fp
   13efc:	dfc00117 	ldw	ra,4(sp)
   13f00:	df000017 	ldw	fp,0(sp)
   13f04:	dec00204 	addi	sp,sp,8
   13f08:	f800283a 	ret

00013f0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13f0c:	defffd04 	addi	sp,sp,-12
   13f10:	dfc00215 	stw	ra,8(sp)
   13f14:	df000115 	stw	fp,4(sp)
   13f18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13f1c:	0009883a 	mov	r4,zero
   13f20:	001461c0 	call	1461c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13f24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13f28:	00146540 	call	14654 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13f2c:	01800074 	movhi	r6,1
   13f30:	319a1d04 	addi	r6,r6,26740
   13f34:	01400074 	movhi	r5,1
   13f38:	295a1d04 	addi	r5,r5,26740
   13f3c:	01000074 	movhi	r4,1
   13f40:	211a1d04 	addi	r4,r4,26740
   13f44:	0015a400 	call	15a40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13f48:	00157ec0 	call	157ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13f4c:	01000074 	movhi	r4,1
   13f50:	21161304 	addi	r4,r4,22604
   13f54:	00161700 	call	16170 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13f58:	d0a6be17 	ldw	r2,-25864(gp)
   13f5c:	d0e6bf17 	ldw	r3,-25860(gp)
   13f60:	d126c017 	ldw	r4,-25856(gp)
   13f64:	200d883a 	mov	r6,r4
   13f68:	180b883a 	mov	r5,r3
   13f6c:	1009883a 	mov	r4,r2
   13f70:	00105b00 	call	105b0 <main>
   13f74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13f78:	01000044 	movi	r4,1
   13f7c:	00138a80 	call	138a8 <close>
  exit (result);
   13f80:	e13fff17 	ldw	r4,-4(fp)
   13f84:	00161840 	call	16184 <exit>

00013f88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13f88:	defffe04 	addi	sp,sp,-8
   13f8c:	df000115 	stw	fp,4(sp)
   13f90:	df000104 	addi	fp,sp,4
   13f94:	e13fff15 	stw	r4,-4(fp)
}
   13f98:	0001883a 	nop
   13f9c:	e037883a 	mov	sp,fp
   13fa0:	df000017 	ldw	fp,0(sp)
   13fa4:	dec00104 	addi	sp,sp,4
   13fa8:	f800283a 	ret

00013fac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13fac:	defffe04 	addi	sp,sp,-8
   13fb0:	df000115 	stw	fp,4(sp)
   13fb4:	df000104 	addi	fp,sp,4
   13fb8:	e13fff15 	stw	r4,-4(fp)
}
   13fbc:	0001883a 	nop
   13fc0:	e037883a 	mov	sp,fp
   13fc4:	df000017 	ldw	fp,0(sp)
   13fc8:	dec00104 	addi	sp,sp,4
   13fcc:	f800283a 	ret

00013fd0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   13fd0:	defff204 	addi	sp,sp,-56
   13fd4:	dfc00a15 	stw	ra,40(sp)
   13fd8:	df000915 	stw	fp,36(sp)
   13fdc:	df000904 	addi	fp,sp,36
   13fe0:	e13fff15 	stw	r4,-4(fp)
   13fe4:	e1400215 	stw	r5,8(fp)
   13fe8:	e1800315 	stw	r6,12(fp)
   13fec:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   13ff0:	e0800204 	addi	r2,fp,8
   13ff4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   13ff8:	e0bfff17 	ldw	r2,-4(fp)
   13ffc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   14000:	00006f06 	br	141c0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   14004:	e0bff807 	ldb	r2,-32(fp)
   14008:	10800960 	cmpeqi	r2,r2,37
   1400c:	1000041e 	bne	r2,zero,14020 <alt_printf+0x50>
        {
            alt_putchar(c);
   14010:	e0bff807 	ldb	r2,-32(fp)
   14014:	1009883a 	mov	r4,r2
   14018:	00141fc0 	call	141fc <alt_putchar>
   1401c:	00006806 	br	141c0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   14020:	e0bff717 	ldw	r2,-36(fp)
   14024:	10c00044 	addi	r3,r2,1
   14028:	e0fff715 	stw	r3,-36(fp)
   1402c:	10800003 	ldbu	r2,0(r2)
   14030:	e0bff805 	stb	r2,-32(fp)
   14034:	e0bff807 	ldb	r2,-32(fp)
   14038:	10006926 	beq	r2,zero,141e0 <alt_printf+0x210>
            {
                if (c == '%')
   1403c:	e0bff807 	ldb	r2,-32(fp)
   14040:	10800958 	cmpnei	r2,r2,37
   14044:	1000041e 	bne	r2,zero,14058 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   14048:	e0bff807 	ldb	r2,-32(fp)
   1404c:	1009883a 	mov	r4,r2
   14050:	00141fc0 	call	141fc <alt_putchar>
   14054:	00005a06 	br	141c0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   14058:	e0bff807 	ldb	r2,-32(fp)
   1405c:	108018d8 	cmpnei	r2,r2,99
   14060:	1000081e 	bne	r2,zero,14084 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   14064:	e0bffe17 	ldw	r2,-8(fp)
   14068:	10c00104 	addi	r3,r2,4
   1406c:	e0fffe15 	stw	r3,-8(fp)
   14070:	10800017 	ldw	r2,0(r2)
   14074:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   14078:	e13ffd17 	ldw	r4,-12(fp)
   1407c:	00141fc0 	call	141fc <alt_putchar>
   14080:	00004f06 	br	141c0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   14084:	e0bff807 	ldb	r2,-32(fp)
   14088:	10801e18 	cmpnei	r2,r2,120
   1408c:	1000341e 	bne	r2,zero,14160 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   14090:	e0bffe17 	ldw	r2,-8(fp)
   14094:	10c00104 	addi	r3,r2,4
   14098:	e0fffe15 	stw	r3,-8(fp)
   1409c:	10800017 	ldw	r2,0(r2)
   140a0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   140a4:	e0bffb17 	ldw	r2,-20(fp)
   140a8:	1000031e 	bne	r2,zero,140b8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   140ac:	01000c04 	movi	r4,48
   140b0:	00141fc0 	call	141fc <alt_putchar>
                        continue;
   140b4:	00004206 	br	141c0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   140b8:	00800704 	movi	r2,28
   140bc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   140c0:	00000306 	br	140d0 <alt_printf+0x100>
                        digit_shift -= 4;
   140c4:	e0bff917 	ldw	r2,-28(fp)
   140c8:	10bfff04 	addi	r2,r2,-4
   140cc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   140d0:	00c003c4 	movi	r3,15
   140d4:	e0bff917 	ldw	r2,-28(fp)
   140d8:	1884983a 	sll	r2,r3,r2
   140dc:	1007883a 	mov	r3,r2
   140e0:	e0bffb17 	ldw	r2,-20(fp)
   140e4:	1884703a 	and	r2,r3,r2
   140e8:	103ff626 	beq	r2,zero,140c4 <_gp+0xffff3db8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   140ec:	00001906 	br	14154 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   140f0:	00c003c4 	movi	r3,15
   140f4:	e0bff917 	ldw	r2,-28(fp)
   140f8:	1884983a 	sll	r2,r3,r2
   140fc:	1007883a 	mov	r3,r2
   14100:	e0bffb17 	ldw	r2,-20(fp)
   14104:	1886703a 	and	r3,r3,r2
   14108:	e0bff917 	ldw	r2,-28(fp)
   1410c:	1884d83a 	srl	r2,r3,r2
   14110:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   14114:	e0bffc17 	ldw	r2,-16(fp)
   14118:	108002a8 	cmpgeui	r2,r2,10
   1411c:	1000041e 	bne	r2,zero,14130 <alt_printf+0x160>
                            c = '0' + digit;
   14120:	e0bffc17 	ldw	r2,-16(fp)
   14124:	10800c04 	addi	r2,r2,48
   14128:	e0bff805 	stb	r2,-32(fp)
   1412c:	00000306 	br	1413c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   14130:	e0bffc17 	ldw	r2,-16(fp)
   14134:	108015c4 	addi	r2,r2,87
   14138:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   1413c:	e0bff807 	ldb	r2,-32(fp)
   14140:	1009883a 	mov	r4,r2
   14144:	00141fc0 	call	141fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14148:	e0bff917 	ldw	r2,-28(fp)
   1414c:	10bfff04 	addi	r2,r2,-4
   14150:	e0bff915 	stw	r2,-28(fp)
   14154:	e0bff917 	ldw	r2,-28(fp)
   14158:	103fe50e 	bge	r2,zero,140f0 <_gp+0xffff3de4>
   1415c:	00001806 	br	141c0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   14160:	e0bff807 	ldb	r2,-32(fp)
   14164:	10801cd8 	cmpnei	r2,r2,115
   14168:	1000151e 	bne	r2,zero,141c0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1416c:	e0bffe17 	ldw	r2,-8(fp)
   14170:	10c00104 	addi	r3,r2,4
   14174:	e0fffe15 	stw	r3,-8(fp)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   14180:	00000906 	br	141a8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14184:	e0bffa17 	ldw	r2,-24(fp)
   14188:	10c00044 	addi	r3,r2,1
   1418c:	e0fffa15 	stw	r3,-24(fp)
   14190:	10800003 	ldbu	r2,0(r2)
   14194:	10803fcc 	andi	r2,r2,255
   14198:	1080201c 	xori	r2,r2,128
   1419c:	10bfe004 	addi	r2,r2,-128
   141a0:	1009883a 	mov	r4,r2
   141a4:	00141fc0 	call	141fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   141a8:	e0bffa17 	ldw	r2,-24(fp)
   141ac:	10800003 	ldbu	r2,0(r2)
   141b0:	10803fcc 	andi	r2,r2,255
   141b4:	1080201c 	xori	r2,r2,128
   141b8:	10bfe004 	addi	r2,r2,-128
   141bc:	103ff11e 	bne	r2,zero,14184 <_gp+0xffff3e78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   141c0:	e0bff717 	ldw	r2,-36(fp)
   141c4:	10c00044 	addi	r3,r2,1
   141c8:	e0fff715 	stw	r3,-36(fp)
   141cc:	10800003 	ldbu	r2,0(r2)
   141d0:	e0bff805 	stb	r2,-32(fp)
   141d4:	e0bff807 	ldb	r2,-32(fp)
   141d8:	103f8a1e 	bne	r2,zero,14004 <_gp+0xffff3cf8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   141dc:	00000106 	br	141e4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   141e0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   141e4:	0001883a 	nop
   141e8:	e037883a 	mov	sp,fp
   141ec:	dfc00117 	ldw	ra,4(sp)
   141f0:	df000017 	ldw	fp,0(sp)
   141f4:	dec00504 	addi	sp,sp,20
   141f8:	f800283a 	ret

000141fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   141fc:	defffd04 	addi	sp,sp,-12
   14200:	dfc00215 	stw	ra,8(sp)
   14204:	df000115 	stw	fp,4(sp)
   14208:	df000104 	addi	fp,sp,4
   1420c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   14210:	d0a00217 	ldw	r2,-32760(gp)
   14214:	10800217 	ldw	r2,8(r2)
   14218:	100b883a 	mov	r5,r2
   1421c:	e13fff17 	ldw	r4,-4(fp)
   14220:	00162d80 	call	162d8 <putc>
#endif
#endif
}
   14224:	e037883a 	mov	sp,fp
   14228:	dfc00117 	ldw	ra,4(sp)
   1422c:	df000017 	ldw	fp,0(sp)
   14230:	dec00204 	addi	sp,sp,8
   14234:	f800283a 	ret

00014238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14238:	defffe04 	addi	sp,sp,-8
   1423c:	dfc00115 	stw	ra,4(sp)
   14240:	df000015 	stw	fp,0(sp)
   14244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14248:	d0a00a17 	ldw	r2,-32728(gp)
   1424c:	10000326 	beq	r2,zero,1425c <alt_get_errno+0x24>
   14250:	d0a00a17 	ldw	r2,-32728(gp)
   14254:	103ee83a 	callr	r2
   14258:	00000106 	br	14260 <alt_get_errno+0x28>
   1425c:	d0a6bc04 	addi	r2,gp,-25872
}
   14260:	e037883a 	mov	sp,fp
   14264:	dfc00117 	ldw	ra,4(sp)
   14268:	df000017 	ldw	fp,0(sp)
   1426c:	dec00204 	addi	sp,sp,8
   14270:	f800283a 	ret

00014274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14274:	defff904 	addi	sp,sp,-28
   14278:	dfc00615 	stw	ra,24(sp)
   1427c:	df000515 	stw	fp,20(sp)
   14280:	df000504 	addi	fp,sp,20
   14284:	e13ffd15 	stw	r4,-12(fp)
   14288:	e17ffe15 	stw	r5,-8(fp)
   1428c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14290:	e0bffd17 	ldw	r2,-12(fp)
   14294:	10000816 	blt	r2,zero,142b8 <read+0x44>
   14298:	01400304 	movi	r5,12
   1429c:	e13ffd17 	ldw	r4,-12(fp)
   142a0:	0010a600 	call	10a60 <__mulsi3>
   142a4:	1007883a 	mov	r3,r2
   142a8:	00800074 	movhi	r2,1
   142ac:	109c4004 	addi	r2,r2,28928
   142b0:	1885883a 	add	r2,r3,r2
   142b4:	00000106 	br	142bc <read+0x48>
   142b8:	0005883a 	mov	r2,zero
   142bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   142c0:	e0bffb17 	ldw	r2,-20(fp)
   142c4:	10002226 	beq	r2,zero,14350 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142c8:	e0bffb17 	ldw	r2,-20(fp)
   142cc:	10800217 	ldw	r2,8(r2)
   142d0:	108000cc 	andi	r2,r2,3
   142d4:	10800060 	cmpeqi	r2,r2,1
   142d8:	1000181e 	bne	r2,zero,1433c <read+0xc8>
        (fd->dev->read))
   142dc:	e0bffb17 	ldw	r2,-20(fp)
   142e0:	10800017 	ldw	r2,0(r2)
   142e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   142e8:	10001426 	beq	r2,zero,1433c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   142ec:	e0bffb17 	ldw	r2,-20(fp)
   142f0:	10800017 	ldw	r2,0(r2)
   142f4:	10800517 	ldw	r2,20(r2)
   142f8:	e0ffff17 	ldw	r3,-4(fp)
   142fc:	180d883a 	mov	r6,r3
   14300:	e17ffe17 	ldw	r5,-8(fp)
   14304:	e13ffb17 	ldw	r4,-20(fp)
   14308:	103ee83a 	callr	r2
   1430c:	e0bffc15 	stw	r2,-16(fp)
   14310:	e0bffc17 	ldw	r2,-16(fp)
   14314:	1000070e 	bge	r2,zero,14334 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   14318:	00142380 	call	14238 <alt_get_errno>
   1431c:	1007883a 	mov	r3,r2
   14320:	e0bffc17 	ldw	r2,-16(fp)
   14324:	0085c83a 	sub	r2,zero,r2
   14328:	18800015 	stw	r2,0(r3)
          return -1;
   1432c:	00bfffc4 	movi	r2,-1
   14330:	00000c06 	br	14364 <read+0xf0>
        }
        return rval;
   14334:	e0bffc17 	ldw	r2,-16(fp)
   14338:	00000a06 	br	14364 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1433c:	00142380 	call	14238 <alt_get_errno>
   14340:	1007883a 	mov	r3,r2
   14344:	00800344 	movi	r2,13
   14348:	18800015 	stw	r2,0(r3)
   1434c:	00000406 	br	14360 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14350:	00142380 	call	14238 <alt_get_errno>
   14354:	1007883a 	mov	r3,r2
   14358:	00801444 	movi	r2,81
   1435c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14360:	00bfffc4 	movi	r2,-1
}
   14364:	e037883a 	mov	sp,fp
   14368:	dfc00117 	ldw	ra,4(sp)
   1436c:	df000017 	ldw	fp,0(sp)
   14370:	dec00204 	addi	sp,sp,8
   14374:	f800283a 	ret

00014378 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   14378:	defffc04 	addi	sp,sp,-16
   1437c:	dfc00315 	stw	ra,12(sp)
   14380:	df000215 	stw	fp,8(sp)
   14384:	dc000115 	stw	r16,4(sp)
   14388:	df000204 	addi	fp,sp,8
   1438c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   14390:	e0bffe17 	ldw	r2,-8(fp)
   14394:	108000d0 	cmplti	r2,r2,3
   14398:	1000111e 	bne	r2,zero,143e0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1439c:	04000074 	movhi	r16,1
   143a0:	841c4004 	addi	r16,r16,28928
   143a4:	e0bffe17 	ldw	r2,-8(fp)
   143a8:	01400304 	movi	r5,12
   143ac:	1009883a 	mov	r4,r2
   143b0:	0010a600 	call	10a60 <__mulsi3>
   143b4:	8085883a 	add	r2,r16,r2
   143b8:	10800204 	addi	r2,r2,8
   143bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   143c0:	04000074 	movhi	r16,1
   143c4:	841c4004 	addi	r16,r16,28928
   143c8:	e0bffe17 	ldw	r2,-8(fp)
   143cc:	01400304 	movi	r5,12
   143d0:	1009883a 	mov	r4,r2
   143d4:	0010a600 	call	10a60 <__mulsi3>
   143d8:	8085883a 	add	r2,r16,r2
   143dc:	10000015 	stw	zero,0(r2)
  }
}
   143e0:	0001883a 	nop
   143e4:	e6ffff04 	addi	sp,fp,-4
   143e8:	dfc00217 	ldw	ra,8(sp)
   143ec:	df000117 	ldw	fp,4(sp)
   143f0:	dc000017 	ldw	r16,0(sp)
   143f4:	dec00304 	addi	sp,sp,12
   143f8:	f800283a 	ret

000143fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   143fc:	defff904 	addi	sp,sp,-28
   14400:	df000615 	stw	fp,24(sp)
   14404:	df000604 	addi	fp,sp,24
   14408:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1440c:	0005303a 	rdctl	r2,status
   14410:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14414:	e0fffe17 	ldw	r3,-8(fp)
   14418:	00bfff84 	movi	r2,-2
   1441c:	1884703a 	and	r2,r3,r2
   14420:	1001703a 	wrctl	status,r2
  
  return context;
   14424:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14428:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1442c:	d0a00c17 	ldw	r2,-32720(gp)
   14430:	10c000c4 	addi	r3,r2,3
   14434:	00bfff04 	movi	r2,-4
   14438:	1884703a 	and	r2,r3,r2
   1443c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14440:	d0e00c17 	ldw	r3,-32720(gp)
   14444:	e0bfff17 	ldw	r2,-4(fp)
   14448:	1887883a 	add	r3,r3,r2
   1444c:	008000b4 	movhi	r2,2
   14450:	10800004 	addi	r2,r2,0
   14454:	10c0062e 	bgeu	r2,r3,14470 <sbrk+0x74>
   14458:	e0bffb17 	ldw	r2,-20(fp)
   1445c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14460:	e0bffa17 	ldw	r2,-24(fp)
   14464:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14468:	00bfffc4 	movi	r2,-1
   1446c:	00000b06 	br	1449c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14470:	d0a00c17 	ldw	r2,-32720(gp)
   14474:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   14478:	d0e00c17 	ldw	r3,-32720(gp)
   1447c:	e0bfff17 	ldw	r2,-4(fp)
   14480:	1885883a 	add	r2,r3,r2
   14484:	d0a00c15 	stw	r2,-32720(gp)
   14488:	e0bffb17 	ldw	r2,-20(fp)
   1448c:	e0bffc15 	stw	r2,-16(fp)
   14490:	e0bffc17 	ldw	r2,-16(fp)
   14494:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14498:	e0bffd17 	ldw	r2,-12(fp)
} 
   1449c:	e037883a 	mov	sp,fp
   144a0:	df000017 	ldw	fp,0(sp)
   144a4:	dec00104 	addi	sp,sp,4
   144a8:	f800283a 	ret

000144ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144ac:	defffe04 	addi	sp,sp,-8
   144b0:	dfc00115 	stw	ra,4(sp)
   144b4:	df000015 	stw	fp,0(sp)
   144b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144bc:	d0a00a17 	ldw	r2,-32728(gp)
   144c0:	10000326 	beq	r2,zero,144d0 <alt_get_errno+0x24>
   144c4:	d0a00a17 	ldw	r2,-32728(gp)
   144c8:	103ee83a 	callr	r2
   144cc:	00000106 	br	144d4 <alt_get_errno+0x28>
   144d0:	d0a6bc04 	addi	r2,gp,-25872
}
   144d4:	e037883a 	mov	sp,fp
   144d8:	dfc00117 	ldw	ra,4(sp)
   144dc:	df000017 	ldw	fp,0(sp)
   144e0:	dec00204 	addi	sp,sp,8
   144e4:	f800283a 	ret

000144e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   144e8:	defff904 	addi	sp,sp,-28
   144ec:	dfc00615 	stw	ra,24(sp)
   144f0:	df000515 	stw	fp,20(sp)
   144f4:	df000504 	addi	fp,sp,20
   144f8:	e13ffd15 	stw	r4,-12(fp)
   144fc:	e17ffe15 	stw	r5,-8(fp)
   14500:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14504:	e0bffd17 	ldw	r2,-12(fp)
   14508:	10000816 	blt	r2,zero,1452c <write+0x44>
   1450c:	01400304 	movi	r5,12
   14510:	e13ffd17 	ldw	r4,-12(fp)
   14514:	0010a600 	call	10a60 <__mulsi3>
   14518:	1007883a 	mov	r3,r2
   1451c:	00800074 	movhi	r2,1
   14520:	109c4004 	addi	r2,r2,28928
   14524:	1885883a 	add	r2,r3,r2
   14528:	00000106 	br	14530 <write+0x48>
   1452c:	0005883a 	mov	r2,zero
   14530:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14534:	e0bffb17 	ldw	r2,-20(fp)
   14538:	10002126 	beq	r2,zero,145c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1453c:	e0bffb17 	ldw	r2,-20(fp)
   14540:	10800217 	ldw	r2,8(r2)
   14544:	108000cc 	andi	r2,r2,3
   14548:	10001826 	beq	r2,zero,145ac <write+0xc4>
   1454c:	e0bffb17 	ldw	r2,-20(fp)
   14550:	10800017 	ldw	r2,0(r2)
   14554:	10800617 	ldw	r2,24(r2)
   14558:	10001426 	beq	r2,zero,145ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1455c:	e0bffb17 	ldw	r2,-20(fp)
   14560:	10800017 	ldw	r2,0(r2)
   14564:	10800617 	ldw	r2,24(r2)
   14568:	e0ffff17 	ldw	r3,-4(fp)
   1456c:	180d883a 	mov	r6,r3
   14570:	e17ffe17 	ldw	r5,-8(fp)
   14574:	e13ffb17 	ldw	r4,-20(fp)
   14578:	103ee83a 	callr	r2
   1457c:	e0bffc15 	stw	r2,-16(fp)
   14580:	e0bffc17 	ldw	r2,-16(fp)
   14584:	1000070e 	bge	r2,zero,145a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   14588:	00144ac0 	call	144ac <alt_get_errno>
   1458c:	1007883a 	mov	r3,r2
   14590:	e0bffc17 	ldw	r2,-16(fp)
   14594:	0085c83a 	sub	r2,zero,r2
   14598:	18800015 	stw	r2,0(r3)
        return -1;
   1459c:	00bfffc4 	movi	r2,-1
   145a0:	00000c06 	br	145d4 <write+0xec>
      }
      return rval;
   145a4:	e0bffc17 	ldw	r2,-16(fp)
   145a8:	00000a06 	br	145d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   145ac:	00144ac0 	call	144ac <alt_get_errno>
   145b0:	1007883a 	mov	r3,r2
   145b4:	00800344 	movi	r2,13
   145b8:	18800015 	stw	r2,0(r3)
   145bc:	00000406 	br	145d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   145c0:	00144ac0 	call	144ac <alt_get_errno>
   145c4:	1007883a 	mov	r3,r2
   145c8:	00801444 	movi	r2,81
   145cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   145d0:	00bfffc4 	movi	r2,-1
}
   145d4:	e037883a 	mov	sp,fp
   145d8:	dfc00117 	ldw	ra,4(sp)
   145dc:	df000017 	ldw	fp,0(sp)
   145e0:	dec00204 	addi	sp,sp,8
   145e4:	f800283a 	ret

000145e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   145e8:	defffd04 	addi	sp,sp,-12
   145ec:	dfc00215 	stw	ra,8(sp)
   145f0:	df000115 	stw	fp,4(sp)
   145f4:	df000104 	addi	fp,sp,4
   145f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   145fc:	d1600704 	addi	r5,gp,-32740
   14600:	e13fff17 	ldw	r4,-4(fp)
   14604:	00157480 	call	15748 <alt_dev_llist_insert>
}
   14608:	e037883a 	mov	sp,fp
   1460c:	dfc00117 	ldw	ra,4(sp)
   14610:	df000017 	ldw	fp,0(sp)
   14614:	dec00204 	addi	sp,sp,8
   14618:	f800283a 	ret

0001461c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1461c:	defffd04 	addi	sp,sp,-12
   14620:	dfc00215 	stw	ra,8(sp)
   14624:	df000115 	stw	fp,4(sp)
   14628:	df000104 	addi	fp,sp,4
   1462c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14630:	0015ee40 	call	15ee4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14634:	00800044 	movi	r2,1
   14638:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1463c:	0001883a 	nop
   14640:	e037883a 	mov	sp,fp
   14644:	dfc00117 	ldw	ra,4(sp)
   14648:	df000017 	ldw	fp,0(sp)
   1464c:	dec00204 	addi	sp,sp,8
   14650:	f800283a 	ret

00014654 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14654:	defffe04 	addi	sp,sp,-8
   14658:	dfc00115 	stw	ra,4(sp)
   1465c:	df000015 	stw	fp,0(sp)
   14660:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   14664:	01c0fa04 	movi	r7,1000
   14668:	01800044 	movi	r6,1
   1466c:	000b883a 	mov	r5,zero
   14670:	010000b4 	movhi	r4,2
   14674:	21040004 	addi	r4,r4,4096
   14678:	001519c0 	call	1519c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1467c:	000d883a 	mov	r6,zero
   14680:	000b883a 	mov	r5,zero
   14684:	01000074 	movhi	r4,1
   14688:	211caa04 	addi	r4,r4,29352
   1468c:	00148240 	call	14824 <altera_avalon_jtag_uart_init>
   14690:	01000074 	movhi	r4,1
   14694:	211ca004 	addi	r4,r4,29312
   14698:	00145e80 	call	145e8 <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   1469c:	010000b4 	movhi	r4,2
   146a0:	2120b804 	addi	r4,r4,-32032
   146a4:	00145e80 	call	145e8 <alt_dev_reg>
}
   146a8:	0001883a 	nop
   146ac:	e037883a 	mov	sp,fp
   146b0:	dfc00117 	ldw	ra,4(sp)
   146b4:	df000017 	ldw	fp,0(sp)
   146b8:	dec00204 	addi	sp,sp,8
   146bc:	f800283a 	ret

000146c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   146c0:	defffa04 	addi	sp,sp,-24
   146c4:	dfc00515 	stw	ra,20(sp)
   146c8:	df000415 	stw	fp,16(sp)
   146cc:	df000404 	addi	fp,sp,16
   146d0:	e13ffd15 	stw	r4,-12(fp)
   146d4:	e17ffe15 	stw	r5,-8(fp)
   146d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   146dc:	e0bffd17 	ldw	r2,-12(fp)
   146e0:	10800017 	ldw	r2,0(r2)
   146e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   146e8:	e0bffc17 	ldw	r2,-16(fp)
   146ec:	10c00a04 	addi	r3,r2,40
   146f0:	e0bffd17 	ldw	r2,-12(fp)
   146f4:	10800217 	ldw	r2,8(r2)
   146f8:	100f883a 	mov	r7,r2
   146fc:	e1bfff17 	ldw	r6,-4(fp)
   14700:	e17ffe17 	ldw	r5,-8(fp)
   14704:	1809883a 	mov	r4,r3
   14708:	0014ce00 	call	14ce0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1470c:	e037883a 	mov	sp,fp
   14710:	dfc00117 	ldw	ra,4(sp)
   14714:	df000017 	ldw	fp,0(sp)
   14718:	dec00204 	addi	sp,sp,8
   1471c:	f800283a 	ret

00014720 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14720:	defffa04 	addi	sp,sp,-24
   14724:	dfc00515 	stw	ra,20(sp)
   14728:	df000415 	stw	fp,16(sp)
   1472c:	df000404 	addi	fp,sp,16
   14730:	e13ffd15 	stw	r4,-12(fp)
   14734:	e17ffe15 	stw	r5,-8(fp)
   14738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1473c:	e0bffd17 	ldw	r2,-12(fp)
   14740:	10800017 	ldw	r2,0(r2)
   14744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14748:	e0bffc17 	ldw	r2,-16(fp)
   1474c:	10c00a04 	addi	r3,r2,40
   14750:	e0bffd17 	ldw	r2,-12(fp)
   14754:	10800217 	ldw	r2,8(r2)
   14758:	100f883a 	mov	r7,r2
   1475c:	e1bfff17 	ldw	r6,-4(fp)
   14760:	e17ffe17 	ldw	r5,-8(fp)
   14764:	1809883a 	mov	r4,r3
   14768:	0014efc0 	call	14efc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1476c:	e037883a 	mov	sp,fp
   14770:	dfc00117 	ldw	ra,4(sp)
   14774:	df000017 	ldw	fp,0(sp)
   14778:	dec00204 	addi	sp,sp,8
   1477c:	f800283a 	ret

00014780 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14780:	defffc04 	addi	sp,sp,-16
   14784:	dfc00315 	stw	ra,12(sp)
   14788:	df000215 	stw	fp,8(sp)
   1478c:	df000204 	addi	fp,sp,8
   14790:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14794:	e0bfff17 	ldw	r2,-4(fp)
   14798:	10800017 	ldw	r2,0(r2)
   1479c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   147a0:	e0bffe17 	ldw	r2,-8(fp)
   147a4:	10c00a04 	addi	r3,r2,40
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	10800217 	ldw	r2,8(r2)
   147b0:	100b883a 	mov	r5,r2
   147b4:	1809883a 	mov	r4,r3
   147b8:	0014b880 	call	14b88 <altera_avalon_jtag_uart_close>
}
   147bc:	e037883a 	mov	sp,fp
   147c0:	dfc00117 	ldw	ra,4(sp)
   147c4:	df000017 	ldw	fp,0(sp)
   147c8:	dec00204 	addi	sp,sp,8
   147cc:	f800283a 	ret

000147d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   147d0:	defffa04 	addi	sp,sp,-24
   147d4:	dfc00515 	stw	ra,20(sp)
   147d8:	df000415 	stw	fp,16(sp)
   147dc:	df000404 	addi	fp,sp,16
   147e0:	e13ffd15 	stw	r4,-12(fp)
   147e4:	e17ffe15 	stw	r5,-8(fp)
   147e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   147ec:	e0bffd17 	ldw	r2,-12(fp)
   147f0:	10800017 	ldw	r2,0(r2)
   147f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   147f8:	e0bffc17 	ldw	r2,-16(fp)
   147fc:	10800a04 	addi	r2,r2,40
   14800:	e1bfff17 	ldw	r6,-4(fp)
   14804:	e17ffe17 	ldw	r5,-8(fp)
   14808:	1009883a 	mov	r4,r2
   1480c:	0014bf00 	call	14bf0 <altera_avalon_jtag_uart_ioctl>
}
   14810:	e037883a 	mov	sp,fp
   14814:	dfc00117 	ldw	ra,4(sp)
   14818:	df000017 	ldw	fp,0(sp)
   1481c:	dec00204 	addi	sp,sp,8
   14820:	f800283a 	ret

00014824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14824:	defffb04 	addi	sp,sp,-20
   14828:	dfc00415 	stw	ra,16(sp)
   1482c:	df000315 	stw	fp,12(sp)
   14830:	df000304 	addi	fp,sp,12
   14834:	e13ffd15 	stw	r4,-12(fp)
   14838:	e17ffe15 	stw	r5,-8(fp)
   1483c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14840:	e0bffd17 	ldw	r2,-12(fp)
   14844:	00c00044 	movi	r3,1
   14848:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1484c:	e0bffd17 	ldw	r2,-12(fp)
   14850:	10800017 	ldw	r2,0(r2)
   14854:	10800104 	addi	r2,r2,4
   14858:	1007883a 	mov	r3,r2
   1485c:	e0bffd17 	ldw	r2,-12(fp)
   14860:	10800817 	ldw	r2,32(r2)
   14864:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   14868:	e0bfff17 	ldw	r2,-4(fp)
   1486c:	01800074 	movhi	r6,1
   14870:	31923604 	addi	r6,r6,18648
   14874:	e17ffd17 	ldw	r5,-12(fp)
   14878:	1009883a 	mov	r4,r2
   1487c:	0013aa00 	call	13aa0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14880:	e0bffd17 	ldw	r2,-12(fp)
   14884:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14888:	e0bffd17 	ldw	r2,-12(fp)
   1488c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14890:	d0e6c117 	ldw	r3,-25852(gp)
   14894:	e1fffd17 	ldw	r7,-12(fp)
   14898:	01800074 	movhi	r6,1
   1489c:	3192ba04 	addi	r6,r6,19176
   148a0:	180b883a 	mov	r5,r3
   148a4:	1009883a 	mov	r4,r2
   148a8:	00155c00 	call	155c0 <alt_alarm_start>
   148ac:	1000040e 	bge	r2,zero,148c0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   148b0:	e0fffd17 	ldw	r3,-12(fp)
   148b4:	00a00034 	movhi	r2,32768
   148b8:	10bfffc4 	addi	r2,r2,-1
   148bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   148c0:	0001883a 	nop
   148c4:	e037883a 	mov	sp,fp
   148c8:	dfc00117 	ldw	ra,4(sp)
   148cc:	df000017 	ldw	fp,0(sp)
   148d0:	dec00204 	addi	sp,sp,8
   148d4:	f800283a 	ret

000148d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   148d8:	defff704 	addi	sp,sp,-36
   148dc:	df000815 	stw	fp,32(sp)
   148e0:	df000804 	addi	fp,sp,32
   148e4:	e13ffe15 	stw	r4,-8(fp)
   148e8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   148ec:	e0bffe17 	ldw	r2,-8(fp)
   148f0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   148f4:	e0bffa17 	ldw	r2,-24(fp)
   148f8:	10800017 	ldw	r2,0(r2)
   148fc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14900:	e0bffb17 	ldw	r2,-20(fp)
   14904:	10800104 	addi	r2,r2,4
   14908:	10800037 	ldwio	r2,0(r2)
   1490c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14910:	e0bffc17 	ldw	r2,-16(fp)
   14914:	1080c00c 	andi	r2,r2,768
   14918:	10006d26 	beq	r2,zero,14ad0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1491c:	e0bffc17 	ldw	r2,-16(fp)
   14920:	1080400c 	andi	r2,r2,256
   14924:	10003526 	beq	r2,zero,149fc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14928:	00800074 	movhi	r2,1
   1492c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14930:	e0bffa17 	ldw	r2,-24(fp)
   14934:	10800a17 	ldw	r2,40(r2)
   14938:	10800044 	addi	r2,r2,1
   1493c:	1081ffcc 	andi	r2,r2,2047
   14940:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   14944:	e0bffa17 	ldw	r2,-24(fp)
   14948:	10c00b17 	ldw	r3,44(r2)
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	18801526 	beq	r3,r2,149a8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14954:	e0bffb17 	ldw	r2,-20(fp)
   14958:	10800037 	ldwio	r2,0(r2)
   1495c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14960:	e0bff817 	ldw	r2,-32(fp)
   14964:	10a0000c 	andi	r2,r2,32768
   14968:	10001126 	beq	r2,zero,149b0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1496c:	e0bffa17 	ldw	r2,-24(fp)
   14970:	10800a17 	ldw	r2,40(r2)
   14974:	e0fff817 	ldw	r3,-32(fp)
   14978:	1809883a 	mov	r4,r3
   1497c:	e0fffa17 	ldw	r3,-24(fp)
   14980:	1885883a 	add	r2,r3,r2
   14984:	10800e04 	addi	r2,r2,56
   14988:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1498c:	e0bffa17 	ldw	r2,-24(fp)
   14990:	10800a17 	ldw	r2,40(r2)
   14994:	10800044 	addi	r2,r2,1
   14998:	10c1ffcc 	andi	r3,r2,2047
   1499c:	e0bffa17 	ldw	r2,-24(fp)
   149a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   149a4:	003fe206 	br	14930 <_gp+0xffff4624>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   149a8:	0001883a 	nop
   149ac:	00000106 	br	149b4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   149b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   149b4:	e0bff817 	ldw	r2,-32(fp)
   149b8:	10bfffec 	andhi	r2,r2,65535
   149bc:	10000f26 	beq	r2,zero,149fc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   149c0:	e0bffa17 	ldw	r2,-24(fp)
   149c4:	10c00817 	ldw	r3,32(r2)
   149c8:	00bfff84 	movi	r2,-2
   149cc:	1886703a 	and	r3,r3,r2
   149d0:	e0bffa17 	ldw	r2,-24(fp)
   149d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   149d8:	e0bffb17 	ldw	r2,-20(fp)
   149dc:	10800104 	addi	r2,r2,4
   149e0:	1007883a 	mov	r3,r2
   149e4:	e0bffa17 	ldw	r2,-24(fp)
   149e8:	10800817 	ldw	r2,32(r2)
   149ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   149f0:	e0bffb17 	ldw	r2,-20(fp)
   149f4:	10800104 	addi	r2,r2,4
   149f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	1080800c 	andi	r2,r2,512
   14a04:	103fbe26 	beq	r2,zero,14900 <_gp+0xffff45f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14a08:	e0bffc17 	ldw	r2,-16(fp)
   14a0c:	1004d43a 	srli	r2,r2,16
   14a10:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14a14:	00001406 	br	14a68 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14a18:	e0bffb17 	ldw	r2,-20(fp)
   14a1c:	e0fffa17 	ldw	r3,-24(fp)
   14a20:	18c00d17 	ldw	r3,52(r3)
   14a24:	e13ffa17 	ldw	r4,-24(fp)
   14a28:	20c7883a 	add	r3,r4,r3
   14a2c:	18c20e04 	addi	r3,r3,2104
   14a30:	18c00003 	ldbu	r3,0(r3)
   14a34:	18c03fcc 	andi	r3,r3,255
   14a38:	18c0201c 	xori	r3,r3,128
   14a3c:	18ffe004 	addi	r3,r3,-128
   14a40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14a44:	e0bffa17 	ldw	r2,-24(fp)
   14a48:	10800d17 	ldw	r2,52(r2)
   14a4c:	10800044 	addi	r2,r2,1
   14a50:	10c1ffcc 	andi	r3,r2,2047
   14a54:	e0bffa17 	ldw	r2,-24(fp)
   14a58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14a5c:	e0bff917 	ldw	r2,-28(fp)
   14a60:	10bfffc4 	addi	r2,r2,-1
   14a64:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14a68:	e0bff917 	ldw	r2,-28(fp)
   14a6c:	10000526 	beq	r2,zero,14a84 <altera_avalon_jtag_uart_irq+0x1ac>
   14a70:	e0bffa17 	ldw	r2,-24(fp)
   14a74:	10c00d17 	ldw	r3,52(r2)
   14a78:	e0bffa17 	ldw	r2,-24(fp)
   14a7c:	10800c17 	ldw	r2,48(r2)
   14a80:	18bfe51e 	bne	r3,r2,14a18 <_gp+0xffff470c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14a84:	e0bff917 	ldw	r2,-28(fp)
   14a88:	103f9d26 	beq	r2,zero,14900 <_gp+0xffff45f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14a8c:	e0bffa17 	ldw	r2,-24(fp)
   14a90:	10c00817 	ldw	r3,32(r2)
   14a94:	00bfff44 	movi	r2,-3
   14a98:	1886703a 	and	r3,r3,r2
   14a9c:	e0bffa17 	ldw	r2,-24(fp)
   14aa0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14aa4:	e0bffa17 	ldw	r2,-24(fp)
   14aa8:	10800017 	ldw	r2,0(r2)
   14aac:	10800104 	addi	r2,r2,4
   14ab0:	1007883a 	mov	r3,r2
   14ab4:	e0bffa17 	ldw	r2,-24(fp)
   14ab8:	10800817 	ldw	r2,32(r2)
   14abc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14ac0:	e0bffb17 	ldw	r2,-20(fp)
   14ac4:	10800104 	addi	r2,r2,4
   14ac8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14acc:	003f8c06 	br	14900 <_gp+0xffff45f4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14ad0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14ad4:	0001883a 	nop
   14ad8:	e037883a 	mov	sp,fp
   14adc:	df000017 	ldw	fp,0(sp)
   14ae0:	dec00104 	addi	sp,sp,4
   14ae4:	f800283a 	ret

00014ae8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14ae8:	defff804 	addi	sp,sp,-32
   14aec:	df000715 	stw	fp,28(sp)
   14af0:	df000704 	addi	fp,sp,28
   14af4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14af8:	e0bffb17 	ldw	r2,-20(fp)
   14afc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14b00:	e0bff917 	ldw	r2,-28(fp)
   14b04:	10800017 	ldw	r2,0(r2)
   14b08:	10800104 	addi	r2,r2,4
   14b0c:	10800037 	ldwio	r2,0(r2)
   14b10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14b14:	e0bffa17 	ldw	r2,-24(fp)
   14b18:	1081000c 	andi	r2,r2,1024
   14b1c:	10000b26 	beq	r2,zero,14b4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14b20:	e0bff917 	ldw	r2,-28(fp)
   14b24:	10800017 	ldw	r2,0(r2)
   14b28:	10800104 	addi	r2,r2,4
   14b2c:	1007883a 	mov	r3,r2
   14b30:	e0bff917 	ldw	r2,-28(fp)
   14b34:	10800817 	ldw	r2,32(r2)
   14b38:	10810014 	ori	r2,r2,1024
   14b3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14b40:	e0bff917 	ldw	r2,-28(fp)
   14b44:	10000915 	stw	zero,36(r2)
   14b48:	00000a06 	br	14b74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14b4c:	e0bff917 	ldw	r2,-28(fp)
   14b50:	10c00917 	ldw	r3,36(r2)
   14b54:	00a00034 	movhi	r2,32768
   14b58:	10bfff04 	addi	r2,r2,-4
   14b5c:	10c00536 	bltu	r2,r3,14b74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14b60:	e0bff917 	ldw	r2,-28(fp)
   14b64:	10800917 	ldw	r2,36(r2)
   14b68:	10c00044 	addi	r3,r2,1
   14b6c:	e0bff917 	ldw	r2,-28(fp)
   14b70:	10c00915 	stw	r3,36(r2)
   14b74:	d0a6c117 	ldw	r2,-25852(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14b78:	e037883a 	mov	sp,fp
   14b7c:	df000017 	ldw	fp,0(sp)
   14b80:	dec00104 	addi	sp,sp,4
   14b84:	f800283a 	ret

00014b88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14b88:	defffd04 	addi	sp,sp,-12
   14b8c:	df000215 	stw	fp,8(sp)
   14b90:	df000204 	addi	fp,sp,8
   14b94:	e13ffe15 	stw	r4,-8(fp)
   14b98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14b9c:	00000506 	br	14bb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14ba0:	e0bfff17 	ldw	r2,-4(fp)
   14ba4:	1090000c 	andi	r2,r2,16384
   14ba8:	10000226 	beq	r2,zero,14bb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14bac:	00bffd44 	movi	r2,-11
   14bb0:	00000b06 	br	14be0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14bb4:	e0bffe17 	ldw	r2,-8(fp)
   14bb8:	10c00d17 	ldw	r3,52(r2)
   14bbc:	e0bffe17 	ldw	r2,-8(fp)
   14bc0:	10800c17 	ldw	r2,48(r2)
   14bc4:	18800526 	beq	r3,r2,14bdc <altera_avalon_jtag_uart_close+0x54>
   14bc8:	e0bffe17 	ldw	r2,-8(fp)
   14bcc:	10c00917 	ldw	r3,36(r2)
   14bd0:	e0bffe17 	ldw	r2,-8(fp)
   14bd4:	10800117 	ldw	r2,4(r2)
   14bd8:	18bff136 	bltu	r3,r2,14ba0 <_gp+0xffff4894>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14bdc:	0005883a 	mov	r2,zero
}
   14be0:	e037883a 	mov	sp,fp
   14be4:	df000017 	ldw	fp,0(sp)
   14be8:	dec00104 	addi	sp,sp,4
   14bec:	f800283a 	ret

00014bf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14bf0:	defffa04 	addi	sp,sp,-24
   14bf4:	df000515 	stw	fp,20(sp)
   14bf8:	df000504 	addi	fp,sp,20
   14bfc:	e13ffd15 	stw	r4,-12(fp)
   14c00:	e17ffe15 	stw	r5,-8(fp)
   14c04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14c08:	00bff9c4 	movi	r2,-25
   14c0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	10da8060 	cmpeqi	r3,r2,27137
   14c18:	1800031e 	bne	r3,zero,14c28 <altera_avalon_jtag_uart_ioctl+0x38>
   14c1c:	109a80a0 	cmpeqi	r2,r2,27138
   14c20:	1000181e 	bne	r2,zero,14c84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14c24:	00002906 	br	14ccc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14c28:	e0bffd17 	ldw	r2,-12(fp)
   14c2c:	10c00117 	ldw	r3,4(r2)
   14c30:	00a00034 	movhi	r2,32768
   14c34:	10bfffc4 	addi	r2,r2,-1
   14c38:	18802126 	beq	r3,r2,14cc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14c3c:	e0bfff17 	ldw	r2,-4(fp)
   14c40:	10800017 	ldw	r2,0(r2)
   14c44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14c48:	e0bffc17 	ldw	r2,-16(fp)
   14c4c:	10800090 	cmplti	r2,r2,2
   14c50:	1000061e 	bne	r2,zero,14c6c <altera_avalon_jtag_uart_ioctl+0x7c>
   14c54:	e0fffc17 	ldw	r3,-16(fp)
   14c58:	00a00034 	movhi	r2,32768
   14c5c:	10bfffc4 	addi	r2,r2,-1
   14c60:	18800226 	beq	r3,r2,14c6c <altera_avalon_jtag_uart_ioctl+0x7c>
   14c64:	e0bffc17 	ldw	r2,-16(fp)
   14c68:	00000206 	br	14c74 <altera_avalon_jtag_uart_ioctl+0x84>
   14c6c:	00a00034 	movhi	r2,32768
   14c70:	10bfff84 	addi	r2,r2,-2
   14c74:	e0fffd17 	ldw	r3,-12(fp)
   14c78:	18800115 	stw	r2,4(r3)
      rc = 0;
   14c7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14c80:	00000f06 	br	14cc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14c84:	e0bffd17 	ldw	r2,-12(fp)
   14c88:	10c00117 	ldw	r3,4(r2)
   14c8c:	00a00034 	movhi	r2,32768
   14c90:	10bfffc4 	addi	r2,r2,-1
   14c94:	18800c26 	beq	r3,r2,14cc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14c98:	e0bffd17 	ldw	r2,-12(fp)
   14c9c:	10c00917 	ldw	r3,36(r2)
   14ca0:	e0bffd17 	ldw	r2,-12(fp)
   14ca4:	10800117 	ldw	r2,4(r2)
   14ca8:	1885803a 	cmpltu	r2,r3,r2
   14cac:	10c03fcc 	andi	r3,r2,255
   14cb0:	e0bfff17 	ldw	r2,-4(fp)
   14cb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14cb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14cbc:	00000206 	br	14cc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14cc0:	0001883a 	nop
   14cc4:	00000106 	br	14ccc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14cc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14ccc:	e0bffb17 	ldw	r2,-20(fp)
}
   14cd0:	e037883a 	mov	sp,fp
   14cd4:	df000017 	ldw	fp,0(sp)
   14cd8:	dec00104 	addi	sp,sp,4
   14cdc:	f800283a 	ret

00014ce0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14ce0:	defff304 	addi	sp,sp,-52
   14ce4:	dfc00c15 	stw	ra,48(sp)
   14ce8:	df000b15 	stw	fp,44(sp)
   14cec:	df000b04 	addi	fp,sp,44
   14cf0:	e13ffc15 	stw	r4,-16(fp)
   14cf4:	e17ffd15 	stw	r5,-12(fp)
   14cf8:	e1bffe15 	stw	r6,-8(fp)
   14cfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14d00:	e0bffd17 	ldw	r2,-12(fp)
   14d04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14d08:	00004706 	br	14e28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14d0c:	e0bffc17 	ldw	r2,-16(fp)
   14d10:	10800a17 	ldw	r2,40(r2)
   14d14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14d18:	e0bffc17 	ldw	r2,-16(fp)
   14d1c:	10800b17 	ldw	r2,44(r2)
   14d20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14d24:	e0fff717 	ldw	r3,-36(fp)
   14d28:	e0bff817 	ldw	r2,-32(fp)
   14d2c:	18800536 	bltu	r3,r2,14d44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14d30:	e0fff717 	ldw	r3,-36(fp)
   14d34:	e0bff817 	ldw	r2,-32(fp)
   14d38:	1885c83a 	sub	r2,r3,r2
   14d3c:	e0bff615 	stw	r2,-40(fp)
   14d40:	00000406 	br	14d54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14d44:	00c20004 	movi	r3,2048
   14d48:	e0bff817 	ldw	r2,-32(fp)
   14d4c:	1885c83a 	sub	r2,r3,r2
   14d50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14d54:	e0bff617 	ldw	r2,-40(fp)
   14d58:	10001e26 	beq	r2,zero,14dd4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14d5c:	e0fffe17 	ldw	r3,-8(fp)
   14d60:	e0bff617 	ldw	r2,-40(fp)
   14d64:	1880022e 	bgeu	r3,r2,14d70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14d68:	e0bffe17 	ldw	r2,-8(fp)
   14d6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14d70:	e0bffc17 	ldw	r2,-16(fp)
   14d74:	10c00e04 	addi	r3,r2,56
   14d78:	e0bff817 	ldw	r2,-32(fp)
   14d7c:	1885883a 	add	r2,r3,r2
   14d80:	e1bff617 	ldw	r6,-40(fp)
   14d84:	100b883a 	mov	r5,r2
   14d88:	e13ff517 	ldw	r4,-44(fp)
   14d8c:	0011ee40 	call	11ee4 <memcpy>
      ptr   += n;
   14d90:	e0fff517 	ldw	r3,-44(fp)
   14d94:	e0bff617 	ldw	r2,-40(fp)
   14d98:	1885883a 	add	r2,r3,r2
   14d9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14da0:	e0fffe17 	ldw	r3,-8(fp)
   14da4:	e0bff617 	ldw	r2,-40(fp)
   14da8:	1885c83a 	sub	r2,r3,r2
   14dac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14db0:	e0fff817 	ldw	r3,-32(fp)
   14db4:	e0bff617 	ldw	r2,-40(fp)
   14db8:	1885883a 	add	r2,r3,r2
   14dbc:	10c1ffcc 	andi	r3,r2,2047
   14dc0:	e0bffc17 	ldw	r2,-16(fp)
   14dc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14dc8:	e0bffe17 	ldw	r2,-8(fp)
   14dcc:	00bfcf16 	blt	zero,r2,14d0c <_gp+0xffff4a00>
   14dd0:	00000106 	br	14dd8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14dd4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14dd8:	e0fff517 	ldw	r3,-44(fp)
   14ddc:	e0bffd17 	ldw	r2,-12(fp)
   14de0:	1880141e 	bne	r3,r2,14e34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14de4:	e0bfff17 	ldw	r2,-4(fp)
   14de8:	1090000c 	andi	r2,r2,16384
   14dec:	1000131e 	bne	r2,zero,14e3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14df0:	0001883a 	nop
   14df4:	e0bffc17 	ldw	r2,-16(fp)
   14df8:	10c00a17 	ldw	r3,40(r2)
   14dfc:	e0bff717 	ldw	r2,-36(fp)
   14e00:	1880051e 	bne	r3,r2,14e18 <altera_avalon_jtag_uart_read+0x138>
   14e04:	e0bffc17 	ldw	r2,-16(fp)
   14e08:	10c00917 	ldw	r3,36(r2)
   14e0c:	e0bffc17 	ldw	r2,-16(fp)
   14e10:	10800117 	ldw	r2,4(r2)
   14e14:	18bff736 	bltu	r3,r2,14df4 <_gp+0xffff4ae8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14e18:	e0bffc17 	ldw	r2,-16(fp)
   14e1c:	10c00a17 	ldw	r3,40(r2)
   14e20:	e0bff717 	ldw	r2,-36(fp)
   14e24:	18800726 	beq	r3,r2,14e44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14e28:	e0bffe17 	ldw	r2,-8(fp)
   14e2c:	00bfb716 	blt	zero,r2,14d0c <_gp+0xffff4a00>
   14e30:	00000506 	br	14e48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14e34:	0001883a 	nop
   14e38:	00000306 	br	14e48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14e3c:	0001883a 	nop
   14e40:	00000106 	br	14e48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14e44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14e48:	e0fff517 	ldw	r3,-44(fp)
   14e4c:	e0bffd17 	ldw	r2,-12(fp)
   14e50:	18801826 	beq	r3,r2,14eb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e54:	0005303a 	rdctl	r2,status
   14e58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e5c:	e0fffb17 	ldw	r3,-20(fp)
   14e60:	00bfff84 	movi	r2,-2
   14e64:	1884703a 	and	r2,r3,r2
   14e68:	1001703a 	wrctl	status,r2
  
  return context;
   14e6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14e70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14e74:	e0bffc17 	ldw	r2,-16(fp)
   14e78:	10800817 	ldw	r2,32(r2)
   14e7c:	10c00054 	ori	r3,r2,1
   14e80:	e0bffc17 	ldw	r2,-16(fp)
   14e84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14e88:	e0bffc17 	ldw	r2,-16(fp)
   14e8c:	10800017 	ldw	r2,0(r2)
   14e90:	10800104 	addi	r2,r2,4
   14e94:	1007883a 	mov	r3,r2
   14e98:	e0bffc17 	ldw	r2,-16(fp)
   14e9c:	10800817 	ldw	r2,32(r2)
   14ea0:	18800035 	stwio	r2,0(r3)
   14ea4:	e0bffa17 	ldw	r2,-24(fp)
   14ea8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14eac:	e0bff917 	ldw	r2,-28(fp)
   14eb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14eb4:	e0fff517 	ldw	r3,-44(fp)
   14eb8:	e0bffd17 	ldw	r2,-12(fp)
   14ebc:	18800426 	beq	r3,r2,14ed0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14ec0:	e0fff517 	ldw	r3,-44(fp)
   14ec4:	e0bffd17 	ldw	r2,-12(fp)
   14ec8:	1885c83a 	sub	r2,r3,r2
   14ecc:	00000606 	br	14ee8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14ed0:	e0bfff17 	ldw	r2,-4(fp)
   14ed4:	1090000c 	andi	r2,r2,16384
   14ed8:	10000226 	beq	r2,zero,14ee4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14edc:	00bffd44 	movi	r2,-11
   14ee0:	00000106 	br	14ee8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14ee4:	00bffec4 	movi	r2,-5
}
   14ee8:	e037883a 	mov	sp,fp
   14eec:	dfc00117 	ldw	ra,4(sp)
   14ef0:	df000017 	ldw	fp,0(sp)
   14ef4:	dec00204 	addi	sp,sp,8
   14ef8:	f800283a 	ret

00014efc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14efc:	defff304 	addi	sp,sp,-52
   14f00:	dfc00c15 	stw	ra,48(sp)
   14f04:	df000b15 	stw	fp,44(sp)
   14f08:	df000b04 	addi	fp,sp,44
   14f0c:	e13ffc15 	stw	r4,-16(fp)
   14f10:	e17ffd15 	stw	r5,-12(fp)
   14f14:	e1bffe15 	stw	r6,-8(fp)
   14f18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14f1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14f20:	e0bffd17 	ldw	r2,-12(fp)
   14f24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14f28:	00003706 	br	15008 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14f2c:	e0bffc17 	ldw	r2,-16(fp)
   14f30:	10800c17 	ldw	r2,48(r2)
   14f34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14f38:	e0bffc17 	ldw	r2,-16(fp)
   14f3c:	10800d17 	ldw	r2,52(r2)
   14f40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14f44:	e0fff917 	ldw	r3,-28(fp)
   14f48:	e0bff517 	ldw	r2,-44(fp)
   14f4c:	1880062e 	bgeu	r3,r2,14f68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14f50:	e0fff517 	ldw	r3,-44(fp)
   14f54:	e0bff917 	ldw	r2,-28(fp)
   14f58:	1885c83a 	sub	r2,r3,r2
   14f5c:	10bfffc4 	addi	r2,r2,-1
   14f60:	e0bff615 	stw	r2,-40(fp)
   14f64:	00000b06 	br	14f94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14f68:	e0bff517 	ldw	r2,-44(fp)
   14f6c:	10000526 	beq	r2,zero,14f84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14f70:	00c20004 	movi	r3,2048
   14f74:	e0bff917 	ldw	r2,-28(fp)
   14f78:	1885c83a 	sub	r2,r3,r2
   14f7c:	e0bff615 	stw	r2,-40(fp)
   14f80:	00000406 	br	14f94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14f84:	00c1ffc4 	movi	r3,2047
   14f88:	e0bff917 	ldw	r2,-28(fp)
   14f8c:	1885c83a 	sub	r2,r3,r2
   14f90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14f94:	e0bff617 	ldw	r2,-40(fp)
   14f98:	10001e26 	beq	r2,zero,15014 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14f9c:	e0fffe17 	ldw	r3,-8(fp)
   14fa0:	e0bff617 	ldw	r2,-40(fp)
   14fa4:	1880022e 	bgeu	r3,r2,14fb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14fa8:	e0bffe17 	ldw	r2,-8(fp)
   14fac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14fb0:	e0bffc17 	ldw	r2,-16(fp)
   14fb4:	10c20e04 	addi	r3,r2,2104
   14fb8:	e0bff917 	ldw	r2,-28(fp)
   14fbc:	1885883a 	add	r2,r3,r2
   14fc0:	e1bff617 	ldw	r6,-40(fp)
   14fc4:	e17ffd17 	ldw	r5,-12(fp)
   14fc8:	1009883a 	mov	r4,r2
   14fcc:	0011ee40 	call	11ee4 <memcpy>
      ptr   += n;
   14fd0:	e0fffd17 	ldw	r3,-12(fp)
   14fd4:	e0bff617 	ldw	r2,-40(fp)
   14fd8:	1885883a 	add	r2,r3,r2
   14fdc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14fe0:	e0fffe17 	ldw	r3,-8(fp)
   14fe4:	e0bff617 	ldw	r2,-40(fp)
   14fe8:	1885c83a 	sub	r2,r3,r2
   14fec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14ff0:	e0fff917 	ldw	r3,-28(fp)
   14ff4:	e0bff617 	ldw	r2,-40(fp)
   14ff8:	1885883a 	add	r2,r3,r2
   14ffc:	10c1ffcc 	andi	r3,r2,2047
   15000:	e0bffc17 	ldw	r2,-16(fp)
   15004:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15008:	e0bffe17 	ldw	r2,-8(fp)
   1500c:	00bfc716 	blt	zero,r2,14f2c <_gp+0xffff4c20>
   15010:	00000106 	br	15018 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   15014:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15018:	0005303a 	rdctl	r2,status
   1501c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15020:	e0fffb17 	ldw	r3,-20(fp)
   15024:	00bfff84 	movi	r2,-2
   15028:	1884703a 	and	r2,r3,r2
   1502c:	1001703a 	wrctl	status,r2
  
  return context;
   15030:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15034:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15038:	e0bffc17 	ldw	r2,-16(fp)
   1503c:	10800817 	ldw	r2,32(r2)
   15040:	10c00094 	ori	r3,r2,2
   15044:	e0bffc17 	ldw	r2,-16(fp)
   15048:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1504c:	e0bffc17 	ldw	r2,-16(fp)
   15050:	10800017 	ldw	r2,0(r2)
   15054:	10800104 	addi	r2,r2,4
   15058:	1007883a 	mov	r3,r2
   1505c:	e0bffc17 	ldw	r2,-16(fp)
   15060:	10800817 	ldw	r2,32(r2)
   15064:	18800035 	stwio	r2,0(r3)
   15068:	e0bffa17 	ldw	r2,-24(fp)
   1506c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15070:	e0bff817 	ldw	r2,-32(fp)
   15074:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15078:	e0bffe17 	ldw	r2,-8(fp)
   1507c:	0080100e 	bge	zero,r2,150c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   15080:	e0bfff17 	ldw	r2,-4(fp)
   15084:	1090000c 	andi	r2,r2,16384
   15088:	1000101e 	bne	r2,zero,150cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1508c:	0001883a 	nop
   15090:	e0bffc17 	ldw	r2,-16(fp)
   15094:	10c00d17 	ldw	r3,52(r2)
   15098:	e0bff517 	ldw	r2,-44(fp)
   1509c:	1880051e 	bne	r3,r2,150b4 <altera_avalon_jtag_uart_write+0x1b8>
   150a0:	e0bffc17 	ldw	r2,-16(fp)
   150a4:	10c00917 	ldw	r3,36(r2)
   150a8:	e0bffc17 	ldw	r2,-16(fp)
   150ac:	10800117 	ldw	r2,4(r2)
   150b0:	18bff736 	bltu	r3,r2,15090 <_gp+0xffff4d84>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   150b4:	e0bffc17 	ldw	r2,-16(fp)
   150b8:	10800917 	ldw	r2,36(r2)
   150bc:	1000051e 	bne	r2,zero,150d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	00bfd016 	blt	zero,r2,15008 <_gp+0xffff4cfc>
   150c8:	00000306 	br	150d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   150cc:	0001883a 	nop
   150d0:	00000106 	br	150d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   150d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   150d8:	e0fffd17 	ldw	r3,-12(fp)
   150dc:	e0bff717 	ldw	r2,-36(fp)
   150e0:	18800426 	beq	r3,r2,150f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   150e4:	e0fffd17 	ldw	r3,-12(fp)
   150e8:	e0bff717 	ldw	r2,-36(fp)
   150ec:	1885c83a 	sub	r2,r3,r2
   150f0:	00000606 	br	1510c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   150f4:	e0bfff17 	ldw	r2,-4(fp)
   150f8:	1090000c 	andi	r2,r2,16384
   150fc:	10000226 	beq	r2,zero,15108 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   15100:	00bffd44 	movi	r2,-11
   15104:	00000106 	br	1510c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15108:	00bffec4 	movi	r2,-5
}
   1510c:	e037883a 	mov	sp,fp
   15110:	dfc00117 	ldw	ra,4(sp)
   15114:	df000017 	ldw	fp,0(sp)
   15118:	dec00204 	addi	sp,sp,8
   1511c:	f800283a 	ret

00015120 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15120:	defff904 	addi	sp,sp,-28
   15124:	dfc00615 	stw	ra,24(sp)
   15128:	df000515 	stw	fp,20(sp)
   1512c:	df000504 	addi	fp,sp,20
   15130:	e13ffe15 	stw	r4,-8(fp)
   15134:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15138:	0007883a 	mov	r3,zero
   1513c:	e0bffe17 	ldw	r2,-8(fp)
   15140:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15144:	e0bffe17 	ldw	r2,-8(fp)
   15148:	10800104 	addi	r2,r2,4
   1514c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15150:	0005303a 	rdctl	r2,status
   15154:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15158:	e0fffc17 	ldw	r3,-16(fp)
   1515c:	00bfff84 	movi	r2,-2
   15160:	1884703a 	and	r2,r3,r2
   15164:	1001703a 	wrctl	status,r2
  
  return context;
   15168:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1516c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   15170:	0015ddc0 	call	15ddc <alt_tick>
   15174:	e0bffb17 	ldw	r2,-20(fp)
   15178:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1517c:	e0bffd17 	ldw	r2,-12(fp)
   15180:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   15184:	0001883a 	nop
   15188:	e037883a 	mov	sp,fp
   1518c:	dfc00117 	ldw	ra,4(sp)
   15190:	df000017 	ldw	fp,0(sp)
   15194:	dec00204 	addi	sp,sp,8
   15198:	f800283a 	ret

0001519c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1519c:	defff904 	addi	sp,sp,-28
   151a0:	dfc00615 	stw	ra,24(sp)
   151a4:	df000515 	stw	fp,20(sp)
   151a8:	df000504 	addi	fp,sp,20
   151ac:	e13ffc15 	stw	r4,-16(fp)
   151b0:	e17ffd15 	stw	r5,-12(fp)
   151b4:	e1bffe15 	stw	r6,-8(fp)
   151b8:	e1ffff15 	stw	r7,-4(fp)
   151bc:	e0bfff17 	ldw	r2,-4(fp)
   151c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   151c4:	d0a6c117 	ldw	r2,-25852(gp)
   151c8:	1000021e 	bne	r2,zero,151d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   151cc:	e0bffb17 	ldw	r2,-20(fp)
   151d0:	d0a6c115 	stw	r2,-25852(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   151d4:	e0bffc17 	ldw	r2,-16(fp)
   151d8:	10800104 	addi	r2,r2,4
   151dc:	00c001c4 	movi	r3,7
   151e0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   151e4:	01800074 	movhi	r6,1
   151e8:	31944804 	addi	r6,r6,20768
   151ec:	e17ffc17 	ldw	r5,-16(fp)
   151f0:	e13ffe17 	ldw	r4,-8(fp)
   151f4:	0013aa00 	call	13aa0 <alt_irq_register>
#endif  
}
   151f8:	0001883a 	nop
   151fc:	e037883a 	mov	sp,fp
   15200:	dfc00117 	ldw	ra,4(sp)
   15204:	df000017 	ldw	fp,0(sp)
   15208:	dec00204 	addi	sp,sp,8
   1520c:	f800283a 	ret

00015210 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   15210:	defffc04 	addi	sp,sp,-16
   15214:	dfc00315 	stw	ra,12(sp)
   15218:	df000215 	stw	fp,8(sp)
   1521c:	df000204 	addi	fp,sp,8
   15220:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   15224:	d1600704 	addi	r5,gp,-32740
   15228:	e13fff17 	ldw	r4,-4(fp)
   1522c:	00158ac0 	call	158ac <alt_find_dev>
   15230:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   15234:	e0bffe17 	ldw	r2,-8(fp)
}
   15238:	e037883a 	mov	sp,fp
   1523c:	dfc00117 	ldw	ra,4(sp)
   15240:	df000017 	ldw	fp,0(sp)
   15244:	dec00204 	addi	sp,sp,8
   15248:	f800283a 	ret

0001524c <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   1524c:	defffd04 	addi	sp,sp,-12
   15250:	df000215 	stw	fp,8(sp)
   15254:	df000204 	addi	fp,sp,8
   15258:	e13ffe15 	stw	r4,-8(fp)
   1525c:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   15260:	e0bffe17 	ldw	r2,-8(fp)
   15264:	10800a17 	ldw	r2,40(r2)
   15268:	10800023 	ldbuio	r2,0(r2)
   1526c:	10803fcc 	andi	r2,r2,255
   15270:	1007883a 	mov	r3,r2
   15274:	e0bfff17 	ldw	r2,-4(fp)
   15278:	10c00005 	stb	r3,0(r2)

	return 0;
   1527c:	0005883a 	mov	r2,zero
}
   15280:	e037883a 	mov	sp,fp
   15284:	df000017 	ldw	fp,0(sp)
   15288:	dec00104 	addi	sp,sp,4
   1528c:	f800283a 	ret

00015290 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   15290:	defffc04 	addi	sp,sp,-16
   15294:	df000315 	stw	fp,12(sp)
   15298:	df000304 	addi	fp,sp,12
   1529c:	e13ffd15 	stw	r4,-12(fp)
   152a0:	2805883a 	mov	r2,r5
   152a4:	e1bfff15 	stw	r6,-4(fp)
   152a8:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   152ac:	e0bffd17 	ldw	r2,-12(fp)
   152b0:	10800a17 	ldw	r2,40(r2)
   152b4:	1007883a 	mov	r3,r2
   152b8:	e0bffe03 	ldbu	r2,-8(fp)
   152bc:	10800fcc 	andi	r2,r2,63
   152c0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   152c4:	e0bffd17 	ldw	r2,-12(fp)
   152c8:	10800a17 	ldw	r2,40(r2)
   152cc:	10800044 	addi	r2,r2,1
   152d0:	10800023 	ldbuio	r2,0(r2)
   152d4:	10803fcc 	andi	r2,r2,255
   152d8:	1007883a 	mov	r3,r2
   152dc:	e0bfff17 	ldw	r2,-4(fp)
   152e0:	10c00005 	stb	r3,0(r2)

	return 0;
   152e4:	0005883a 	mov	r2,zero
}
   152e8:	e037883a 	mov	sp,fp
   152ec:	df000017 	ldw	fp,0(sp)
   152f0:	dec00104 	addi	sp,sp,4
   152f4:	f800283a 	ret

000152f8 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   152f8:	defffc04 	addi	sp,sp,-16
   152fc:	df000315 	stw	fp,12(sp)
   15300:	df000304 	addi	fp,sp,12
   15304:	e13ffd15 	stw	r4,-12(fp)
   15308:	2807883a 	mov	r3,r5
   1530c:	3005883a 	mov	r2,r6
   15310:	e0fffe05 	stb	r3,-8(fp)
   15314:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15318:	e0bffd17 	ldw	r2,-12(fp)
   1531c:	10800a17 	ldw	r2,40(r2)
   15320:	1007883a 	mov	r3,r2
   15324:	e0bffe03 	ldbu	r2,-8(fp)
   15328:	10800fcc 	andi	r2,r2,63
   1532c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   15330:	e0bffd17 	ldw	r2,-12(fp)
   15334:	10800a17 	ldw	r2,40(r2)
   15338:	10800044 	addi	r2,r2,1
   1533c:	1007883a 	mov	r3,r2
   15340:	e0bfff03 	ldbu	r2,-4(fp)
   15344:	18800025 	stbio	r2,0(r3)

	return 0;
   15348:	0005883a 	mov	r2,zero
}
   1534c:	e037883a 	mov	sp,fp
   15350:	df000017 	ldw	fp,0(sp)
   15354:	dec00104 	addi	sp,sp,4
   15358:	f800283a 	ret

0001535c <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   1535c:	defffd04 	addi	sp,sp,-12
   15360:	df000215 	stw	fp,8(sp)
   15364:	df000204 	addi	fp,sp,8
   15368:	e13ffe15 	stw	r4,-8(fp)
   1536c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15370:	e0bffe17 	ldw	r2,-8(fp)
   15374:	10800a17 	ldw	r2,40(r2)
   15378:	1007883a 	mov	r3,r2
   1537c:	00800c84 	movi	r2,50
   15380:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15384:	e0bffe17 	ldw	r2,-8(fp)
   15388:	10800a17 	ldw	r2,40(r2)
   1538c:	10800044 	addi	r2,r2,1
   15390:	10800023 	ldbuio	r2,0(r2)
   15394:	10803fcc 	andi	r2,r2,255
   15398:	10ffffcc 	andi	r3,r2,65535
   1539c:	e0bfff17 	ldw	r2,-4(fp)
   153a0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   153a4:	e0bffe17 	ldw	r2,-8(fp)
   153a8:	10800a17 	ldw	r2,40(r2)
   153ac:	1007883a 	mov	r3,r2
   153b0:	00800cc4 	movi	r2,51
   153b4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   153b8:	e0bffe17 	ldw	r2,-8(fp)
   153bc:	10800a17 	ldw	r2,40(r2)
   153c0:	10800044 	addi	r2,r2,1
   153c4:	10800023 	ldbuio	r2,0(r2)
   153c8:	10803fcc 	andi	r2,r2,255
   153cc:	10bfffcc 	andi	r2,r2,65535
   153d0:	1004923a 	slli	r2,r2,8
   153d4:	e0ffff17 	ldw	r3,-4(fp)
   153d8:	18c00017 	ldw	r3,0(r3)
   153dc:	1885883a 	add	r2,r3,r2
   153e0:	1007883a 	mov	r3,r2
   153e4:	e0bfff17 	ldw	r2,-4(fp)
   153e8:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   153ec:	e0bfff17 	ldw	r2,-4(fp)
   153f0:	10800017 	ldw	r2,0(r2)
   153f4:	10a0000c 	andi	r2,r2,32768
   153f8:	10000626 	beq	r2,zero,15414 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   153fc:	e0bfff17 	ldw	r2,-4(fp)
   15400:	10800017 	ldw	r2,0(r2)
   15404:	10bffff4 	orhi	r2,r2,65535
   15408:	1007883a 	mov	r3,r2
   1540c:	e0bfff17 	ldw	r2,-4(fp)
   15410:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   15414:	0005883a 	mov	r2,zero
}
   15418:	e037883a 	mov	sp,fp
   1541c:	df000017 	ldw	fp,0(sp)
   15420:	dec00104 	addi	sp,sp,4
   15424:	f800283a 	ret

00015428 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   15428:	defffd04 	addi	sp,sp,-12
   1542c:	df000215 	stw	fp,8(sp)
   15430:	df000204 	addi	fp,sp,8
   15434:	e13ffe15 	stw	r4,-8(fp)
   15438:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1543c:	e0bffe17 	ldw	r2,-8(fp)
   15440:	10800a17 	ldw	r2,40(r2)
   15444:	1007883a 	mov	r3,r2
   15448:	00800d04 	movi	r2,52
   1544c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15450:	e0bffe17 	ldw	r2,-8(fp)
   15454:	10800a17 	ldw	r2,40(r2)
   15458:	10800044 	addi	r2,r2,1
   1545c:	10800023 	ldbuio	r2,0(r2)
   15460:	10803fcc 	andi	r2,r2,255
   15464:	10ffffcc 	andi	r3,r2,65535
   15468:	e0bfff17 	ldw	r2,-4(fp)
   1546c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15470:	e0bffe17 	ldw	r2,-8(fp)
   15474:	10800a17 	ldw	r2,40(r2)
   15478:	1007883a 	mov	r3,r2
   1547c:	00800d44 	movi	r2,53
   15480:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15484:	e0bffe17 	ldw	r2,-8(fp)
   15488:	10800a17 	ldw	r2,40(r2)
   1548c:	10800044 	addi	r2,r2,1
   15490:	10800023 	ldbuio	r2,0(r2)
   15494:	10803fcc 	andi	r2,r2,255
   15498:	10bfffcc 	andi	r2,r2,65535
   1549c:	1004923a 	slli	r2,r2,8
   154a0:	e0ffff17 	ldw	r3,-4(fp)
   154a4:	18c00017 	ldw	r3,0(r3)
   154a8:	1885883a 	add	r2,r3,r2
   154ac:	1007883a 	mov	r3,r2
   154b0:	e0bfff17 	ldw	r2,-4(fp)
   154b4:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   154b8:	e0bfff17 	ldw	r2,-4(fp)
   154bc:	10800017 	ldw	r2,0(r2)
   154c0:	10a0000c 	andi	r2,r2,32768
   154c4:	10000626 	beq	r2,zero,154e0 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   154c8:	e0bfff17 	ldw	r2,-4(fp)
   154cc:	10800017 	ldw	r2,0(r2)
   154d0:	10bffff4 	orhi	r2,r2,65535
   154d4:	1007883a 	mov	r3,r2
   154d8:	e0bfff17 	ldw	r2,-4(fp)
   154dc:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   154e0:	0005883a 	mov	r2,zero
}
   154e4:	e037883a 	mov	sp,fp
   154e8:	df000017 	ldw	fp,0(sp)
   154ec:	dec00104 	addi	sp,sp,4
   154f0:	f800283a 	ret

000154f4 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   154f4:	defffd04 	addi	sp,sp,-12
   154f8:	df000215 	stw	fp,8(sp)
   154fc:	df000204 	addi	fp,sp,8
   15500:	e13ffe15 	stw	r4,-8(fp)
   15504:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15508:	e0bffe17 	ldw	r2,-8(fp)
   1550c:	10800a17 	ldw	r2,40(r2)
   15510:	1007883a 	mov	r3,r2
   15514:	00800d84 	movi	r2,54
   15518:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1551c:	e0bffe17 	ldw	r2,-8(fp)
   15520:	10800a17 	ldw	r2,40(r2)
   15524:	10800044 	addi	r2,r2,1
   15528:	10800023 	ldbuio	r2,0(r2)
   1552c:	10803fcc 	andi	r2,r2,255
   15530:	10ffffcc 	andi	r3,r2,65535
   15534:	e0bfff17 	ldw	r2,-4(fp)
   15538:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1553c:	e0bffe17 	ldw	r2,-8(fp)
   15540:	10800a17 	ldw	r2,40(r2)
   15544:	1007883a 	mov	r3,r2
   15548:	00800dc4 	movi	r2,55
   1554c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15550:	e0bffe17 	ldw	r2,-8(fp)
   15554:	10800a17 	ldw	r2,40(r2)
   15558:	10800044 	addi	r2,r2,1
   1555c:	10800023 	ldbuio	r2,0(r2)
   15560:	10803fcc 	andi	r2,r2,255
   15564:	10bfffcc 	andi	r2,r2,65535
   15568:	1004923a 	slli	r2,r2,8
   1556c:	e0ffff17 	ldw	r3,-4(fp)
   15570:	18c00017 	ldw	r3,0(r3)
   15574:	1885883a 	add	r2,r3,r2
   15578:	1007883a 	mov	r3,r2
   1557c:	e0bfff17 	ldw	r2,-4(fp)
   15580:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   15584:	e0bfff17 	ldw	r2,-4(fp)
   15588:	10800017 	ldw	r2,0(r2)
   1558c:	10a0000c 	andi	r2,r2,32768
   15590:	10000626 	beq	r2,zero,155ac <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   15594:	e0bfff17 	ldw	r2,-4(fp)
   15598:	10800017 	ldw	r2,0(r2)
   1559c:	10bffff4 	orhi	r2,r2,65535
   155a0:	1007883a 	mov	r3,r2
   155a4:	e0bfff17 	ldw	r2,-4(fp)
   155a8:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   155ac:	0005883a 	mov	r2,zero
}
   155b0:	e037883a 	mov	sp,fp
   155b4:	df000017 	ldw	fp,0(sp)
   155b8:	dec00104 	addi	sp,sp,4
   155bc:	f800283a 	ret

000155c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   155c0:	defff504 	addi	sp,sp,-44
   155c4:	df000a15 	stw	fp,40(sp)
   155c8:	df000a04 	addi	fp,sp,40
   155cc:	e13ffc15 	stw	r4,-16(fp)
   155d0:	e17ffd15 	stw	r5,-12(fp)
   155d4:	e1bffe15 	stw	r6,-8(fp)
   155d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   155dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   155e0:	d0a6c117 	ldw	r2,-25852(gp)
  
  if (alt_ticks_per_second ())
   155e4:	10003c26 	beq	r2,zero,156d8 <alt_alarm_start+0x118>
  {
    if (alarm)
   155e8:	e0bffc17 	ldw	r2,-16(fp)
   155ec:	10003826 	beq	r2,zero,156d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   155f0:	e0bffc17 	ldw	r2,-16(fp)
   155f4:	e0fffe17 	ldw	r3,-8(fp)
   155f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   155fc:	e0bffc17 	ldw	r2,-16(fp)
   15600:	e0ffff17 	ldw	r3,-4(fp)
   15604:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15608:	0005303a 	rdctl	r2,status
   1560c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15610:	e0fff917 	ldw	r3,-28(fp)
   15614:	00bfff84 	movi	r2,-2
   15618:	1884703a 	and	r2,r3,r2
   1561c:	1001703a 	wrctl	status,r2
  
  return context;
   15620:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15624:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15628:	d0a6c217 	ldw	r2,-25848(gp)
      
      current_nticks = alt_nticks();
   1562c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15630:	e0fffd17 	ldw	r3,-12(fp)
   15634:	e0bff617 	ldw	r2,-40(fp)
   15638:	1885883a 	add	r2,r3,r2
   1563c:	10c00044 	addi	r3,r2,1
   15640:	e0bffc17 	ldw	r2,-16(fp)
   15644:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15648:	e0bffc17 	ldw	r2,-16(fp)
   1564c:	10c00217 	ldw	r3,8(r2)
   15650:	e0bff617 	ldw	r2,-40(fp)
   15654:	1880042e 	bgeu	r3,r2,15668 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15658:	e0bffc17 	ldw	r2,-16(fp)
   1565c:	00c00044 	movi	r3,1
   15660:	10c00405 	stb	r3,16(r2)
   15664:	00000206 	br	15670 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15668:	e0bffc17 	ldw	r2,-16(fp)
   1566c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15670:	e0bffc17 	ldw	r2,-16(fp)
   15674:	d0e00d04 	addi	r3,gp,-32716
   15678:	e0fffa15 	stw	r3,-24(fp)
   1567c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15680:	e0bffb17 	ldw	r2,-20(fp)
   15684:	e0fffa17 	ldw	r3,-24(fp)
   15688:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1568c:	e0bffa17 	ldw	r2,-24(fp)
   15690:	10c00017 	ldw	r3,0(r2)
   15694:	e0bffb17 	ldw	r2,-20(fp)
   15698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1569c:	e0bffa17 	ldw	r2,-24(fp)
   156a0:	10800017 	ldw	r2,0(r2)
   156a4:	e0fffb17 	ldw	r3,-20(fp)
   156a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   156ac:	e0bffa17 	ldw	r2,-24(fp)
   156b0:	e0fffb17 	ldw	r3,-20(fp)
   156b4:	10c00015 	stw	r3,0(r2)
   156b8:	e0bff817 	ldw	r2,-32(fp)
   156bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156c0:	e0bff717 	ldw	r2,-36(fp)
   156c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   156c8:	0005883a 	mov	r2,zero
   156cc:	00000306 	br	156dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   156d0:	00bffa84 	movi	r2,-22
   156d4:	00000106 	br	156dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   156d8:	00bfde84 	movi	r2,-134
  }
}
   156dc:	e037883a 	mov	sp,fp
   156e0:	df000017 	ldw	fp,0(sp)
   156e4:	dec00104 	addi	sp,sp,4
   156e8:	f800283a 	ret

000156ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   156ec:	deffff04 	addi	sp,sp,-4
   156f0:	df000015 	stw	fp,0(sp)
   156f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   156f8:	0001883a 	nop
   156fc:	e037883a 	mov	sp,fp
   15700:	df000017 	ldw	fp,0(sp)
   15704:	dec00104 	addi	sp,sp,4
   15708:	f800283a 	ret

0001570c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1570c:	defffe04 	addi	sp,sp,-8
   15710:	dfc00115 	stw	ra,4(sp)
   15714:	df000015 	stw	fp,0(sp)
   15718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1571c:	d0a00a17 	ldw	r2,-32728(gp)
   15720:	10000326 	beq	r2,zero,15730 <alt_get_errno+0x24>
   15724:	d0a00a17 	ldw	r2,-32728(gp)
   15728:	103ee83a 	callr	r2
   1572c:	00000106 	br	15734 <alt_get_errno+0x28>
   15730:	d0a6bc04 	addi	r2,gp,-25872
}
   15734:	e037883a 	mov	sp,fp
   15738:	dfc00117 	ldw	ra,4(sp)
   1573c:	df000017 	ldw	fp,0(sp)
   15740:	dec00204 	addi	sp,sp,8
   15744:	f800283a 	ret

00015748 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15748:	defffa04 	addi	sp,sp,-24
   1574c:	dfc00515 	stw	ra,20(sp)
   15750:	df000415 	stw	fp,16(sp)
   15754:	df000404 	addi	fp,sp,16
   15758:	e13ffe15 	stw	r4,-8(fp)
   1575c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15760:	e0bffe17 	ldw	r2,-8(fp)
   15764:	10000326 	beq	r2,zero,15774 <alt_dev_llist_insert+0x2c>
   15768:	e0bffe17 	ldw	r2,-8(fp)
   1576c:	10800217 	ldw	r2,8(r2)
   15770:	1000061e 	bne	r2,zero,1578c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15774:	001570c0 	call	1570c <alt_get_errno>
   15778:	1007883a 	mov	r3,r2
   1577c:	00800584 	movi	r2,22
   15780:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15784:	00bffa84 	movi	r2,-22
   15788:	00001306 	br	157d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1578c:	e0bffe17 	ldw	r2,-8(fp)
   15790:	e0ffff17 	ldw	r3,-4(fp)
   15794:	e0fffc15 	stw	r3,-16(fp)
   15798:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1579c:	e0bffd17 	ldw	r2,-12(fp)
   157a0:	e0fffc17 	ldw	r3,-16(fp)
   157a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   157a8:	e0bffc17 	ldw	r2,-16(fp)
   157ac:	10c00017 	ldw	r3,0(r2)
   157b0:	e0bffd17 	ldw	r2,-12(fp)
   157b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   157b8:	e0bffc17 	ldw	r2,-16(fp)
   157bc:	10800017 	ldw	r2,0(r2)
   157c0:	e0fffd17 	ldw	r3,-12(fp)
   157c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   157c8:	e0bffc17 	ldw	r2,-16(fp)
   157cc:	e0fffd17 	ldw	r3,-12(fp)
   157d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   157d4:	0005883a 	mov	r2,zero
}
   157d8:	e037883a 	mov	sp,fp
   157dc:	dfc00117 	ldw	ra,4(sp)
   157e0:	df000017 	ldw	fp,0(sp)
   157e4:	dec00204 	addi	sp,sp,8
   157e8:	f800283a 	ret

000157ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   157ec:	defffd04 	addi	sp,sp,-12
   157f0:	dfc00215 	stw	ra,8(sp)
   157f4:	df000115 	stw	fp,4(sp)
   157f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   157fc:	00800074 	movhi	r2,1
   15800:	1099f004 	addi	r2,r2,26560
   15804:	e0bfff15 	stw	r2,-4(fp)
   15808:	00000606 	br	15824 <_do_ctors+0x38>
        (*ctor) (); 
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	10800017 	ldw	r2,0(r2)
   15814:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15818:	e0bfff17 	ldw	r2,-4(fp)
   1581c:	10bfff04 	addi	r2,r2,-4
   15820:	e0bfff15 	stw	r2,-4(fp)
   15824:	e0ffff17 	ldw	r3,-4(fp)
   15828:	00800074 	movhi	r2,1
   1582c:	1099f104 	addi	r2,r2,26564
   15830:	18bff62e 	bgeu	r3,r2,1580c <_gp+0xffff5500>
        (*ctor) (); 
}
   15834:	0001883a 	nop
   15838:	e037883a 	mov	sp,fp
   1583c:	dfc00117 	ldw	ra,4(sp)
   15840:	df000017 	ldw	fp,0(sp)
   15844:	dec00204 	addi	sp,sp,8
   15848:	f800283a 	ret

0001584c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1584c:	defffd04 	addi	sp,sp,-12
   15850:	dfc00215 	stw	ra,8(sp)
   15854:	df000115 	stw	fp,4(sp)
   15858:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1585c:	00800074 	movhi	r2,1
   15860:	1099f004 	addi	r2,r2,26560
   15864:	e0bfff15 	stw	r2,-4(fp)
   15868:	00000606 	br	15884 <_do_dtors+0x38>
        (*dtor) (); 
   1586c:	e0bfff17 	ldw	r2,-4(fp)
   15870:	10800017 	ldw	r2,0(r2)
   15874:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15878:	e0bfff17 	ldw	r2,-4(fp)
   1587c:	10bfff04 	addi	r2,r2,-4
   15880:	e0bfff15 	stw	r2,-4(fp)
   15884:	e0ffff17 	ldw	r3,-4(fp)
   15888:	00800074 	movhi	r2,1
   1588c:	1099f104 	addi	r2,r2,26564
   15890:	18bff62e 	bgeu	r3,r2,1586c <_gp+0xffff5560>
        (*dtor) (); 
}
   15894:	0001883a 	nop
   15898:	e037883a 	mov	sp,fp
   1589c:	dfc00117 	ldw	ra,4(sp)
   158a0:	df000017 	ldw	fp,0(sp)
   158a4:	dec00204 	addi	sp,sp,8
   158a8:	f800283a 	ret

000158ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   158ac:	defffa04 	addi	sp,sp,-24
   158b0:	dfc00515 	stw	ra,20(sp)
   158b4:	df000415 	stw	fp,16(sp)
   158b8:	df000404 	addi	fp,sp,16
   158bc:	e13ffe15 	stw	r4,-8(fp)
   158c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   158c4:	e0bfff17 	ldw	r2,-4(fp)
   158c8:	10800017 	ldw	r2,0(r2)
   158cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   158d0:	e13ffe17 	ldw	r4,-8(fp)
   158d4:	0010b5c0 	call	10b5c <strlen>
   158d8:	10800044 	addi	r2,r2,1
   158dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   158e0:	00000d06 	br	15918 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   158e4:	e0bffc17 	ldw	r2,-16(fp)
   158e8:	10800217 	ldw	r2,8(r2)
   158ec:	e0fffd17 	ldw	r3,-12(fp)
   158f0:	180d883a 	mov	r6,r3
   158f4:	e17ffe17 	ldw	r5,-8(fp)
   158f8:	1009883a 	mov	r4,r2
   158fc:	00161bc0 	call	161bc <memcmp>
   15900:	1000021e 	bne	r2,zero,1590c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15904:	e0bffc17 	ldw	r2,-16(fp)
   15908:	00000706 	br	15928 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1590c:	e0bffc17 	ldw	r2,-16(fp)
   15910:	10800017 	ldw	r2,0(r2)
   15914:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15918:	e0fffc17 	ldw	r3,-16(fp)
   1591c:	e0bfff17 	ldw	r2,-4(fp)
   15920:	18bff01e 	bne	r3,r2,158e4 <_gp+0xffff55d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15924:	0005883a 	mov	r2,zero
}
   15928:	e037883a 	mov	sp,fp
   1592c:	dfc00117 	ldw	ra,4(sp)
   15930:	df000017 	ldw	fp,0(sp)
   15934:	dec00204 	addi	sp,sp,8
   15938:	f800283a 	ret

0001593c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1593c:	deffff04 	addi	sp,sp,-4
   15940:	df000015 	stw	fp,0(sp)
   15944:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15948:	0001883a 	nop
   1594c:	e037883a 	mov	sp,fp
   15950:	df000017 	ldw	fp,0(sp)
   15954:	dec00104 	addi	sp,sp,4
   15958:	f800283a 	ret

0001595c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1595c:	defff804 	addi	sp,sp,-32
   15960:	dfc00715 	stw	ra,28(sp)
   15964:	df000615 	stw	fp,24(sp)
   15968:	dc000515 	stw	r16,20(sp)
   1596c:	df000604 	addi	fp,sp,24
   15970:	e13ffb15 	stw	r4,-20(fp)
   15974:	e17ffc15 	stw	r5,-16(fp)
   15978:	e1bffd15 	stw	r6,-12(fp)
   1597c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   15980:	e1bffe17 	ldw	r6,-8(fp)
   15984:	e17ffd17 	ldw	r5,-12(fp)
   15988:	e13ffc17 	ldw	r4,-16(fp)
   1598c:	0015be40 	call	15be4 <open>
   15990:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   15994:	e0bffa17 	ldw	r2,-24(fp)
   15998:	10002216 	blt	r2,zero,15a24 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1599c:	04000074 	movhi	r16,1
   159a0:	841c4004 	addi	r16,r16,28928
   159a4:	e0bffa17 	ldw	r2,-24(fp)
   159a8:	01400304 	movi	r5,12
   159ac:	1009883a 	mov	r4,r2
   159b0:	0010a600 	call	10a60 <__mulsi3>
   159b4:	8085883a 	add	r2,r16,r2
   159b8:	10c00017 	ldw	r3,0(r2)
   159bc:	e0bffb17 	ldw	r2,-20(fp)
   159c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   159c4:	04000074 	movhi	r16,1
   159c8:	841c4004 	addi	r16,r16,28928
   159cc:	e0bffa17 	ldw	r2,-24(fp)
   159d0:	01400304 	movi	r5,12
   159d4:	1009883a 	mov	r4,r2
   159d8:	0010a600 	call	10a60 <__mulsi3>
   159dc:	8085883a 	add	r2,r16,r2
   159e0:	10800104 	addi	r2,r2,4
   159e4:	10c00017 	ldw	r3,0(r2)
   159e8:	e0bffb17 	ldw	r2,-20(fp)
   159ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   159f0:	04000074 	movhi	r16,1
   159f4:	841c4004 	addi	r16,r16,28928
   159f8:	e0bffa17 	ldw	r2,-24(fp)
   159fc:	01400304 	movi	r5,12
   15a00:	1009883a 	mov	r4,r2
   15a04:	0010a600 	call	10a60 <__mulsi3>
   15a08:	8085883a 	add	r2,r16,r2
   15a0c:	10800204 	addi	r2,r2,8
   15a10:	10c00017 	ldw	r3,0(r2)
   15a14:	e0bffb17 	ldw	r2,-20(fp)
   15a18:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15a1c:	e13ffa17 	ldw	r4,-24(fp)
   15a20:	00143780 	call	14378 <alt_release_fd>
  }
} 
   15a24:	0001883a 	nop
   15a28:	e6ffff04 	addi	sp,fp,-4
   15a2c:	dfc00217 	ldw	ra,8(sp)
   15a30:	df000117 	ldw	fp,4(sp)
   15a34:	dc000017 	ldw	r16,0(sp)
   15a38:	dec00304 	addi	sp,sp,12
   15a3c:	f800283a 	ret

00015a40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15a40:	defffb04 	addi	sp,sp,-20
   15a44:	dfc00415 	stw	ra,16(sp)
   15a48:	df000315 	stw	fp,12(sp)
   15a4c:	df000304 	addi	fp,sp,12
   15a50:	e13ffd15 	stw	r4,-12(fp)
   15a54:	e17ffe15 	stw	r5,-8(fp)
   15a58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15a5c:	01c07fc4 	movi	r7,511
   15a60:	01800044 	movi	r6,1
   15a64:	e17ffd17 	ldw	r5,-12(fp)
   15a68:	01000074 	movhi	r4,1
   15a6c:	211c4304 	addi	r4,r4,28940
   15a70:	001595c0 	call	1595c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15a74:	01c07fc4 	movi	r7,511
   15a78:	000d883a 	mov	r6,zero
   15a7c:	e17ffe17 	ldw	r5,-8(fp)
   15a80:	01000074 	movhi	r4,1
   15a84:	211c4004 	addi	r4,r4,28928
   15a88:	001595c0 	call	1595c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15a8c:	01c07fc4 	movi	r7,511
   15a90:	01800044 	movi	r6,1
   15a94:	e17fff17 	ldw	r5,-4(fp)
   15a98:	01000074 	movhi	r4,1
   15a9c:	211c4604 	addi	r4,r4,28952
   15aa0:	001595c0 	call	1595c <alt_open_fd>
}  
   15aa4:	0001883a 	nop
   15aa8:	e037883a 	mov	sp,fp
   15aac:	dfc00117 	ldw	ra,4(sp)
   15ab0:	df000017 	ldw	fp,0(sp)
   15ab4:	dec00204 	addi	sp,sp,8
   15ab8:	f800283a 	ret

00015abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15abc:	defffe04 	addi	sp,sp,-8
   15ac0:	dfc00115 	stw	ra,4(sp)
   15ac4:	df000015 	stw	fp,0(sp)
   15ac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15acc:	d0a00a17 	ldw	r2,-32728(gp)
   15ad0:	10000326 	beq	r2,zero,15ae0 <alt_get_errno+0x24>
   15ad4:	d0a00a17 	ldw	r2,-32728(gp)
   15ad8:	103ee83a 	callr	r2
   15adc:	00000106 	br	15ae4 <alt_get_errno+0x28>
   15ae0:	d0a6bc04 	addi	r2,gp,-25872
}
   15ae4:	e037883a 	mov	sp,fp
   15ae8:	dfc00117 	ldw	ra,4(sp)
   15aec:	df000017 	ldw	fp,0(sp)
   15af0:	dec00204 	addi	sp,sp,8
   15af4:	f800283a 	ret

00015af8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15af8:	defffb04 	addi	sp,sp,-20
   15afc:	dfc00415 	stw	ra,16(sp)
   15b00:	df000315 	stw	fp,12(sp)
   15b04:	dc000215 	stw	r16,8(sp)
   15b08:	df000304 	addi	fp,sp,12
   15b0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15b10:	e0bffe17 	ldw	r2,-8(fp)
   15b14:	10800217 	ldw	r2,8(r2)
   15b18:	10d00034 	orhi	r3,r2,16384
   15b1c:	e0bffe17 	ldw	r2,-8(fp)
   15b20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15b24:	e03ffd15 	stw	zero,-12(fp)
   15b28:	00002306 	br	15bb8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b2c:	04000074 	movhi	r16,1
   15b30:	841c4004 	addi	r16,r16,28928
   15b34:	e0bffd17 	ldw	r2,-12(fp)
   15b38:	01400304 	movi	r5,12
   15b3c:	1009883a 	mov	r4,r2
   15b40:	0010a600 	call	10a60 <__mulsi3>
   15b44:	8085883a 	add	r2,r16,r2
   15b48:	10c00017 	ldw	r3,0(r2)
   15b4c:	e0bffe17 	ldw	r2,-8(fp)
   15b50:	10800017 	ldw	r2,0(r2)
   15b54:	1880151e 	bne	r3,r2,15bac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b58:	04000074 	movhi	r16,1
   15b5c:	841c4004 	addi	r16,r16,28928
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	01400304 	movi	r5,12
   15b68:	1009883a 	mov	r4,r2
   15b6c:	0010a600 	call	10a60 <__mulsi3>
   15b70:	8085883a 	add	r2,r16,r2
   15b74:	10800204 	addi	r2,r2,8
   15b78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b7c:	10000b0e 	bge	r2,zero,15bac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15b80:	01400304 	movi	r5,12
   15b84:	e13ffd17 	ldw	r4,-12(fp)
   15b88:	0010a600 	call	10a60 <__mulsi3>
   15b8c:	1007883a 	mov	r3,r2
   15b90:	00800074 	movhi	r2,1
   15b94:	109c4004 	addi	r2,r2,28928
   15b98:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b9c:	e0bffe17 	ldw	r2,-8(fp)
   15ba0:	18800226 	beq	r3,r2,15bac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15ba4:	00bffcc4 	movi	r2,-13
   15ba8:	00000806 	br	15bcc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15bac:	e0bffd17 	ldw	r2,-12(fp)
   15bb0:	10800044 	addi	r2,r2,1
   15bb4:	e0bffd15 	stw	r2,-12(fp)
   15bb8:	d0a00917 	ldw	r2,-32732(gp)
   15bbc:	1007883a 	mov	r3,r2
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	18bfd92e 	bgeu	r3,r2,15b2c <_gp+0xffff5820>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15bc8:	0005883a 	mov	r2,zero
}
   15bcc:	e6ffff04 	addi	sp,fp,-4
   15bd0:	dfc00217 	ldw	ra,8(sp)
   15bd4:	df000117 	ldw	fp,4(sp)
   15bd8:	dc000017 	ldw	r16,0(sp)
   15bdc:	dec00304 	addi	sp,sp,12
   15be0:	f800283a 	ret

00015be4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15be4:	defff604 	addi	sp,sp,-40
   15be8:	dfc00915 	stw	ra,36(sp)
   15bec:	df000815 	stw	fp,32(sp)
   15bf0:	df000804 	addi	fp,sp,32
   15bf4:	e13ffd15 	stw	r4,-12(fp)
   15bf8:	e17ffe15 	stw	r5,-8(fp)
   15bfc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15c00:	00bfffc4 	movi	r2,-1
   15c04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15c08:	00bffb44 	movi	r2,-19
   15c0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15c10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15c14:	d1600704 	addi	r5,gp,-32740
   15c18:	e13ffd17 	ldw	r4,-12(fp)
   15c1c:	00158ac0 	call	158ac <alt_find_dev>
   15c20:	e0bff815 	stw	r2,-32(fp)
   15c24:	e0bff817 	ldw	r2,-32(fp)
   15c28:	1000051e 	bne	r2,zero,15c40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15c2c:	e13ffd17 	ldw	r4,-12(fp)
   15c30:	0015f080 	call	15f08 <alt_find_file>
   15c34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15c38:	00800044 	movi	r2,1
   15c3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15c40:	e0bff817 	ldw	r2,-32(fp)
   15c44:	10002b26 	beq	r2,zero,15cf4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15c48:	e13ff817 	ldw	r4,-32(fp)
   15c4c:	00160100 	call	16010 <alt_get_fd>
   15c50:	e0bff915 	stw	r2,-28(fp)
   15c54:	e0bff917 	ldw	r2,-28(fp)
   15c58:	1000030e 	bge	r2,zero,15c68 <open+0x84>
    {
      status = index;
   15c5c:	e0bff917 	ldw	r2,-28(fp)
   15c60:	e0bffa15 	stw	r2,-24(fp)
   15c64:	00002506 	br	15cfc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15c68:	01400304 	movi	r5,12
   15c6c:	e13ff917 	ldw	r4,-28(fp)
   15c70:	0010a600 	call	10a60 <__mulsi3>
   15c74:	1007883a 	mov	r3,r2
   15c78:	00800074 	movhi	r2,1
   15c7c:	109c4004 	addi	r2,r2,28928
   15c80:	1885883a 	add	r2,r3,r2
   15c84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15c88:	e0fffe17 	ldw	r3,-8(fp)
   15c8c:	00900034 	movhi	r2,16384
   15c90:	10bfffc4 	addi	r2,r2,-1
   15c94:	1886703a 	and	r3,r3,r2
   15c98:	e0bffc17 	ldw	r2,-16(fp)
   15c9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15ca0:	e0bffb17 	ldw	r2,-20(fp)
   15ca4:	1000051e 	bne	r2,zero,15cbc <open+0xd8>
   15ca8:	e13ffc17 	ldw	r4,-16(fp)
   15cac:	0015af80 	call	15af8 <alt_file_locked>
   15cb0:	e0bffa15 	stw	r2,-24(fp)
   15cb4:	e0bffa17 	ldw	r2,-24(fp)
   15cb8:	10001016 	blt	r2,zero,15cfc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15cbc:	e0bff817 	ldw	r2,-32(fp)
   15cc0:	10800317 	ldw	r2,12(r2)
   15cc4:	10000826 	beq	r2,zero,15ce8 <open+0x104>
   15cc8:	e0bff817 	ldw	r2,-32(fp)
   15ccc:	10800317 	ldw	r2,12(r2)
   15cd0:	e1ffff17 	ldw	r7,-4(fp)
   15cd4:	e1bffe17 	ldw	r6,-8(fp)
   15cd8:	e17ffd17 	ldw	r5,-12(fp)
   15cdc:	e13ffc17 	ldw	r4,-16(fp)
   15ce0:	103ee83a 	callr	r2
   15ce4:	00000106 	br	15cec <open+0x108>
   15ce8:	0005883a 	mov	r2,zero
   15cec:	e0bffa15 	stw	r2,-24(fp)
   15cf0:	00000206 	br	15cfc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15cf4:	00bffb44 	movi	r2,-19
   15cf8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15cfc:	e0bffa17 	ldw	r2,-24(fp)
   15d00:	1000090e 	bge	r2,zero,15d28 <open+0x144>
  {
    alt_release_fd (index);  
   15d04:	e13ff917 	ldw	r4,-28(fp)
   15d08:	00143780 	call	14378 <alt_release_fd>
    ALT_ERRNO = -status;
   15d0c:	0015abc0 	call	15abc <alt_get_errno>
   15d10:	1007883a 	mov	r3,r2
   15d14:	e0bffa17 	ldw	r2,-24(fp)
   15d18:	0085c83a 	sub	r2,zero,r2
   15d1c:	18800015 	stw	r2,0(r3)
    return -1;
   15d20:	00bfffc4 	movi	r2,-1
   15d24:	00000106 	br	15d2c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15d28:	e0bff917 	ldw	r2,-28(fp)
}
   15d2c:	e037883a 	mov	sp,fp
   15d30:	dfc00117 	ldw	ra,4(sp)
   15d34:	df000017 	ldw	fp,0(sp)
   15d38:	dec00204 	addi	sp,sp,8
   15d3c:	f800283a 	ret

00015d40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15d40:	defffa04 	addi	sp,sp,-24
   15d44:	df000515 	stw	fp,20(sp)
   15d48:	df000504 	addi	fp,sp,20
   15d4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d50:	0005303a 	rdctl	r2,status
   15d54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d58:	e0fffc17 	ldw	r3,-16(fp)
   15d5c:	00bfff84 	movi	r2,-2
   15d60:	1884703a 	and	r2,r3,r2
   15d64:	1001703a 	wrctl	status,r2
  
  return context;
   15d68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15d6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15d70:	e0bfff17 	ldw	r2,-4(fp)
   15d74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15d78:	e0bffd17 	ldw	r2,-12(fp)
   15d7c:	10800017 	ldw	r2,0(r2)
   15d80:	e0fffd17 	ldw	r3,-12(fp)
   15d84:	18c00117 	ldw	r3,4(r3)
   15d88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15d8c:	e0bffd17 	ldw	r2,-12(fp)
   15d90:	10800117 	ldw	r2,4(r2)
   15d94:	e0fffd17 	ldw	r3,-12(fp)
   15d98:	18c00017 	ldw	r3,0(r3)
   15d9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15da0:	e0bffd17 	ldw	r2,-12(fp)
   15da4:	e0fffd17 	ldw	r3,-12(fp)
   15da8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15dac:	e0bffd17 	ldw	r2,-12(fp)
   15db0:	e0fffd17 	ldw	r3,-12(fp)
   15db4:	10c00015 	stw	r3,0(r2)
   15db8:	e0bffb17 	ldw	r2,-20(fp)
   15dbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15dc0:	e0bffe17 	ldw	r2,-8(fp)
   15dc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15dc8:	0001883a 	nop
   15dcc:	e037883a 	mov	sp,fp
   15dd0:	df000017 	ldw	fp,0(sp)
   15dd4:	dec00104 	addi	sp,sp,4
   15dd8:	f800283a 	ret

00015ddc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15ddc:	defffb04 	addi	sp,sp,-20
   15de0:	dfc00415 	stw	ra,16(sp)
   15de4:	df000315 	stw	fp,12(sp)
   15de8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15dec:	d0a00d17 	ldw	r2,-32716(gp)
   15df0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15df4:	d0a6c217 	ldw	r2,-25848(gp)
   15df8:	10800044 	addi	r2,r2,1
   15dfc:	d0a6c215 	stw	r2,-25848(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15e00:	00002e06 	br	15ebc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15e04:	e0bffd17 	ldw	r2,-12(fp)
   15e08:	10800017 	ldw	r2,0(r2)
   15e0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15e10:	e0bffd17 	ldw	r2,-12(fp)
   15e14:	10800403 	ldbu	r2,16(r2)
   15e18:	10803fcc 	andi	r2,r2,255
   15e1c:	10000426 	beq	r2,zero,15e30 <alt_tick+0x54>
   15e20:	d0a6c217 	ldw	r2,-25848(gp)
   15e24:	1000021e 	bne	r2,zero,15e30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15e28:	e0bffd17 	ldw	r2,-12(fp)
   15e2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15e30:	e0bffd17 	ldw	r2,-12(fp)
   15e34:	10800217 	ldw	r2,8(r2)
   15e38:	d0e6c217 	ldw	r3,-25848(gp)
   15e3c:	18801d36 	bltu	r3,r2,15eb4 <alt_tick+0xd8>
   15e40:	e0bffd17 	ldw	r2,-12(fp)
   15e44:	10800403 	ldbu	r2,16(r2)
   15e48:	10803fcc 	andi	r2,r2,255
   15e4c:	1000191e 	bne	r2,zero,15eb4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15e50:	e0bffd17 	ldw	r2,-12(fp)
   15e54:	10800317 	ldw	r2,12(r2)
   15e58:	e0fffd17 	ldw	r3,-12(fp)
   15e5c:	18c00517 	ldw	r3,20(r3)
   15e60:	1809883a 	mov	r4,r3
   15e64:	103ee83a 	callr	r2
   15e68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15e6c:	e0bfff17 	ldw	r2,-4(fp)
   15e70:	1000031e 	bne	r2,zero,15e80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15e74:	e13ffd17 	ldw	r4,-12(fp)
   15e78:	0015d400 	call	15d40 <alt_alarm_stop>
   15e7c:	00000d06 	br	15eb4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15e80:	e0bffd17 	ldw	r2,-12(fp)
   15e84:	10c00217 	ldw	r3,8(r2)
   15e88:	e0bfff17 	ldw	r2,-4(fp)
   15e8c:	1887883a 	add	r3,r3,r2
   15e90:	e0bffd17 	ldw	r2,-12(fp)
   15e94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15e98:	e0bffd17 	ldw	r2,-12(fp)
   15e9c:	10c00217 	ldw	r3,8(r2)
   15ea0:	d0a6c217 	ldw	r2,-25848(gp)
   15ea4:	1880032e 	bgeu	r3,r2,15eb4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15ea8:	e0bffd17 	ldw	r2,-12(fp)
   15eac:	00c00044 	movi	r3,1
   15eb0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15eb4:	e0bffe17 	ldw	r2,-8(fp)
   15eb8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15ebc:	e0fffd17 	ldw	r3,-12(fp)
   15ec0:	d0a00d04 	addi	r2,gp,-32716
   15ec4:	18bfcf1e 	bne	r3,r2,15e04 <_gp+0xffff5af8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15ec8:	0001883a 	nop
}
   15ecc:	0001883a 	nop
   15ed0:	e037883a 	mov	sp,fp
   15ed4:	dfc00117 	ldw	ra,4(sp)
   15ed8:	df000017 	ldw	fp,0(sp)
   15edc:	dec00204 	addi	sp,sp,8
   15ee0:	f800283a 	ret

00015ee4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15ee4:	deffff04 	addi	sp,sp,-4
   15ee8:	df000015 	stw	fp,0(sp)
   15eec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15ef0:	000170fa 	wrctl	ienable,zero
}
   15ef4:	0001883a 	nop
   15ef8:	e037883a 	mov	sp,fp
   15efc:	df000017 	ldw	fp,0(sp)
   15f00:	dec00104 	addi	sp,sp,4
   15f04:	f800283a 	ret

00015f08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15f08:	defffb04 	addi	sp,sp,-20
   15f0c:	dfc00415 	stw	ra,16(sp)
   15f10:	df000315 	stw	fp,12(sp)
   15f14:	df000304 	addi	fp,sp,12
   15f18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15f1c:	d0a00517 	ldw	r2,-32748(gp)
   15f20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15f24:	00003106 	br	15fec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15f28:	e0bffd17 	ldw	r2,-12(fp)
   15f2c:	10800217 	ldw	r2,8(r2)
   15f30:	1009883a 	mov	r4,r2
   15f34:	0010b5c0 	call	10b5c <strlen>
   15f38:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15f3c:	e0bffd17 	ldw	r2,-12(fp)
   15f40:	10c00217 	ldw	r3,8(r2)
   15f44:	e0bffe17 	ldw	r2,-8(fp)
   15f48:	10bfffc4 	addi	r2,r2,-1
   15f4c:	1885883a 	add	r2,r3,r2
   15f50:	10800003 	ldbu	r2,0(r2)
   15f54:	10803fcc 	andi	r2,r2,255
   15f58:	1080201c 	xori	r2,r2,128
   15f5c:	10bfe004 	addi	r2,r2,-128
   15f60:	10800bd8 	cmpnei	r2,r2,47
   15f64:	1000031e 	bne	r2,zero,15f74 <alt_find_file+0x6c>
    {
      len -= 1;
   15f68:	e0bffe17 	ldw	r2,-8(fp)
   15f6c:	10bfffc4 	addi	r2,r2,-1
   15f70:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15f74:	e0bffe17 	ldw	r2,-8(fp)
   15f78:	e0ffff17 	ldw	r3,-4(fp)
   15f7c:	1885883a 	add	r2,r3,r2
   15f80:	10800003 	ldbu	r2,0(r2)
   15f84:	10803fcc 	andi	r2,r2,255
   15f88:	1080201c 	xori	r2,r2,128
   15f8c:	10bfe004 	addi	r2,r2,-128
   15f90:	10800be0 	cmpeqi	r2,r2,47
   15f94:	1000081e 	bne	r2,zero,15fb8 <alt_find_file+0xb0>
   15f98:	e0bffe17 	ldw	r2,-8(fp)
   15f9c:	e0ffff17 	ldw	r3,-4(fp)
   15fa0:	1885883a 	add	r2,r3,r2
   15fa4:	10800003 	ldbu	r2,0(r2)
   15fa8:	10803fcc 	andi	r2,r2,255
   15fac:	1080201c 	xori	r2,r2,128
   15fb0:	10bfe004 	addi	r2,r2,-128
   15fb4:	10000a1e 	bne	r2,zero,15fe0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15fb8:	e0bffd17 	ldw	r2,-12(fp)
   15fbc:	10800217 	ldw	r2,8(r2)
   15fc0:	e0fffe17 	ldw	r3,-8(fp)
   15fc4:	180d883a 	mov	r6,r3
   15fc8:	e17fff17 	ldw	r5,-4(fp)
   15fcc:	1009883a 	mov	r4,r2
   15fd0:	00161bc0 	call	161bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15fd4:	1000021e 	bne	r2,zero,15fe0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15fd8:	e0bffd17 	ldw	r2,-12(fp)
   15fdc:	00000706 	br	15ffc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15fe0:	e0bffd17 	ldw	r2,-12(fp)
   15fe4:	10800017 	ldw	r2,0(r2)
   15fe8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15fec:	e0fffd17 	ldw	r3,-12(fp)
   15ff0:	d0a00504 	addi	r2,gp,-32748
   15ff4:	18bfcc1e 	bne	r3,r2,15f28 <_gp+0xffff5c1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15ff8:	0005883a 	mov	r2,zero
}
   15ffc:	e037883a 	mov	sp,fp
   16000:	dfc00117 	ldw	ra,4(sp)
   16004:	df000017 	ldw	fp,0(sp)
   16008:	dec00204 	addi	sp,sp,8
   1600c:	f800283a 	ret

00016010 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16010:	defffa04 	addi	sp,sp,-24
   16014:	dfc00515 	stw	ra,20(sp)
   16018:	df000415 	stw	fp,16(sp)
   1601c:	dc000315 	stw	r16,12(sp)
   16020:	df000404 	addi	fp,sp,16
   16024:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   16028:	00bffa04 	movi	r2,-24
   1602c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16030:	e03ffc15 	stw	zero,-16(fp)
   16034:	00001d06 	br	160ac <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   16038:	04000074 	movhi	r16,1
   1603c:	841c4004 	addi	r16,r16,28928
   16040:	e0bffc17 	ldw	r2,-16(fp)
   16044:	01400304 	movi	r5,12
   16048:	1009883a 	mov	r4,r2
   1604c:	0010a600 	call	10a60 <__mulsi3>
   16050:	8085883a 	add	r2,r16,r2
   16054:	10800017 	ldw	r2,0(r2)
   16058:	1000111e 	bne	r2,zero,160a0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1605c:	04000074 	movhi	r16,1
   16060:	841c4004 	addi	r16,r16,28928
   16064:	e0bffc17 	ldw	r2,-16(fp)
   16068:	01400304 	movi	r5,12
   1606c:	1009883a 	mov	r4,r2
   16070:	0010a600 	call	10a60 <__mulsi3>
   16074:	8085883a 	add	r2,r16,r2
   16078:	e0fffe17 	ldw	r3,-8(fp)
   1607c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   16080:	d0e00917 	ldw	r3,-32732(gp)
   16084:	e0bffc17 	ldw	r2,-16(fp)
   16088:	1880020e 	bge	r3,r2,16094 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1608c:	e0bffc17 	ldw	r2,-16(fp)
   16090:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   16094:	e0bffc17 	ldw	r2,-16(fp)
   16098:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1609c:	00000606 	br	160b8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   160a0:	e0bffc17 	ldw	r2,-16(fp)
   160a4:	10800044 	addi	r2,r2,1
   160a8:	e0bffc15 	stw	r2,-16(fp)
   160ac:	e0bffc17 	ldw	r2,-16(fp)
   160b0:	10800810 	cmplti	r2,r2,32
   160b4:	103fe01e 	bne	r2,zero,16038 <_gp+0xffff5d2c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   160b8:	e0bffd17 	ldw	r2,-12(fp)
}
   160bc:	e6ffff04 	addi	sp,fp,-4
   160c0:	dfc00217 	ldw	ra,8(sp)
   160c4:	df000117 	ldw	fp,4(sp)
   160c8:	dc000017 	ldw	r16,0(sp)
   160cc:	dec00304 	addi	sp,sp,12
   160d0:	f800283a 	ret

000160d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   160d4:	defffe04 	addi	sp,sp,-8
   160d8:	df000115 	stw	fp,4(sp)
   160dc:	df000104 	addi	fp,sp,4
   160e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   160e4:	e0bfff17 	ldw	r2,-4(fp)
   160e8:	10bffe84 	addi	r2,r2,-6
   160ec:	10c00428 	cmpgeui	r3,r2,16
   160f0:	18001a1e 	bne	r3,zero,1615c <alt_exception_cause_generated_bad_addr+0x88>
   160f4:	100690ba 	slli	r3,r2,2
   160f8:	00800074 	movhi	r2,1
   160fc:	10984304 	addi	r2,r2,24844
   16100:	1885883a 	add	r2,r3,r2
   16104:	10800017 	ldw	r2,0(r2)
   16108:	1000683a 	jmp	r2
   1610c:	0001614c 	andi	zero,zero,1413
   16110:	0001614c 	andi	zero,zero,1413
   16114:	0001615c 	xori	zero,zero,1413
   16118:	0001615c 	xori	zero,zero,1413
   1611c:	0001615c 	xori	zero,zero,1413
   16120:	0001614c 	andi	zero,zero,1413
   16124:	00016154 	movui	zero,1413
   16128:	0001615c 	xori	zero,zero,1413
   1612c:	0001614c 	andi	zero,zero,1413
   16130:	0001614c 	andi	zero,zero,1413
   16134:	0001615c 	xori	zero,zero,1413
   16138:	0001614c 	andi	zero,zero,1413
   1613c:	00016154 	movui	zero,1413
   16140:	0001615c 	xori	zero,zero,1413
   16144:	0001615c 	xori	zero,zero,1413
   16148:	0001614c 	andi	zero,zero,1413
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1614c:	00800044 	movi	r2,1
   16150:	00000306 	br	16160 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16154:	0005883a 	mov	r2,zero
   16158:	00000106 	br	16160 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1615c:	0005883a 	mov	r2,zero
  }
}
   16160:	e037883a 	mov	sp,fp
   16164:	df000017 	ldw	fp,0(sp)
   16168:	dec00104 	addi	sp,sp,4
   1616c:	f800283a 	ret

00016170 <atexit>:
   16170:	200b883a 	mov	r5,r4
   16174:	000f883a 	mov	r7,zero
   16178:	000d883a 	mov	r6,zero
   1617c:	0009883a 	mov	r4,zero
   16180:	00164f81 	jmpi	164f8 <__register_exitproc>

00016184 <exit>:
   16184:	defffe04 	addi	sp,sp,-8
   16188:	000b883a 	mov	r5,zero
   1618c:	dc000015 	stw	r16,0(sp)
   16190:	dfc00115 	stw	ra,4(sp)
   16194:	2021883a 	mov	r16,r4
   16198:	00166100 	call	16610 <__call_exitprocs>
   1619c:	008000b4 	movhi	r2,2
   161a0:	10a0c404 	addi	r2,r2,-31984
   161a4:	11000017 	ldw	r4,0(r2)
   161a8:	20800f17 	ldw	r2,60(r4)
   161ac:	10000126 	beq	r2,zero,161b4 <exit+0x30>
   161b0:	103ee83a 	callr	r2
   161b4:	8009883a 	mov	r4,r16
   161b8:	00167900 	call	16790 <_exit>

000161bc <memcmp>:
   161bc:	01c000c4 	movi	r7,3
   161c0:	3980192e 	bgeu	r7,r6,16228 <memcmp+0x6c>
   161c4:	2144b03a 	or	r2,r4,r5
   161c8:	11c4703a 	and	r2,r2,r7
   161cc:	10000f26 	beq	r2,zero,1620c <memcmp+0x50>
   161d0:	20800003 	ldbu	r2,0(r4)
   161d4:	28c00003 	ldbu	r3,0(r5)
   161d8:	10c0151e 	bne	r2,r3,16230 <memcmp+0x74>
   161dc:	31bfff84 	addi	r6,r6,-2
   161e0:	01ffffc4 	movi	r7,-1
   161e4:	00000406 	br	161f8 <memcmp+0x3c>
   161e8:	20800003 	ldbu	r2,0(r4)
   161ec:	28c00003 	ldbu	r3,0(r5)
   161f0:	31bfffc4 	addi	r6,r6,-1
   161f4:	10c00e1e 	bne	r2,r3,16230 <memcmp+0x74>
   161f8:	21000044 	addi	r4,r4,1
   161fc:	29400044 	addi	r5,r5,1
   16200:	31fff91e 	bne	r6,r7,161e8 <_gp+0xffff5edc>
   16204:	0005883a 	mov	r2,zero
   16208:	f800283a 	ret
   1620c:	20c00017 	ldw	r3,0(r4)
   16210:	28800017 	ldw	r2,0(r5)
   16214:	18bfee1e 	bne	r3,r2,161d0 <_gp+0xffff5ec4>
   16218:	31bfff04 	addi	r6,r6,-4
   1621c:	21000104 	addi	r4,r4,4
   16220:	29400104 	addi	r5,r5,4
   16224:	39bff936 	bltu	r7,r6,1620c <_gp+0xffff5f00>
   16228:	303fe91e 	bne	r6,zero,161d0 <_gp+0xffff5ec4>
   1622c:	003ff506 	br	16204 <_gp+0xffff5ef8>
   16230:	10c5c83a 	sub	r2,r2,r3
   16234:	f800283a 	ret

00016238 <_putc_r>:
   16238:	defffc04 	addi	sp,sp,-16
   1623c:	dc000215 	stw	r16,8(sp)
   16240:	dfc00315 	stw	ra,12(sp)
   16244:	2021883a 	mov	r16,r4
   16248:	20000226 	beq	r4,zero,16254 <_putc_r+0x1c>
   1624c:	20800e17 	ldw	r2,56(r4)
   16250:	10001b26 	beq	r2,zero,162c0 <_putc_r+0x88>
   16254:	30800217 	ldw	r2,8(r6)
   16258:	10bfffc4 	addi	r2,r2,-1
   1625c:	30800215 	stw	r2,8(r6)
   16260:	10000a16 	blt	r2,zero,1628c <_putc_r+0x54>
   16264:	30800017 	ldw	r2,0(r6)
   16268:	11400005 	stb	r5,0(r2)
   1626c:	30800017 	ldw	r2,0(r6)
   16270:	10c00044 	addi	r3,r2,1
   16274:	30c00015 	stw	r3,0(r6)
   16278:	10800003 	ldbu	r2,0(r2)
   1627c:	dfc00317 	ldw	ra,12(sp)
   16280:	dc000217 	ldw	r16,8(sp)
   16284:	dec00404 	addi	sp,sp,16
   16288:	f800283a 	ret
   1628c:	30c00617 	ldw	r3,24(r6)
   16290:	10c00616 	blt	r2,r3,162ac <_putc_r+0x74>
   16294:	30800017 	ldw	r2,0(r6)
   16298:	00c00284 	movi	r3,10
   1629c:	11400005 	stb	r5,0(r2)
   162a0:	30800017 	ldw	r2,0(r6)
   162a4:	11400003 	ldbu	r5,0(r2)
   162a8:	28fff11e 	bne	r5,r3,16270 <_gp+0xffff5f64>
   162ac:	8009883a 	mov	r4,r16
   162b0:	dfc00317 	ldw	ra,12(sp)
   162b4:	dc000217 	ldw	r16,8(sp)
   162b8:	dec00404 	addi	sp,sp,16
   162bc:	00163a01 	jmpi	163a0 <__swbuf_r>
   162c0:	d9400015 	stw	r5,0(sp)
   162c4:	d9800115 	stw	r6,4(sp)
   162c8:	0010f540 	call	10f54 <__sinit>
   162cc:	d9800117 	ldw	r6,4(sp)
   162d0:	d9400017 	ldw	r5,0(sp)
   162d4:	003fdf06 	br	16254 <_gp+0xffff5f48>

000162d8 <putc>:
   162d8:	008000b4 	movhi	r2,2
   162dc:	defffc04 	addi	sp,sp,-16
   162e0:	10a0c504 	addi	r2,r2,-31980
   162e4:	dc000115 	stw	r16,4(sp)
   162e8:	14000017 	ldw	r16,0(r2)
   162ec:	dc400215 	stw	r17,8(sp)
   162f0:	dfc00315 	stw	ra,12(sp)
   162f4:	2023883a 	mov	r17,r4
   162f8:	80000226 	beq	r16,zero,16304 <putc+0x2c>
   162fc:	80800e17 	ldw	r2,56(r16)
   16300:	10001a26 	beq	r2,zero,1636c <putc+0x94>
   16304:	28800217 	ldw	r2,8(r5)
   16308:	10bfffc4 	addi	r2,r2,-1
   1630c:	28800215 	stw	r2,8(r5)
   16310:	10000b16 	blt	r2,zero,16340 <putc+0x68>
   16314:	28800017 	ldw	r2,0(r5)
   16318:	14400005 	stb	r17,0(r2)
   1631c:	28800017 	ldw	r2,0(r5)
   16320:	10c00044 	addi	r3,r2,1
   16324:	28c00015 	stw	r3,0(r5)
   16328:	10800003 	ldbu	r2,0(r2)
   1632c:	dfc00317 	ldw	ra,12(sp)
   16330:	dc400217 	ldw	r17,8(sp)
   16334:	dc000117 	ldw	r16,4(sp)
   16338:	dec00404 	addi	sp,sp,16
   1633c:	f800283a 	ret
   16340:	28c00617 	ldw	r3,24(r5)
   16344:	10c00e16 	blt	r2,r3,16380 <putc+0xa8>
   16348:	28800017 	ldw	r2,0(r5)
   1634c:	01000284 	movi	r4,10
   16350:	14400005 	stb	r17,0(r2)
   16354:	28800017 	ldw	r2,0(r5)
   16358:	10c00003 	ldbu	r3,0(r2)
   1635c:	193ff01e 	bne	r3,r4,16320 <_gp+0xffff6014>
   16360:	280d883a 	mov	r6,r5
   16364:	180b883a 	mov	r5,r3
   16368:	00000706 	br	16388 <putc+0xb0>
   1636c:	8009883a 	mov	r4,r16
   16370:	d9400015 	stw	r5,0(sp)
   16374:	0010f540 	call	10f54 <__sinit>
   16378:	d9400017 	ldw	r5,0(sp)
   1637c:	003fe106 	br	16304 <_gp+0xffff5ff8>
   16380:	280d883a 	mov	r6,r5
   16384:	880b883a 	mov	r5,r17
   16388:	8009883a 	mov	r4,r16
   1638c:	dfc00317 	ldw	ra,12(sp)
   16390:	dc400217 	ldw	r17,8(sp)
   16394:	dc000117 	ldw	r16,4(sp)
   16398:	dec00404 	addi	sp,sp,16
   1639c:	00163a01 	jmpi	163a0 <__swbuf_r>

000163a0 <__swbuf_r>:
   163a0:	defffb04 	addi	sp,sp,-20
   163a4:	dcc00315 	stw	r19,12(sp)
   163a8:	dc800215 	stw	r18,8(sp)
   163ac:	dc000015 	stw	r16,0(sp)
   163b0:	dfc00415 	stw	ra,16(sp)
   163b4:	dc400115 	stw	r17,4(sp)
   163b8:	2025883a 	mov	r18,r4
   163bc:	2827883a 	mov	r19,r5
   163c0:	3021883a 	mov	r16,r6
   163c4:	20000226 	beq	r4,zero,163d0 <__swbuf_r+0x30>
   163c8:	20800e17 	ldw	r2,56(r4)
   163cc:	10004226 	beq	r2,zero,164d8 <__swbuf_r+0x138>
   163d0:	80800617 	ldw	r2,24(r16)
   163d4:	8100030b 	ldhu	r4,12(r16)
   163d8:	80800215 	stw	r2,8(r16)
   163dc:	2080020c 	andi	r2,r4,8
   163e0:	10003626 	beq	r2,zero,164bc <__swbuf_r+0x11c>
   163e4:	80c00417 	ldw	r3,16(r16)
   163e8:	18003426 	beq	r3,zero,164bc <__swbuf_r+0x11c>
   163ec:	2088000c 	andi	r2,r4,8192
   163f0:	9c403fcc 	andi	r17,r19,255
   163f4:	10001a26 	beq	r2,zero,16460 <__swbuf_r+0xc0>
   163f8:	80800017 	ldw	r2,0(r16)
   163fc:	81000517 	ldw	r4,20(r16)
   16400:	10c7c83a 	sub	r3,r2,r3
   16404:	1900200e 	bge	r3,r4,16488 <__swbuf_r+0xe8>
   16408:	18c00044 	addi	r3,r3,1
   1640c:	81000217 	ldw	r4,8(r16)
   16410:	11400044 	addi	r5,r2,1
   16414:	81400015 	stw	r5,0(r16)
   16418:	213fffc4 	addi	r4,r4,-1
   1641c:	81000215 	stw	r4,8(r16)
   16420:	14c00005 	stb	r19,0(r2)
   16424:	80800517 	ldw	r2,20(r16)
   16428:	10c01e26 	beq	r2,r3,164a4 <__swbuf_r+0x104>
   1642c:	8080030b 	ldhu	r2,12(r16)
   16430:	1080004c 	andi	r2,r2,1
   16434:	10000226 	beq	r2,zero,16440 <__swbuf_r+0xa0>
   16438:	00800284 	movi	r2,10
   1643c:	88801926 	beq	r17,r2,164a4 <__swbuf_r+0x104>
   16440:	8805883a 	mov	r2,r17
   16444:	dfc00417 	ldw	ra,16(sp)
   16448:	dcc00317 	ldw	r19,12(sp)
   1644c:	dc800217 	ldw	r18,8(sp)
   16450:	dc400117 	ldw	r17,4(sp)
   16454:	dc000017 	ldw	r16,0(sp)
   16458:	dec00504 	addi	sp,sp,20
   1645c:	f800283a 	ret
   16460:	81401917 	ldw	r5,100(r16)
   16464:	00b7ffc4 	movi	r2,-8193
   16468:	21080014 	ori	r4,r4,8192
   1646c:	2884703a 	and	r2,r5,r2
   16470:	80801915 	stw	r2,100(r16)
   16474:	80800017 	ldw	r2,0(r16)
   16478:	8100030d 	sth	r4,12(r16)
   1647c:	81000517 	ldw	r4,20(r16)
   16480:	10c7c83a 	sub	r3,r2,r3
   16484:	193fe016 	blt	r3,r4,16408 <_gp+0xffff60fc>
   16488:	800b883a 	mov	r5,r16
   1648c:	9009883a 	mov	r4,r18
   16490:	0012ecc0 	call	12ecc <_fflush_r>
   16494:	1000071e 	bne	r2,zero,164b4 <__swbuf_r+0x114>
   16498:	80800017 	ldw	r2,0(r16)
   1649c:	00c00044 	movi	r3,1
   164a0:	003fda06 	br	1640c <_gp+0xffff6100>
   164a4:	800b883a 	mov	r5,r16
   164a8:	9009883a 	mov	r4,r18
   164ac:	0012ecc0 	call	12ecc <_fflush_r>
   164b0:	103fe326 	beq	r2,zero,16440 <_gp+0xffff6134>
   164b4:	00bfffc4 	movi	r2,-1
   164b8:	003fe206 	br	16444 <_gp+0xffff6138>
   164bc:	800b883a 	mov	r5,r16
   164c0:	9009883a 	mov	r4,r18
   164c4:	0012a040 	call	12a04 <__swsetup_r>
   164c8:	103ffa1e 	bne	r2,zero,164b4 <_gp+0xffff61a8>
   164cc:	8100030b 	ldhu	r4,12(r16)
   164d0:	80c00417 	ldw	r3,16(r16)
   164d4:	003fc506 	br	163ec <_gp+0xffff60e0>
   164d8:	0010f540 	call	10f54 <__sinit>
   164dc:	003fbc06 	br	163d0 <_gp+0xffff60c4>

000164e0 <__swbuf>:
   164e0:	008000b4 	movhi	r2,2
   164e4:	10a0c504 	addi	r2,r2,-31980
   164e8:	280d883a 	mov	r6,r5
   164ec:	200b883a 	mov	r5,r4
   164f0:	11000017 	ldw	r4,0(r2)
   164f4:	00163a01 	jmpi	163a0 <__swbuf_r>

000164f8 <__register_exitproc>:
   164f8:	defffa04 	addi	sp,sp,-24
   164fc:	dc000315 	stw	r16,12(sp)
   16500:	040000b4 	movhi	r16,2
   16504:	8420c404 	addi	r16,r16,-31984
   16508:	80c00017 	ldw	r3,0(r16)
   1650c:	dc400415 	stw	r17,16(sp)
   16510:	dfc00515 	stw	ra,20(sp)
   16514:	18805217 	ldw	r2,328(r3)
   16518:	2023883a 	mov	r17,r4
   1651c:	10003726 	beq	r2,zero,165fc <__register_exitproc+0x104>
   16520:	10c00117 	ldw	r3,4(r2)
   16524:	010007c4 	movi	r4,31
   16528:	20c00e16 	blt	r4,r3,16564 <__register_exitproc+0x6c>
   1652c:	1a000044 	addi	r8,r3,1
   16530:	8800221e 	bne	r17,zero,165bc <__register_exitproc+0xc4>
   16534:	18c00084 	addi	r3,r3,2
   16538:	18c7883a 	add	r3,r3,r3
   1653c:	18c7883a 	add	r3,r3,r3
   16540:	12000115 	stw	r8,4(r2)
   16544:	10c7883a 	add	r3,r2,r3
   16548:	19400015 	stw	r5,0(r3)
   1654c:	0005883a 	mov	r2,zero
   16550:	dfc00517 	ldw	ra,20(sp)
   16554:	dc400417 	ldw	r17,16(sp)
   16558:	dc000317 	ldw	r16,12(sp)
   1655c:	dec00604 	addi	sp,sp,24
   16560:	f800283a 	ret
   16564:	00800034 	movhi	r2,0
   16568:	10800004 	addi	r2,r2,0
   1656c:	10002626 	beq	r2,zero,16608 <__register_exitproc+0x110>
   16570:	01006404 	movi	r4,400
   16574:	d9400015 	stw	r5,0(sp)
   16578:	d9800115 	stw	r6,4(sp)
   1657c:	d9c00215 	stw	r7,8(sp)
   16580:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   16584:	d9400017 	ldw	r5,0(sp)
   16588:	d9800117 	ldw	r6,4(sp)
   1658c:	d9c00217 	ldw	r7,8(sp)
   16590:	10001d26 	beq	r2,zero,16608 <__register_exitproc+0x110>
   16594:	81000017 	ldw	r4,0(r16)
   16598:	10000115 	stw	zero,4(r2)
   1659c:	02000044 	movi	r8,1
   165a0:	22405217 	ldw	r9,328(r4)
   165a4:	0007883a 	mov	r3,zero
   165a8:	12400015 	stw	r9,0(r2)
   165ac:	20805215 	stw	r2,328(r4)
   165b0:	10006215 	stw	zero,392(r2)
   165b4:	10006315 	stw	zero,396(r2)
   165b8:	883fde26 	beq	r17,zero,16534 <_gp+0xffff6228>
   165bc:	18c9883a 	add	r4,r3,r3
   165c0:	2109883a 	add	r4,r4,r4
   165c4:	1109883a 	add	r4,r2,r4
   165c8:	21802215 	stw	r6,136(r4)
   165cc:	01800044 	movi	r6,1
   165d0:	12406217 	ldw	r9,392(r2)
   165d4:	30cc983a 	sll	r6,r6,r3
   165d8:	4992b03a 	or	r9,r9,r6
   165dc:	12406215 	stw	r9,392(r2)
   165e0:	21c04215 	stw	r7,264(r4)
   165e4:	01000084 	movi	r4,2
   165e8:	893fd21e 	bne	r17,r4,16534 <_gp+0xffff6228>
   165ec:	11006317 	ldw	r4,396(r2)
   165f0:	218cb03a 	or	r6,r4,r6
   165f4:	11806315 	stw	r6,396(r2)
   165f8:	003fce06 	br	16534 <_gp+0xffff6228>
   165fc:	18805304 	addi	r2,r3,332
   16600:	18805215 	stw	r2,328(r3)
   16604:	003fc606 	br	16520 <_gp+0xffff6214>
   16608:	00bfffc4 	movi	r2,-1
   1660c:	003fd006 	br	16550 <_gp+0xffff6244>

00016610 <__call_exitprocs>:
   16610:	defff504 	addi	sp,sp,-44
   16614:	df000915 	stw	fp,36(sp)
   16618:	dd400615 	stw	r21,24(sp)
   1661c:	dc800315 	stw	r18,12(sp)
   16620:	dfc00a15 	stw	ra,40(sp)
   16624:	ddc00815 	stw	r23,32(sp)
   16628:	dd800715 	stw	r22,28(sp)
   1662c:	dd000515 	stw	r20,20(sp)
   16630:	dcc00415 	stw	r19,16(sp)
   16634:	dc400215 	stw	r17,8(sp)
   16638:	dc000115 	stw	r16,4(sp)
   1663c:	d9000015 	stw	r4,0(sp)
   16640:	2839883a 	mov	fp,r5
   16644:	04800044 	movi	r18,1
   16648:	057fffc4 	movi	r21,-1
   1664c:	008000b4 	movhi	r2,2
   16650:	10a0c404 	addi	r2,r2,-31984
   16654:	12000017 	ldw	r8,0(r2)
   16658:	45005217 	ldw	r20,328(r8)
   1665c:	44c05204 	addi	r19,r8,328
   16660:	a0001c26 	beq	r20,zero,166d4 <__call_exitprocs+0xc4>
   16664:	a0800117 	ldw	r2,4(r20)
   16668:	15ffffc4 	addi	r23,r2,-1
   1666c:	b8000d16 	blt	r23,zero,166a4 <__call_exitprocs+0x94>
   16670:	14000044 	addi	r16,r2,1
   16674:	8421883a 	add	r16,r16,r16
   16678:	8421883a 	add	r16,r16,r16
   1667c:	84402004 	addi	r17,r16,128
   16680:	a463883a 	add	r17,r20,r17
   16684:	a421883a 	add	r16,r20,r16
   16688:	e0001e26 	beq	fp,zero,16704 <__call_exitprocs+0xf4>
   1668c:	80804017 	ldw	r2,256(r16)
   16690:	e0801c26 	beq	fp,r2,16704 <__call_exitprocs+0xf4>
   16694:	bdffffc4 	addi	r23,r23,-1
   16698:	843fff04 	addi	r16,r16,-4
   1669c:	8c7fff04 	addi	r17,r17,-4
   166a0:	bd7ff91e 	bne	r23,r21,16688 <_gp+0xffff637c>
   166a4:	00800034 	movhi	r2,0
   166a8:	10800004 	addi	r2,r2,0
   166ac:	10000926 	beq	r2,zero,166d4 <__call_exitprocs+0xc4>
   166b0:	a0800117 	ldw	r2,4(r20)
   166b4:	1000301e 	bne	r2,zero,16778 <__call_exitprocs+0x168>
   166b8:	a0800017 	ldw	r2,0(r20)
   166bc:	10003226 	beq	r2,zero,16788 <__call_exitprocs+0x178>
   166c0:	a009883a 	mov	r4,r20
   166c4:	98800015 	stw	r2,0(r19)
   166c8:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   166cc:	9d000017 	ldw	r20,0(r19)
   166d0:	a03fe41e 	bne	r20,zero,16664 <_gp+0xffff6358>
   166d4:	dfc00a17 	ldw	ra,40(sp)
   166d8:	df000917 	ldw	fp,36(sp)
   166dc:	ddc00817 	ldw	r23,32(sp)
   166e0:	dd800717 	ldw	r22,28(sp)
   166e4:	dd400617 	ldw	r21,24(sp)
   166e8:	dd000517 	ldw	r20,20(sp)
   166ec:	dcc00417 	ldw	r19,16(sp)
   166f0:	dc800317 	ldw	r18,12(sp)
   166f4:	dc400217 	ldw	r17,8(sp)
   166f8:	dc000117 	ldw	r16,4(sp)
   166fc:	dec00b04 	addi	sp,sp,44
   16700:	f800283a 	ret
   16704:	a0800117 	ldw	r2,4(r20)
   16708:	80c00017 	ldw	r3,0(r16)
   1670c:	10bfffc4 	addi	r2,r2,-1
   16710:	15c01426 	beq	r2,r23,16764 <__call_exitprocs+0x154>
   16714:	80000015 	stw	zero,0(r16)
   16718:	183fde26 	beq	r3,zero,16694 <_gp+0xffff6388>
   1671c:	95c8983a 	sll	r4,r18,r23
   16720:	a0806217 	ldw	r2,392(r20)
   16724:	a5800117 	ldw	r22,4(r20)
   16728:	2084703a 	and	r2,r4,r2
   1672c:	10000b26 	beq	r2,zero,1675c <__call_exitprocs+0x14c>
   16730:	a0806317 	ldw	r2,396(r20)
   16734:	2088703a 	and	r4,r4,r2
   16738:	20000c1e 	bne	r4,zero,1676c <__call_exitprocs+0x15c>
   1673c:	89400017 	ldw	r5,0(r17)
   16740:	d9000017 	ldw	r4,0(sp)
   16744:	183ee83a 	callr	r3
   16748:	a0800117 	ldw	r2,4(r20)
   1674c:	15bfbf1e 	bne	r2,r22,1664c <_gp+0xffff6340>
   16750:	98800017 	ldw	r2,0(r19)
   16754:	153fcf26 	beq	r2,r20,16694 <_gp+0xffff6388>
   16758:	003fbc06 	br	1664c <_gp+0xffff6340>
   1675c:	183ee83a 	callr	r3
   16760:	003ff906 	br	16748 <_gp+0xffff643c>
   16764:	a5c00115 	stw	r23,4(r20)
   16768:	003feb06 	br	16718 <_gp+0xffff640c>
   1676c:	89000017 	ldw	r4,0(r17)
   16770:	183ee83a 	callr	r3
   16774:	003ff406 	br	16748 <_gp+0xffff643c>
   16778:	a0800017 	ldw	r2,0(r20)
   1677c:	a027883a 	mov	r19,r20
   16780:	1029883a 	mov	r20,r2
   16784:	003fb606 	br	16660 <_gp+0xffff6354>
   16788:	0005883a 	mov	r2,zero
   1678c:	003ffb06 	br	1677c <_gp+0xffff6470>

00016790 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16790:	defffd04 	addi	sp,sp,-12
   16794:	df000215 	stw	fp,8(sp)
   16798:	df000204 	addi	fp,sp,8
   1679c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   167a0:	0001883a 	nop
   167a4:	e0bfff17 	ldw	r2,-4(fp)
   167a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   167ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   167b0:	10000226 	beq	r2,zero,167bc <_exit+0x2c>
    ALT_SIM_FAIL();
   167b4:	002af070 	cmpltui	zero,zero,43969
   167b8:	00000106 	br	167c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   167bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   167c0:	003fff06 	br	167c0 <_gp+0xffff64b4>
